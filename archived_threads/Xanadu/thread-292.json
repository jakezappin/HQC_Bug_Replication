{"0": {"author": "RX1", "date": "1679699807229", "content": "I use the following dev:\ndev = qml.device('qiskit.aer', wires=wires)\nTraining cost function:\ndef cost(params, features, labels):\n    predictions = [variational_classifier(params, feat) for feat in features]\n    return square_loss(labels, predictions)\n\nThe training function is as follows:\ndef TrainCost(params_init):\n    opt = qml.NesterovMomentumOptimizer(0.09)\n    batch_size = 30\n    weights = params_init\n    #bias = np.array(0.0, requires_grad=True)\n    his_acc_val = []\n    his_acc_train = []\n    his_cost = []\n    f1_train = []\n    f1_test = []\n    his_weights = []\n    for it in range(30):\n\n        # Update the weights by one optimizer step\n        batch_index = np.random.randint(0, 2 * train_size, (batch_size,))\n        feats_train_batch = feats_train[batch_index]\n        Y_train_batch = Y_train[batch_index]\n        #cost(params, bias, features, labels):\n        weights, _, _ = opt.step(cost, weights, feats_train_batch, Y_train_batch)\n        #print(bias)\n        his_weights.append(weights)\n        # Compute predictions on train and validation set\n        predictions_train = [np.sign(variational_classifier(weights, feat)) for feat in feats_train]\n        predictions_val = [np.sign(variational_classifier(weights, feat)) for feat in feats_val]\n#         print(Y_train)\n#         print()\n#         print(predictions_train)\n#         a = 1 / 0\n        #print(Counter(predictions_train))\n#         print(Counter(predictions_val))\n\n        # Compute accuracy on train and validation set\n        acc_train = accuracy(Y_train, predictions_train)\n\n        acc_val = accuracy(Y_val, predictions_val)\n        a = f1_score(Y_train, predictions_train)\n        b = f1_score(Y_val, predictions_val)\n        print(a, b)\n        f1_train.append(a)\n        f1_test.append(b)\n        his_acc_val.append(acc_val)\n        his_acc_train.append(acc_train)\n        his_cost.append(cost(weights, features, Y))\n        print(\"Iter: {:5d} | Cost: {:0.7f} | Acc train: {:0.7f} | Acc validation: {:0.7f} \"\n            \"\".format(it + 1, cost(weights, features, Y), acc_train, acc_val))\n\nTraining results:\n\nimage1481\u00d7572 100 KB\n\n@isaacdevlugt @CatalinaAlbornoz @Maria_Schuld", "link": "https://discuss.pennylane.ai//t/the-infeasibility-of-the-qiskit-aer-training-cost-function/2769/1"}, "1": {"author": "CatalinaAlbornoz", "date": "1680026788004", "content": "Hi @RX1,\nCan you please share a minimal version of your code that reproduces this error? And can you please post the output of qml.about() and your full error traceback?\nFrom what I can see in the error message it seems that you might be using some deprecated functionalities in your variational classifier.\nRemember that a minimal version of your code should be complete enough so that we can run it and try to reproduce the error, but it should be as minimal as possible, so that we can actually find where the error lies.\nPlease let me know if you have any additional questions about this.", "link": "https://discuss.pennylane.ai//t/the-infeasibility-of-the-qiskit-aer-training-cost-function/2769/2"}, "2": {"author": "RX1", "date": "1680052108065", "content": "\n\n\npennylane.ai\n\n\n\nVariational classifier \u2014 PennyLane 2\nUsing PennyLane to implement quantum circuits that can be trained from labelled data to classify new data samples.\n\n\n\n\n\nThis is the reference case for the source code. But I removed the trainable variable bias.\n@CatalinaAlbornoz", "link": "https://discuss.pennylane.ai//t/the-infeasibility-of-the-qiskit-aer-training-cost-function/2769/3"}, "3": {"author": "isaacdevlugt", "date": "1680532664939", "content": "Hey @RX1! As @CatalinaAlbornoz mentioned, it will help us tremendously if you share a minimal version of your code that reproduces the error, the output of qml.about(), and the full error traceback. It\u2019s difficult to see what\u2019s going on without that information ", "link": "https://discuss.pennylane.ai//t/the-infeasibility-of-the-qiskit-aer-training-cost-function/2769/4"}, "4": {"author": "RX1", "date": "1679699807229", "content": "I use the following dev:\ndev = qml.device('qiskit.aer', wires=wires)\nTraining cost function:\ndef cost(params, features, labels):\n    predictions = [variational_classifier(params, feat) for feat in features]\n    return square_loss(labels, predictions)\n\nThe training function is as follows:\ndef TrainCost(params_init):\n    opt = qml.NesterovMomentumOptimizer(0.09)\n    batch_size = 30\n    weights = params_init\n    #bias = np.array(0.0, requires_grad=True)\n    his_acc_val = []\n    his_acc_train = []\n    his_cost = []\n    f1_train = []\n    f1_test = []\n    his_weights = []\n    for it in range(30):\n\n        # Update the weights by one optimizer step\n        batch_index = np.random.randint(0, 2 * train_size, (batch_size,))\n        feats_train_batch = feats_train[batch_index]\n        Y_train_batch = Y_train[batch_index]\n        #cost(params, bias, features, labels):\n        weights, _, _ = opt.step(cost, weights, feats_train_batch, Y_train_batch)\n        #print(bias)\n        his_weights.append(weights)\n        # Compute predictions on train and validation set\n        predictions_train = [np.sign(variational_classifier(weights, feat)) for feat in feats_train]\n        predictions_val = [np.sign(variational_classifier(weights, feat)) for feat in feats_val]\n#         print(Y_train)\n#         print()\n#         print(predictions_train)\n#         a = 1 / 0\n        #print(Counter(predictions_train))\n#         print(Counter(predictions_val))\n\n        # Compute accuracy on train and validation set\n        acc_train = accuracy(Y_train, predictions_train)\n\n        acc_val = accuracy(Y_val, predictions_val)\n        a = f1_score(Y_train, predictions_train)\n        b = f1_score(Y_val, predictions_val)\n        print(a, b)\n        f1_train.append(a)\n        f1_test.append(b)\n        his_acc_val.append(acc_val)\n        his_acc_train.append(acc_train)\n        his_cost.append(cost(weights, features, Y))\n        print(\"Iter: {:5d} | Cost: {:0.7f} | Acc train: {:0.7f} | Acc validation: {:0.7f} \"\n            \"\".format(it + 1, cost(weights, features, Y), acc_train, acc_val))\n\nTraining results:\n\nimage1481\u00d7572 100 KB\n\n@isaacdevlugt @CatalinaAlbornoz @Maria_Schuld", "link": "https://discuss.pennylane.ai//t/the-infeasibility-of-the-qiskit-aer-training-cost-function/2769/5"}}