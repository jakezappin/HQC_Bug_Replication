{"0": {"author": "cnada", "date": "1569279857841", "content": "Hello,\nI was wondering how to use the Pytorch interface the best way in order to apply a QNode on multiple inputs of a dataset X,Y. I was thinking something like :\n@qml.qnode(dev,interface=\"torch\")\ndef circuit(parameters, x):\n    # do some quantum operations\n    # return an expectation value giving probability\n    # output in a binary supervised learning setup\n    return qml.expval(qml.PauliZ(0))\n\ndef apply_loss(labels, predictions):\n    # define loss\n    return loss\n\ndef cost(var, X, Y):\n      predictions = ?\n      # define cost\n\nTo define the cost, would we have to loop over all examples in X and Y to get their predictions? I guess since batching is not available yet right? Yet how to do so if we define X,Y to be tensors in order to apply our optimizer on the variable var ?\nThanks in advance for help ", "link": "https://discuss.pennylane.ai//t/pytorch-interface-using-multiple-inputs-best-practice/232/1"}, "1": {"author": "AroosaIjaz", "date": "1569346042881", "content": "Dear @cnada,\nCan you provide a bit more info about what you\u2019re thinking so we can give the best answer? Are you trying to break a dataset into batches and feed those into the circuit function? Or are you trying to build a cost function involving multiple elements from the dataset?", "link": "https://discuss.pennylane.ai//t/pytorch-interface-using-multiple-inputs-best-practice/232/2"}, "2": {"author": "cnada", "date": "1569357521484", "content": "Dear @AroosaIjaz,\nSure. I am trying to define a cost function with the elements (x_i \\in X), i=1..n  from the input dataset X with n elements. Let us say the function is the binary cross-entropy. The quantum circuit would take as input each element, encode it as parameters of some gates, then apply other gates with the attribute parameters which I optimize onto.\nI would also be interested in doing my optimization in batches. But I think this is done by inputing a batch as X and do optimiser.step() feeding it the batch right?\nSorry if I am not clear.", "link": "https://discuss.pennylane.ai//t/pytorch-interface-using-multiple-inputs-best-practice/232/3"}, "3": {"author": "AroosaIjaz", "date": "1569358534412", "content": "Dear @cnada,\nIn this case, you can simply use Numpy functions to randomly choose a batch from your dataset. The following tutorial does something similar:\nhttps://pennylane.readthedocs.io/en/latest/tutorials/pennylane_run_variational_classifier.html#variational-classifier 6\nbatch_size = 5\nbatch_index = np.random.randint(0, len(X), (batch_size,))\nX_batch = X[batch_index]\nY_batch = Y[batch_index]\n\nThe cost function can then accept batches as input and the optimizer can update the var variable:\nvar = opt.step( cost(var, X_batch, Y_batch)`\n\nHope this helps. Don\u2019t hesitate to ask any follow-up questions!1", "link": "https://discuss.pennylane.ai//t/pytorch-interface-using-multiple-inputs-best-practice/232/4"}, "4": {"author": "cnada", "date": "1569363718108", "content": "@AroosaIjaz,\nSure for that part but how to then apply the cost on the batch input instances? Do I need to loop over each of them to get the output of the quantum node for the loss? I am also asking for the best way to do so with the pytorch interface.\nThanks.", "link": "https://discuss.pennylane.ai//t/pytorch-interface-using-multiple-inputs-best-practice/232/5"}, "5": {"author": "nathan", "date": "1569507646987", "content": "Hi @cnada,\nSince none of the underlying simulators/hardware devices support batching, unfortunately you\u2019ll still have to provide a batch of inputs manually (e.g., with a for loop).\nA more intensive option (taken by fellow user @rooler) is to manually create a simulator which automatically handles batching   (see here).\nWe do have on our roadmap to provide batching support in PennyLane. This would require either that a backend provider exposes this feature, or that we build our own support in PennyLane\u2019s own simulators. But for the moment, you\u2019ll have to use the old-fashioned option mentioned above.1", "link": "https://discuss.pennylane.ai//t/pytorch-interface-using-multiple-inputs-best-practice/232/6"}, "6": {"author": "cnada", "date": "1569279857841", "content": "Hello,\nI was wondering how to use the Pytorch interface the best way in order to apply a QNode on multiple inputs of a dataset X,Y. I was thinking something like :\n@qml.qnode(dev,interface=\"torch\")\ndef circuit(parameters, x):\n    # do some quantum operations\n    # return an expectation value giving probability\n    # output in a binary supervised learning setup\n    return qml.expval(qml.PauliZ(0))\n\ndef apply_loss(labels, predictions):\n    # define loss\n    return loss\n\ndef cost(var, X, Y):\n      predictions = ?\n      # define cost\n\nTo define the cost, would we have to loop over all examples in X and Y to get their predictions? I guess since batching is not available yet right? Yet how to do so if we define X,Y to be tensors in order to apply our optimizer on the variable var ?\nThanks in advance for help ", "link": "https://discuss.pennylane.ai//t/pytorch-interface-using-multiple-inputs-best-practice/232/7"}, "7": {"author": "cnada", "date": "1569357521484", "content": "Dear @AroosaIjaz,\nSure. I am trying to define a cost function with the elements (x_i \\in X), i=1..n xi\u2208X),i=1..n from the input dataset XX with nn elements. Let us say the function is the binary cross-entropy. The quantum circuit would take as input each element, encode it as parameters of some gates, then apply other gates with the attribute parameters which I optimize onto.\nI would also be interested in doing my optimization in batches. But I think this is done by inputing a batch as X and do optimiser.step() feeding it the batch right?\nSorry if I am not clear.", "link": "https://discuss.pennylane.ai//t/pytorch-interface-using-multiple-inputs-best-practice/232/8"}}