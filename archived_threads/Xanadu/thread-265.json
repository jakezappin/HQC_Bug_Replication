{"0": {"author": "DarthMalloc", "date": "1695267486487", "content": "Hi all, this question is sort of a two-parter.\nI am trying to use Lightning GPU for more efficient use of cuda in a major experiment.\nHere are my Pennylane specs:\nName: PennyLane\nVersion: 0.32.0\nSummary: PennyLane is a Python quantum machine learning library by Xanadu Inc.\nHome-page: https://github.com/PennyLaneAI/pennylane\nAuthor: \nAuthor-email: \nLicense: Apache License 2.0\nLocation: /usr/local/lib/python3.11/dist-packages\nRequires: appdirs, autograd, autoray, cachetools, networkx, numpy, pennylane-lightning, requests, rustworkx, scipy, semantic-version, toml, typing-extensions\nRequired-by: PennyLane-Lightning, PennyLane-Lightning-GPU\n\nPlatform info:           Linux-6.2.0-33-generic-x86_64-with-glibc2.35\nPython version:          3.11.0\nNumpy version:           1.23.5\nScipy version:           1.10.1\nInstalled devices:\n- default.gaussian (PennyLane-0.32.0)\n- default.mixed (PennyLane-0.32.0)\n- default.qubit (PennyLane-0.32.0)\n- default.qubit.autograd (PennyLane-0.32.0)\n- default.qubit.jax (PennyLane-0.32.0)\n- default.qubit.tf (PennyLane-0.32.0)\n- default.qubit.torch (PennyLane-0.32.0)\n- default.qutrit (PennyLane-0.32.0)\n- null.qubit (PennyLane-0.32.0)\n- lightning.qubit (PennyLane-Lightning-0.32.0)\n- lightning.gpu (PennyLane-Lightning-GPU-0.32.0)\n\nI just installed the Lightning-GPU plugin, and I ran the lines below to check that it worked:\nimport pennylane as qml\nwires = 3\ndev = qml.device('lightning.gpu', wires=wires)\n\nWhen I ran these lines, I got this message:\nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.11/dist-packages/pennylane_lightning_gpu/lightning_gpu.py\", line 52, in <module>\n    from .lightning_gpu_qubit_ops import (\nImportError: libcudart.so.11.0: cannot open shared object file: No such file or directory\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/usr/lib/python3.11/idlelib/run.py\", line 578, in runcode\n    exec(code, self.locals)\n  File \"<pyshell#3>\", line 1, in <module>\n  File \"/usr/local/lib/python3.11/dist-packages/pennylane/__init__.py\", line 336, in device\n    plugin_device_class = plugin_devices[name].load()\n                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.11/dist-packages/pkg_resources/__init__.py\", line 2517, in load\n    return self.resolve()\n           ^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.11/dist-packages/pkg_resources/__init__.py\", line 2523, in resolve\n    module = __import__(self.module_name, fromlist=['__name__'], level=0)\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.11/dist-packages/pennylane_lightning_gpu/__init__.py\", line 17, in <module>\n    from .lightning_gpu import LightningGPU\n  File \"/usr/local/lib/python3.11/dist-packages/pennylane_lightning_gpu/lightning_gpu.py\", line 111, in <module>\n    except (ModuleNotFoundError, ImportError, ValueError, PLException) as e:\n                                                          ^^^^^^^^^^^\nNameError: name 'PLException' is not defined. Did you mean: 'Exception'?\n\nI checked the forum for similar issues, and I noticed this one:\nhttps://discuss.pennylane.ai/t/pennylane-lightning-gpu/3200/14 2\nThe creator of that post was able to resolve the first part of the problem by installing cuquantum, so I tried the same thing with sudo pip3.11 install --no-cache-dir cuquantum, but after that installation, I still get the same error, and I would really appreciate some help.\nThe second part of my question has to do with an issue that I have encountered when trying to run my experiment without Lightning GPU. In this part, I get an error message that says CUDA out of memory. The code that produces this error is proprietary, so I unfortunately can\u2019t share it, but I am wondering if it is the sort of issue that could be resolved using Lightning GPU. I managed to solve the issue somewhat by downsizing my network architecture a bit, but I would rather not have to resort to that.", "link": "https://discuss.pennylane.ai//t/lightning-gpu-raises-importerror-nameerror/3452/1"}, "1": {"author": "mlxd", "date": "1695327544364", "content": "Hi @DarthMalloc\nFor point 1, I believe the issue is the CUDA version. Currently, lightning.gpu requires CUDA 11 (between 11.5 and 11.8) to operate. We are currently undertaking a move to CUDA 12, but right now you will need a CUDA 11 library runtime, as well as associated math libraries to use lightning.gpu, alongside a CUDA 11 version of cuQuantum\u2019s custatevec (pip install custatevec-cu11). Since most default installations of CUDA now favour 12.0, the difference in major version is likely the issue here, If you downgrade your CUDA toolkit to 11.8, this should fix the reported error.\nFor your second point, without seeing your circuit, it will be very difficult to reason the problem. I suspect since you are using CUDA but not lightning.gpu you are running default.qubit through either Torch or JAX\u2019s for the CUDA support. If this is the case, your are also likely using backpropagation for the differentiation method. If so, native backprop will use a lot of RAM as your start to approach larger (14+) qubits, as well as deeper circuits. I suspect this is the issue, assuming I have reasoned correctly. Using lightning.gpu with the diff_method=\"adjoint\" method will scale better in memory use, but at the expense of more compute. You can also use diff_method=\"parameter-shift\" for any device, which will only use as much memory as is required for a single forward execution, but will scale in number of executions as O(2*M*N), where M is the number of parameters in your circuit, and N the number of observables. This may or may not be a reasonable runtime, depending on what you are trying to do.\nIf you can share a minimum working example, we will be happy to provide more help on this.", "link": "https://discuss.pennylane.ai//t/lightning-gpu-raises-importerror-nameerror/3452/2"}, "2": {"author": "DarthMalloc", "date": "1695413215557", "content": "Thank you very much for getting back to me! I managed to find another workaround for my memory issue, so I won\u2019t need to use lightning.gpu for that. I think I will wait for the move to CUDA 12, since I\u2019m a bit nervous about potential problems resulting from downgrading to 11.8. I am actually using default.mixed. I may end up using the parameter-shift method in case I run into problems. Just for comparison, what\u2019s the big-O cost of the backpropagation differentiation method?", "link": "https://discuss.pennylane.ai//t/lightning-gpu-raises-importerror-nameerror/3452/3"}, "3": {"author": "CatalinaAlbornoz", "date": "1695698426621", "content": "Hi @DarthMalloc, I\u2019m glad to hear you solved your memory issue.\nThe demo here 1 makes a good time comparison between the parameter-shift method and backpropagation. As you can see backpropagation is faster, and actually diff_method=\"adjoint\" is much faster. You can see a comparison here 1.", "link": "https://discuss.pennylane.ai//t/lightning-gpu-raises-importerror-nameerror/3452/4"}, "4": {"author": "DarthMalloc", "date": "1695267486487", "content": "Hi all, this question is sort of a two-parter.\nI am trying to use Lightning GPU for more efficient use of cuda in a major experiment.\nHere are my Pennylane specs:\nName: PennyLane\nVersion: 0.32.0\nSummary: PennyLane is a Python quantum machine learning library by Xanadu Inc.\nHome-page: https://github.com/PennyLaneAI/pennylane\nAuthor: \nAuthor-email: \nLicense: Apache License 2.0\nLocation: /usr/local/lib/python3.11/dist-packages\nRequires: appdirs, autograd, autoray, cachetools, networkx, numpy, pennylane-lightning, requests, rustworkx, scipy, semantic-version, toml, typing-extensions\nRequired-by: PennyLane-Lightning, PennyLane-Lightning-GPU\n\nPlatform info:           Linux-6.2.0-33-generic-x86_64-with-glibc2.35\nPython version:          3.11.0\nNumpy version:           1.23.5\nScipy version:           1.10.1\nInstalled devices:\n- default.gaussian (PennyLane-0.32.0)\n- default.mixed (PennyLane-0.32.0)\n- default.qubit (PennyLane-0.32.0)\n- default.qubit.autograd (PennyLane-0.32.0)\n- default.qubit.jax (PennyLane-0.32.0)\n- default.qubit.tf (PennyLane-0.32.0)\n- default.qubit.torch (PennyLane-0.32.0)\n- default.qutrit (PennyLane-0.32.0)\n- null.qubit (PennyLane-0.32.0)\n- lightning.qubit (PennyLane-Lightning-0.32.0)\n- lightning.gpu (PennyLane-Lightning-GPU-0.32.0)\n\nI just installed the Lightning-GPU plugin, and I ran the lines below to check that it worked:\nimport pennylane as qml\nwires = 3\ndev = qml.device('lightning.gpu', wires=wires)\n\nWhen I ran these lines, I got this message:\nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.11/dist-packages/pennylane_lightning_gpu/lightning_gpu.py\", line 52, in <module>\n    from .lightning_gpu_qubit_ops import (\nImportError: libcudart.so.11.0: cannot open shared object file: No such file or directory\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/usr/lib/python3.11/idlelib/run.py\", line 578, in runcode\n    exec(code, self.locals)\n  File \"<pyshell#3>\", line 1, in <module>\n  File \"/usr/local/lib/python3.11/dist-packages/pennylane/__init__.py\", line 336, in device\n    plugin_device_class = plugin_devices[name].load()\n                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.11/dist-packages/pkg_resources/__init__.py\", line 2517, in load\n    return self.resolve()\n           ^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.11/dist-packages/pkg_resources/__init__.py\", line 2523, in resolve\n    module = __import__(self.module_name, fromlist=['__name__'], level=0)\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.11/dist-packages/pennylane_lightning_gpu/__init__.py\", line 17, in <module>\n    from .lightning_gpu import LightningGPU\n  File \"/usr/local/lib/python3.11/dist-packages/pennylane_lightning_gpu/lightning_gpu.py\", line 111, in <module>\n    except (ModuleNotFoundError, ImportError, ValueError, PLException) as e:\n                                                          ^^^^^^^^^^^\nNameError: name 'PLException' is not defined. Did you mean: 'Exception'?\n\nI checked the forum for similar issues, and I noticed this one:\nhttps://discuss.pennylane.ai/t/pennylane-lightning-gpu/3200/14 2\nThe creator of that post was able to resolve the first part of the problem by installing cuquantum, so I tried the same thing with sudo pip3.11 install --no-cache-dir cuquantum, but after that installation, I still get the same error, and I would really appreciate some help.\nThe second part of my question has to do with an issue that I have encountered when trying to run my experiment without Lightning GPU. In this part, I get an error message that says CUDA out of memory. The code that produces this error is proprietary, so I unfortunately can\u2019t share it, but I am wondering if it is the sort of issue that could be resolved using Lightning GPU. I managed to solve the issue somewhat by downsizing my network architecture a bit, but I would rather not have to resort to that.", "link": "https://discuss.pennylane.ai//t/lightning-gpu-raises-importerror-nameerror/3452/5"}}