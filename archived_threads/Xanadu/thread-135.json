{"0": {"author": "ofir.arzi", "date": "1644944917585", "content": "I wanted to compute the expectation value of the projector |000><000|+|111><111| in Pennylane. So I wrote down the representing matrix and used the qml.Hermitian function which worked as expected, but when I tried to measure the projector |100><100|+|011><011|.\nI got an error message because the operator do not commute (which is weird, since the project on different spaces):\ndev = qml.device(\"default.mixed\", wires=3)\n\n@qml.qnode(dev) def circuit():\n    return qml.expval(P1(wires=[0,1,2])),qml.expval(P0(wires=[0,1,2]))\n\ndef P0(wires):\n    down = np.array([1, 0])\n    up = np.array([0, 1])\n    m1 = np.kron(down, np.kron(down, down))\n    m2 = np.kron(up, np.kron(up, up))\n    p0 = np.outer(m1 + m2, np.conj(m1 + m2))\n\n    return qml.Hermitian(p0, wires)\n\ndef P1(wires):\n    p0 = P0(wires)\n    X = np.array([[0, 1], [1, 0]])\n    I = np.array([[1, 0], [0, 1]])\n    X1 = np.kron(np.kron(X, I), I)\n    p1 = np.matmul(X1, np.matmul(p0, X1))\n\n    return qml.Hermitian(p1, wires=wires)\n\nHow can I fix this? And what is the proper way of measuring expectation values <\\hat{O}>=Tr(O\\rho) of a custom operator for a state \\rho? Writing the matrix by hand everytime seems a bit too complicated.", "link": "https://discuss.pennylane.ai//t/computing-custom-obsevables-in-pennylane/1671/1"}, "1": {"author": "josh", "date": "1644946489283", "content": "Hey @ofir.arzi!  One approach could be to directly use the qml.Projector 7 observable:\ndef H(wires):\n    P100 = qml.Projector(np.array([1, 0, 0]), wires=wires)\n    P011 = qml.Projector(np.array([0, 1, 1]), wires=wires)\n    return qml.Hamiltonian([1.0, 1.0], [P100, P011], simplify=False)\n\n@qml.qnode(dev)\ndef circuit():\n    return qml.expval(H(wires=[0, 1, 2]))\n\nNote that I disable Hamiltonian simplification, since it seems to not currently work with the projector observable yet (likely a bug!)2 Replies", "link": "https://discuss.pennylane.ai//t/computing-custom-obsevables-in-pennylane/1671/2"}, "2": {"author": "ofir.arzi", "date": "1645004790426", "content": "Thanks @josh! How come I can\u2019t return with simply qml.expval(P100+P011) or qml.expval(P100) + qml.expval(P011)?", "link": "https://discuss.pennylane.ai//t/computing-custom-obsevables-in-pennylane/1671/3"}, "3": {"author": "ofir.arzi", "date": "1645005293272", "content": "Furthermore, trying to return as follows fails:\ndef H1(wires):\n    P100 = qml.Projector(np.array([1, 0, 0]), wires=wires)\n    P011 = qml.Projector(np.array([0, 1, 1]), wires=wires)\n    return qml.Hamiltonian([1.0, 1.0], [P100, P011], simplify=False)\n\n\ndef H2(wires):\n    P100 = qml.Projector(np.array([0, 0, 1]), wires=wires)\n    P011 = qml.Projector(np.array([1, 1, 0]), wires=wires)\n    return qml.Hamiltonian([1.0, 1.0], [P100, P011], simplify=False)\n\n@qml.qnode(dev)\ndef circuit():\n    return qml.expval(H1(wires=[0, 1, 2])), qml.expval(H2(wires=[0, 1, 2]))\n\nThe error is pennylane.QuantumFunctionError: Only observables that are qubit-wise commuting Pauli words can be returned on the same wire. But as far as I understand the two observables are commuting!", "link": "https://discuss.pennylane.ai//t/computing-custom-obsevables-in-pennylane/1671/4"}, "4": {"author": "josh", "date": "1645019059070", "content": "@ofir.arzi after some investigation, the two cases above appear to be two separate bugs in PennyLane:\n\n\nThe first is that addition of Projectors doesn\u2019t seem to be natively supported\n\n\nThe second is that the current logic for computing commutation of Hamiltonians  assumes that the Hamiltonian is composed purely of Pauli words.\n\n\nThanks for catching these, this is very useful feedback that I will take back to the development team!1", "link": "https://discuss.pennylane.ai//t/computing-custom-obsevables-in-pennylane/1671/5"}, "5": {"author": "ofir.arzi", "date": "1644944917585", "content": "I wanted to compute the expectation value of the projector |000><000|+|111><111| in Pennylane. So I wrote down the representing matrix and used the qml.Hermitian function which worked as expected, but when I tried to measure the projector |100><100|+|011><011|.\nI got an error message because the operator do not commute (which is weird, since the project on different spaces):\ndev = qml.device(\"default.mixed\", wires=3)\n\n@qml.qnode(dev) def circuit():\n    return qml.expval(P1(wires=[0,1,2])),qml.expval(P0(wires=[0,1,2]))\n\ndef P0(wires):\n    down = np.array([1, 0])\n    up = np.array([0, 1])\n    m1 = np.kron(down, np.kron(down, down))\n    m2 = np.kron(up, np.kron(up, up))\n    p0 = np.outer(m1 + m2, np.conj(m1 + m2))\n\n    return qml.Hermitian(p0, wires)\n\ndef P1(wires):\n    p0 = P0(wires)\n    X = np.array([[0, 1], [1, 0]])\n    I = np.array([[1, 0], [0, 1]])\n    X1 = np.kron(np.kron(X, I), I)\n    p1 = np.matmul(X1, np.matmul(p0, X1))\n\n    return qml.Hermitian(p1, wires=wires)\n\nHow can I fix this? And what is the proper way of measuring expectation values <\\hat{O}>=Tr(O\\rho)<^O>=Tr(O\u03c1) of a custom operator for a state \\rho\u03c1? Writing the matrix by hand everytime seems a bit too complicated.", "link": "https://discuss.pennylane.ai//t/computing-custom-obsevables-in-pennylane/1671/6"}}