{"0": {"author": "kareem_essafty", "date": "1581400328846", "content": "hi,\nrecently i was trying to return the dev._state from the quantum node and I learnt that this can\u2019t be done. so, in the cost function for example I started to directly manipulate the state vector and i ignored the output from the qnode. this made autograde produce warnings that the output is not correlated with the circuit and I understood where i made the mistake. so my question here is: Is there any way that I can benefit from the dev._state value let\u2019s say for example to extract the quantum Hilbert space or even create a self-attention layer from the state vector itself just as a direct application?\nthanks for the new release \n\n\n Solved by josh in post #23 \n\n\n                Hi @kareem_essafty, the master version of PennyLane on GitHub has a new feature called the PassthruQNode. Using this QNode, with the default.tensor.tf device, should do what you want. For example, consider the following: \nimport tensorflow as tf\nimport pennylane as qml\nfrom pennylane.qnodes import P\u2026\n              \n", "link": "https://discuss.pennylane.ai//t/using-the-state-vector-directly/338/1"}, "1": {"author": "kareem_essafty", "date": "1581854281287", "content": "any help about this please?", "link": "https://discuss.pennylane.ai//t/using-the-state-vector-directly/338/2"}, "2": {"author": "josh", "date": "1581928167030", "content": "Hi @kareem_essafty! With PennyLane v0.8, you can call dev.state to get the statevector from the device. However, note that this will not be differentiable, unlike items returned from QNodes!", "link": "https://discuss.pennylane.ai//t/using-the-state-vector-directly/338/3"}, "3": {"author": "kareem_essafty", "date": "1582234941908", "content": "hi @josh, that\u2019s exactly my problem i need to differentiate the output with state vector is there any way i could hack this into pennylane? your help will actually save me a lot of time ", "link": "https://discuss.pennylane.ai//t/using-the-state-vector-directly/338/4"}, "4": {"author": "nathan", "date": "1582239521059", "content": "Hi @kareem_essafty,\nIf you want access to just one probability (or a small set of probabilities), you could just make an appropriate measurement of a Pauli operator, then readjust to convert these to a probability. Doing it that way would make it differentiable.", "link": "https://discuss.pennylane.ai//t/using-the-state-vector-directly/338/5"}, "5": {"author": "kareem_essafty", "date": "1582240815603", "content": "Hey,\nI am bit confused. Or may be I explained myself incorrectly. I just want the qnode to return the state vector and the differentiation happens as with any other observable. The reason for this is that I want to use the quantum state directly inside a classical neural network.", "link": "https://discuss.pennylane.ai//t/using-the-state-vector-directly/338/6"}, "6": {"author": "nathan", "date": "1582298262949", "content": "Hi @kareem_essafty,\nAs a short-term workaround, you might be able to get what you are looking for (a differentiable quantum state) by using the default.tensor.tf plugin (which runs a simulation in tensorflow) and examining dev._state. Note that it requires installing tensorflow and tensornetwork libraries separately to use this.\ntf_dev = qml.device('default.tensor.tf, wires=...)\n\n@qml.qnode(tf_dev)\ndef some_circuit():\n    ...\n\nsome_circuit(...) # you need to execute the circuit to update the state\n\nstate = tf_dev._state # this should be differentiable1", "link": "https://discuss.pennylane.ai//t/using-the-state-vector-directly/338/7"}, "7": {"author": "kareem_essafty", "date": "1582302952581", "content": "Is it like the ket vector in strawberryfields and tensorflow? If it\u2019s the same then that\u2019s super great.", "link": "https://discuss.pennylane.ai//t/using-the-state-vector-directly/338/8"}, "8": {"author": "josh", "date": "1582305590850", "content": "Yes, but in this case a qubit statevector/let 1", "link": "https://discuss.pennylane.ai//t/using-the-state-vector-directly/338/9"}, "9": {"author": "kareem_essafty", "date": "1582307171864", "content": "Thanks a lot for your responses ", "link": "https://discuss.pennylane.ai//t/using-the-state-vector-directly/338/10"}, "10": {"author": "kareem_essafty", "date": "1582380450388", "content": "@nathan\nUnfortunately it didn\u2019t give me what i hoped for. i always get there are no gradients for \u201cvariable 0\u201d or \u201cphi\u201d or when I use autograd it says the output doesn\u2019t seem to be related to the input.  that\u2019s because the Qnode must return a measurement ", "link": "https://discuss.pennylane.ai//t/using-the-state-vector-directly/338/11"}, "11": {"author": "nathan", "date": "1582383686121", "content": "That particular plugin uses tensorflow, so you\u2019ll need to try the tensorflow interface", "link": "https://discuss.pennylane.ai//t/using-the-state-vector-directly/338/12"}, "12": {"author": "kareem_essafty", "date": "1582385947838", "content": "I have done that sir @nathan", "link": "https://discuss.pennylane.ai//t/using-the-state-vector-directly/338/13"}, "13": {"author": "nathan", "date": "1582386686190", "content": "Hi @kareem_essafty,\nIn order to help further, it would be good to have a minimal (non-)working code example of what you\u2019re trying to do.", "link": "https://discuss.pennylane.ai//t/using-the-state-vector-directly/338/14"}, "14": {"author": "kareem_essafty", "date": "1582388139206", "content": "@nathan in this colab notebook 7 you will find a simple circuit that i\u2019m trying to optimize its Ry parameter so that the final state would be entangled. I know that I can use a hermitian measurement to achieve the same result but i need the state vector in a similar context.\nsorry about not including a working code.", "link": "https://discuss.pennylane.ai//t/using-the-state-vector-directly/338/15"}, "15": {"author": "kareem_essafty", "date": "1582551631483", "content": "any updates sir? @nathan", "link": "https://discuss.pennylane.ai//t/using-the-state-vector-directly/338/16"}, "16": {"author": "nathan", "date": "1582665490188", "content": "Hi @kareem_essafty,\nI had a chance to look into this today. Thanks for providing the example.\nIt looks like you can\u2019t directly get a differentiable quantum state using the method I described above (my hope that it would automatically work, unfortunately, was too optimistic). There\u2019s no fundamental reason PennyLane couldn\u2019t support this, but we\u2019d have to upgrade the code to explicitly make it work.\n@josh can maybe comment more, but I think the reason is we need to register custom gradients with TensorFlow in order for things to be differentiable. We\u2019ve registered custom gradients for measurements like expval, but it looks like we\u2019ll have to manually register them for dev.state as well.\nNathan1", "link": "https://discuss.pennylane.ai//t/using-the-state-vector-directly/338/17"}, "17": {"author": "kareem_essafty", "date": "1582666326625", "content": "Hi\nThank you so much for your response. Just point out where to start and I believe I will manage. I don\u2019t want to annoy any member of the team or delay them. Just your guidelines and I will start working. @nathan @josh", "link": "https://discuss.pennylane.ai//t/using-the-state-vector-directly/338/18"}, "18": {"author": "nathan", "date": "1582669487561", "content": "I recommend you check out the existing interfaces located here: pennylane/pennylane/interfaces at master \u00b7 PennyLaneAI/pennylane \u00b7 GitHub 8\nSee if you can first hack together even a semi-working jax version. If you manage to get that working, we can support you in moving it from a hack to a full-fledged feature 2 Replies", "link": "https://discuss.pennylane.ai//t/using-the-state-vector-directly/338/19"}, "19": {"author": "kareem_essafty", "date": "1582670340632", "content": "Will it make the state vector differentiable?\nOr you\u2019re speaking about the jax thread thing? ", "link": "https://discuss.pennylane.ai//t/using-the-state-vector-directly/338/20"}, "20": {"author": "kareem_essafty", "date": "1582670501663", "content": "I am talking about the state vector if it could be differentiable and how can I do it? @nathan", "link": "https://discuss.pennylane.ai//t/using-the-state-vector-directly/338/21"}, "21": {"author": "nathan", "date": "1582671317713", "content": "Sorry, replied to the wrong subject. If you want to try hacking in a differentiable state vector, you\u2019ll have to inspect the code of https://github.com/XanaduAI/pennylane/blob/master/pennylane/beta/plugins/default_tensor_tf.py 8\nUnfortunately, I can\u2019t really provide you much more specific guidance beyond what I\u2019ve already written above (about having to register custom gradients of the _state function with Tensorflow)", "link": "https://discuss.pennylane.ai//t/using-the-state-vector-directly/338/22"}, "22": {"author": "josh", "date": "1582721994557", "content": "Hi @kareem_essafty, the master version of PennyLane on GitHub has a new feature called the PassthruQNode. Using this QNode, with the default.tensor.tf device, should do what you want. For example, consider the following:\nimport tensorflow as tf\nimport pennylane as qml\nfrom pennylane.qnodes import PassthruQNode\n\ndev = qml.device('default.tensor.tf', wires=2)\n\n\ndef circuit(params):\n    qml.RX(params[0], wires=0)\n    qml.RX(params[1], wires=1)\n    qml.CNOT(wires=[0, 1])\n    return qml.expval(qml.PauliZ(0))\n\nqnode = PassthruQNode(circuit, dev)\nparams = tf.Variable([0.3, 0.1])\n\n\nwith tf.GradientTape() as tape:\n    tape.watch(params)\n    qnode(params)\n    state = dev._state\n\ngrad = tape.gradient(state, params)\n\nprint(\"State:\", state)\nprint(\"Gradient:\", grad)\n\nThis gives the output:\nState: tf.Tensor(\n[[ 0.98753537+0.j          0.        -0.04941796j]\n [-0.00746879+0.j          0.        -0.14925138j]], shape=(2, 2), dtype=complex128)\nGradient: tf.Tensor([-0.09933467 -0.09933467], shape=(2,), dtype=float32)\n1 ReplySolution2", "link": "https://discuss.pennylane.ai//t/using-the-state-vector-directly/338/23"}, "23": {"author": "nathan", "date": "1582731050070", "content": "Thanks @josh! The part about explicitly declaring it to be a PassThruQNode was the missing piece of my earlier suggestion", "link": "https://discuss.pennylane.ai//t/using-the-state-vector-directly/338/24"}, "24": {"author": "kareem_essafty", "date": "1583838954063", "content": "You saved me. Thank you very much\nI had to use qiskit directly and compute everything from the scratch", "link": "https://discuss.pennylane.ai//t/using-the-state-vector-directly/338/25"}, "25": {"author": "nathan", "date": "1583847392853", "content": "Hi @kareem_essafty,\nGlad we could help. Just for clarity, do you mean that you had previously been using qiskit directly and computing everything by hand, but now you can automate that process using the suggestions above?", "link": "https://discuss.pennylane.ai//t/using-the-state-vector-directly/338/26"}, "26": {"author": "kareem_essafty", "date": "1583850800358", "content": "Hi,\nYeah I used qiskit within keras layers and also specified the gradient functions just to use the state vector and differentiate it with respect to the loss", "link": "https://discuss.pennylane.ai//t/using-the-state-vector-directly/338/27"}, "27": {"author": "Pavan", "date": "1625012248683", "content": "@josh Tried importing from pennylane.qnodes import PassthruQNode but it now says there is not module named qnodes under pennylane. Has this feature been removed or moved elsewhere? Let me know. Thank you!", "link": "https://discuss.pennylane.ai//t/using-the-state-vector-directly/338/28"}, "28": {"author": "josh", "date": "1625023259312", "content": "Hi @Pavan, since this reply was made, the PassthruQNode was integrated properly into PennyLane  In the latest version of PennyLane, the following should work:\nimport tensorflow as tf\nimport pennylane as qml\n\ndev = qml.device('default.qubit', wires=2)\n\n@qml.qnode(dev, diff_method=\"backprop\")\ndef circuit(params):\n    qml.RX(params[0], wires=0)\n    qml.RX(params[1], wires=1)\n    qml.CNOT(wires=[0, 1])\n    return qml.state()\n\nparams = tf.Variable([0.3, 0.1])\n\nwith tf.GradientTape() as tape:\n    state = circuit(params)\n\ngrad = tape.gradient(state, params)\n\nprint(\"State:\", state)\nprint(\"Gradient:\", grad)\n\nNote that:\n\n\nWe specify diff_method=\"backprop\", which indicates that the quantum gradient is computed using backprop.\n\n\nWe use qml.state() to directly return the state from the QNode.\n\n2 Replies1", "link": "https://discuss.pennylane.ai//t/using-the-state-vector-directly/338/29"}, "29": {"author": "Dobby", "date": "1627692865539", "content": "Hi @josh,\nI am curious how to get states from qiskit real hardware. Now I could get the state from the QNode and qiskit \u2018statevector_simulator\u2019 using dev._state. But when I try to access the states of \u2018qasm_simulator\u2019 or IBM Q hardware, this does not work.\nAre there any suggestions on this issue?\nThank you!", "link": "https://discuss.pennylane.ai//t/using-the-state-vector-directly/338/30"}, "30": {"author": "Kuma-quant", "date": "1627744626970", "content": "Probably, no one can get state vector from real QPUs.\n\nState vecotr is not observable.\nMeasurement itself can change the state vector.\n\nEven if we can measure an element of state vector of n-qubits, it requires at least 2^{n} times measurement and quantum speed up would be vanished. This is crusial point in case of HHL algorithm.", "link": "https://discuss.pennylane.ai//t/using-the-state-vector-directly/338/31"}, "31": {"author": "Dobby", "date": "1627750912915", "content": "Thank you @Kuma-quant! I agree with this point. Actually, I am working on VQLS and therefore need the state vector. I was thinking about whether I should follow what HHL has done. And it seems, the answer is yes ", "link": "https://discuss.pennylane.ai//t/using-the-state-vector-directly/338/32"}, "32": {"author": "Kuma-quant", "date": "1627826033399", "content": "@Dobby\nYes.\nVQLS and HHL embed the solution, x  = A^-1*b, into a state vector.\nThe x can\u2019t be measured directly.\nTherefore, the aim of the algorihms is that, calculating and extracting \u201cpartial\u201d information of x.\nFor example, suppose H is an observable, <x|H|x> can be extracted by measurement. All we have to do is just add the measurement process of H at the end of  HHL / VQLS.\nSince the information we can acsess is limited,\nHHL/VQLS is would not what you expected\u2026\nThey are tricky.\nBut some applications have been proposed.", "link": "https://discuss.pennylane.ai//t/using-the-state-vector-directly/338/33"}, "33": {"author": "Felix_Zhao", "date": "1688453954416", "content": "Hi Josh, can I do this in the \u2018default.gaussian\u2019 backend? I want to output the covariance matrix in a differentiable way. I just tried it and an error says \u201cQuantumFunctionError: Returning the state is not supported\u201d", "link": "https://discuss.pennylane.ai//t/using-the-state-vector-directly/338/34"}, "34": {"author": "isaacdevlugt", "date": "1688495322009", "content": "Hey @Felix_Zhao! Welcome to the forum \nThis isn\u2019t a supported measurement for the default.gaussian device. It sounds like you should take a look at some of our other photonic software package offerings:\n\nMrMustard: Mr Mustard Documentation \u2014 Mr Mustard 0.4.1 documentation\nTheWalrus: The Walrus Documentation \u2014 The Walrus 0.21.0-dev documentation\nStrawberryfields: https://strawberryfields.ai/\n\nIf you have further questions, I think it might be best to start a new forum post 1", "link": "https://discuss.pennylane.ai//t/using-the-state-vector-directly/338/35"}}