{"0": {"author": "rdisipio", "date": "1614629192287", "content": "Hi,\nwhile working on a project, I realized it would be nice if there was a small library of basic arithmetic functions. Specifically, since continuous functions can be approximated by a power series, the following minimal toolkit would allow users to implement whatever they want:\n\nWeighted sum (|ax> + |by>)\nMultiplication (|x*y>)\nPower (i.e. |x^k>)\nDiscrete Fourier Transform ( DFT(|x>) )\nThere are some examples in the literature (see e.g. quant-ph/0407079) and the weighted sum is also implemented in Qiskit (https://qiskit.org/documentation/stubs/qiskit.circuit.library.WeightedAdder.html 3).\n\nWith these one could calculate e.g.\nexp(x) = 1 + x + 1/2! x^2 + 1/3! x^3\nCheers,\nRiccardo", "link": "https://discuss.pennylane.ai//t/arithmetic-functions/889/1"}, "1": {"author": "Tom_Bromley", "date": "1614633795920", "content": "Thanks @rdisipio!\nThis is great feedback and I agree that it would be something very nice to add.\nI\u2019m not sure how soon we\u2019d be able to get to looking at such a feature, but in the meantime we actively welcome contributions!\nCheers,\nTom", "link": "https://discuss.pennylane.ai//t/arithmetic-functions/889/2"}, "2": {"author": "Chase_Roberts", "date": "1614634620183", "content": "And as always, pull requests are very welcome. \nChase", "link": "https://discuss.pennylane.ai//t/arithmetic-functions/889/3"}, "3": {"author": "rdisipio", "date": "1614695103167", "content": "Yeah, I\u2019ll see what I can do but no committments. Since we\u2019re here, I actually started looking at the QFT. I couldn\u2019t find an implementation anywhere in the code base. Is called something else? Also, when I print out the circtuit, I get this:\n 1: \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256dC\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256dC\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2502\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500H\u2500\u2500\u2502\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2570Rot(1.57, 0, 0)\u2500\u2500\u2500\u2500\u2500\u2502\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u27e8Z\u27e9 \n 2: \u2500\u2500\u2500\u2500\u2500\u256dC\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500H\u2500\u2500\u2502\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2570Rot(1.57, 0, 0)\u2500\u2500\u2502\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2570Rot(0.785, 0, 0)\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2502\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u27e8Z\u27e9 \n 3: \u2500\u2500H\u2500\u2500\u2570Rot(1.57, 0, 0)\u2500\u2500\u2500\u2500\u2500\u2570Rot(0.785, 0, 0)\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2570Rot(0.393, 0, 0)\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2570SWAP\u2500\u2500\u2524 \u27e8Z\u27e9 \n\nThe second H gate is supposed to be applied after the sequence of controlled rotations. Is there any \u201cbarrier\u201d command in PennyLane? Or is it just an issue with the printing routine?\nFYI, one can get some inspiration from this library based on Qiskit: https://github.com/hkhetawat/QArithmetic 1\nCheers,\nRiccardo1", "link": "https://discuss.pennylane.ai//t/arithmetic-functions/889/4"}, "4": {"author": "Tom_Bromley", "date": "1614695378701", "content": "Thanks @rdisipio!\nThe QFT 6 is available in the development branch of PennyLane. To access this, you can install using these 2 instructions.1", "link": "https://discuss.pennylane.ai//t/arithmetic-functions/889/5"}, "5": {"author": "rdisipio", "date": "1614867817520", "content": "Hello again,\nTo get my feet wet, I tried to implement the Draper Adder but I\u2019m quite confused. The algorithm is implemented in a number of languages but this is probably the easiest to read: https://github.com/hkhetawat/QArithmetic/blob/master/QArithmetic.py 5\nI see that QFT in PennyLane derives from Operation base class, but for now I wanted to keep things easy, so I implemented it as a simple sequence of gates.\n#!/usr/bin/env python\n\nimport numpy as np\nimport pennylane as qml\n\ndef add(wires_a, wires_b):\n    assert len(wires_b) > len(wires_a)\n    n = len(wires_a)\n    # encode number a into the phase basis\n    qml.QFT(wires=wires_b)\n    for i in range(n, 0, -1):\n        # loop over control qubits (a)\n        for j in range(i, 0, -1):\n            if n - 1 >= j - 1:\n                phi = 2 * np.pi / np.power(2, i-j+1)\n                qml.ControlledPhaseShift(phi, wires=[wires_a[j-1], wires_b[i-1]])\n    # go back to computational basis\n    qml.QFT(wires=wires_b).inv()\n\ndef test_add(bs):\n   print(bs)\n   qml.BasisState(bs, wires=wires)\n   add(wires_a, wires_b)\n   return [qml.expval(qml.PauliZ(i)) for i in wires_b]\n\nn_qubits_per_number = 3\nwires_a = [f'a{i}' for i in range(n_qubits_per_number)]\nwires_b = [f'b{i}' for i in range(n_qubits_per_number+1)]\nwires = wires_a + wires_b\n\ndev = qml.device('default.qubit', wires=wires, shots=1000, analytic=False)\ncirc = qml.QNode(test_add, dev)\n\npad = [0]\na = [0, 1, 0]\nb =  pad + [0, 0, 1]\nbs = a + b\nz = circ(bs)\nprint(circ.draw())\nprint(z)\n\nI don\u2019t know if the output is correct. I get z = [ 0.678  1.    -1.    -1.   ] which may be a base-2 encoding of 3 (it\u2019s either 1100 or 0011 depending on how you interpret the pauli-z states). If I print out the circuit after execution, I see this:\n a0: \u2500\u2500\u256d|0\u27e9\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256dControlledPhaseShift(0.785)\u2500\u2500\u256dControlledPhaseShift(1.57)\u2500\u2500\u256dControlledPhaseShift(3.14)\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524     \n a1: \u2500\u2500\u251c|1\u27e9\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256dControlledPhaseShift(1.57)\u2500\u2500\u256dControlledPhaseShift(3.14)\u2500\u2500\u2502\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2502\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2502\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524     \n a2: \u2500\u2500\u251c|0\u27e9\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256dControlledPhaseShift(3.14)\u2500\u2500\u2502\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2502\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2502\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2502\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2502\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524     \n b0: \u2500\u2500\u251c|0\u27e9\u2500\u2500\u256dQFT\u2500\u2500\u2502\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2502\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2502\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2502\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2502\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2570ControlledPhaseShift(3.14)\u2500\u2500\u256dQFT\u207b\u00b9\u2500\u2500\u2524 \u27e8Z\u27e9 \n b1: \u2500\u2500\u251c|0\u27e9\u2500\u2500\u251cQFT\u2500\u2500\u2502\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2502\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2570ControlledPhaseShift(3.14)\u2500\u2500\u2502\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2570ControlledPhaseShift(1.57)\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u251cQFT\u207b\u00b9\u2500\u2500\u2524 \u27e8Z\u27e9 \n b2: \u2500\u2500\u251c|0\u27e9\u2500\u2500\u251cQFT\u2500\u2500\u2570ControlledPhaseShift(3.14)\u2500\u2500\u2570ControlledPhaseShift(1.57)\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2570ControlledPhaseShift(0.785)\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u251cQFT\u207b\u00b9\u2500\u2500\u2524 \u27e8Z\u27e9 \n b3: \u2500\u2500\u2570|1\u27e9\u2500\u2500\u2570QFT\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2570QFT\u207b\u00b9\u2500\u2500\u2524 \u27e8Z\u27e9 \n\nI don\u2019t think the gates are executed in the same order they are defined in the nested loops, e.g. controlled gates acting on b3 should be executed before moving to b2. What am I doing wrong?\nThanks,\nRiccardo", "link": "https://discuss.pennylane.ai//t/arithmetic-functions/889/6"}, "6": {"author": "Tom_Bromley", "date": "1614872041025", "content": "Hi @rdisipio,\nThis looks really cool! Thanks for checking it out.\nI need a bit more time to get familiar with the circuit, but from an initial look at the printed-out circuit, it seems weird that no phase shift gates are being applied to b3. Has your code taken into account that the b register has n + 1 qubits? Maybe you just need to add-in that offset.\nI will have a closer look though, this looks really cool! In the long run, it might be nice to add this as a PennyLane template 1.\nThanks!", "link": "https://discuss.pennylane.ai//t/arithmetic-functions/889/7"}, "7": {"author": "rdisipio", "date": "1614629192287", "content": "Hi,\nwhile working on a project, I realized it would be nice if there was a small library of basic arithmetic functions. Specifically, since continuous functions can be approximated by a power series, the following minimal toolkit would allow users to implement whatever they want:\n\nWeighted sum (|ax> + |by>)\nMultiplication (|x*y>)\nPower (i.e. |x^k>)\nDiscrete Fourier Transform ( DFT(|x>) )\nThere are some examples in the literature (see e.g. quant-ph/0407079) and the weighted sum is also implemented in Qiskit (https://qiskit.org/documentation/stubs/qiskit.circuit.library.WeightedAdder.html 3).\n\nWith these one could calculate e.g.\nexp(x) = 1 + x + 1/2! x^2 + 1/3! x^3\nCheers,\nRiccardo", "link": "https://discuss.pennylane.ai//t/arithmetic-functions/889/8"}}