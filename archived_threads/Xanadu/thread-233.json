{"0": {"author": "Edgard_Pierre", "date": "1615998415924", "content": "Hi all,\nI am currently working on graph isomorphism.\nIf I understood well this paper:\n\u201cGraph isomorphism and gaussian boson sampling. arXiv preprint arXiv:1810.10644, 2018\u201d\ntwo isomorphic graphs always have the same feature vector (minus a small difference because of sampling, at least the exact calculation should return the same values).\nI decided to feature vectors for all the 4-node non-isomorphic graphs (which correspond to 11 graphs).\nI defined them by their adjacency matrix and used the\nsf.apps.similarity.feature_vector_events\nfunction. I was expecting the feature vectors to be all different (since I perform the exact calculation) but I actually noticed that C_{4} and S_{3} have the same feature vectors! They are also identical for two other graphs: the one-edge graph and the two-connected-edges graph (see picture at the bottom of this post).\nHere is a code to reproduce the feature vectors:\nimport numpy as np\nimport networkx as nx\nfrom strawberryfields.apps import similarity\n\n# list of non isomorphic 4 nodes graphs\n# one edge\noe_a = np.array([[0.0, 1.0, 0.0, 0.0],\n                 [1.0, 0.0, 0.0, 0.0],\n                 [0.0, 0.0, 0.0, 0.0],\n                 [0.0, 0.0, 0.0, 0.0]])\n# two edges connected\ntec_a = np.array([[0.0, 1.0, 1.0, 0.0],\n                  [1.0, 0.0, 0.0, 0.0],\n                  [1.0, 0.0, 0.0, 0.0],\n                  [0.0, 0.0, 0.0, 0.0]])\n# S3\nsta_a = np.array([[0.0, 1.0, 1.0, 1.0],\n                  [1.0, 0.0, 0.0, 0.0],\n                  [1.0, 0.0, 0.0, 0.0],\n                  [1.0, 0.0, 0.0, 0.0]])\n# C4\nsq_a = np.array([[0.0, 1.0, 0.0, 1.0],\n                 [1.0, 0.0, 1.0, 0.0],\n                 [0.0, 1.0, 0.0, 1.0],\n                 [1.0, 0.0, 1.0, 0.0]])\n\norbit = [2, 4]\n\nprint(\"Feature vectors for 4 nodes graphs, from adjacency matrices (exact calculation)\")\nprint(\"One edge \", similarity.feature_vector_events(nx.Graph(oe_a), orbit))\nprint(\"Two edges connected \", similarity.feature_vector_events(nx.Graph(tec_a), orbit))\nprint(\"S3 \", similarity.feature_vector_events(nx.Graph(sta_a), orbit))\nprint(\"C4 \", similarity.feature_vector_events(nx.Graph(sq_a), orbit))\n\nAs you can see, all of the above return\n[0.20408163265306095, 0.14577259475218624]\nwhich are identical.\nIs it a bug or something I didn\u2019t get in the theory?\nThanks in advance.\nEdgard\n\n4_graphs1400\u00d71400 13.9 KB\n", "link": "https://discuss.pennylane.ai//t/two-non-isomorphic-graphs-have-the-same-feature-vector/930/1"}, "1": {"author": "Tom_Bromley", "date": "1616005684953", "content": "Hi @Edgard_Pierre and welcome to the forum!\nIf two graphs are isomorphic then they will have the same feature vector. However, this is not a necessary and sufficient condition, i.e., two non-isomorphic graphs can have the same feature vector.\nNote that these feature vectors are constructed based upon event or orbit probabilities, which are a post-processing of sample probabilities. If you were to add additional events or orbits, you may be able to resolve the feature vectors of the two non-isomorphic graphs.\nFor example, consider changing event_photon_numbers in  feature_vector_events.1", "link": "https://discuss.pennylane.ai//t/two-non-isomorphic-graphs-have-the-same-feature-vector/930/2"}, "2": {"author": "Edgard_Pierre", "date": "1616012895951", "content": "Hi @Tom_Bromley .\nThanks a lot!  \nI have been using Strawberry Fields and Pennylane for a year now, never too late to join the forum!\nI see, so this is not a sufficient condition. So is there a way to make graph isomorphism detector with feature vectors then?\nI actually tried to tune parameters, but there is not that many degrees of freedom for such small graphs. I actually tried all the possible events by changing the event_photon_numbers parameter, but every time the feature vector is identical for the four graphs in my toy-model example posted above.\nFor example, here is the output of the code above, changing the \u201corbit\u201d parameter with [0, 1, 2, 3, 4]:\nFeature vectors for 4 nodes graphs, from adjacency matrices (exact calculation)\nOne edge  [0.28571428571428564, 0.0, 0.204081632653061, 0.0, 0.14577259475218632]\nTwo edges connected  [0.2857142857142855, 0.0, 0.20408163265306115, 0.0, 0.14577259475218662]\nS3  [0.28571428571428575, 0.0, 0.20408163265306073, 0.0, 0.14577259475218585]\nC4  [0.28571428571428564, 0.0, 0.20408163265306095, 0.0, 0.14577259475218624]\n\nThanks.\nEdgard", "link": "https://discuss.pennylane.ai//t/two-non-isomorphic-graphs-have-the-same-feature-vector/930/3"}, "3": {"author": "Tom_Bromley", "date": "1616073784392", "content": "Hey @Edgard_Pierre!\nSome of the Xanadu team have worked on investigating GBS for graph isomorphism, check out this paper. In this case, you can consider the sample probabilities. There is an infinite number of sample probabilities (since you can get any number of photons in each mode), and capturing the full set helps determine isomorphism.\nThe reason that we coarse-grain sample probabilities into event and orbit probabilities is that individual sample probabilities can be hard to accurately resolve on real hardware. Hence, although the coarse-grained feature vectors may lose some information, they hopefully still contain useful information and their composition can be tweaked (e.g., changing the orbits or events) to help resolve similar graphs.", "link": "https://discuss.pennylane.ai//t/two-non-isomorphic-graphs-have-the-same-feature-vector/930/4"}, "4": {"author": "Edgard_Pierre", "date": "1615998415924", "content": "Hi all,\nI am currently working on graph isomorphism.\nIf I understood well this paper:\n\u201cGraph isomorphism and gaussian boson sampling. arXiv preprint arXiv:1810.10644, 2018\u201d\ntwo isomorphic graphs always have the same feature vector (minus a small difference because of sampling, at least the exact calculation should return the same values).\nI decided to feature vectors for all the 4-node non-isomorphic graphs (which correspond to 11 graphs).\nI defined them by their adjacency matrix and used the\nsf.apps.similarity.feature_vector_events\nfunction. I was expecting the feature vectors to be all different (since I perform the exact calculation) but I actually noticed that C_{4}C4 and S_{3}S3 have the same feature vectors! They are also identical for two other graphs: the one-edge graph and the two-connected-edges graph (see picture at the bottom of this post).\nHere is a code to reproduce the feature vectors:\nimport numpy as np\nimport networkx as nx\nfrom strawberryfields.apps import similarity\n\n# list of non isomorphic 4 nodes graphs\n# one edge\noe_a = np.array([[0.0, 1.0, 0.0, 0.0],\n                 [1.0, 0.0, 0.0, 0.0],\n                 [0.0, 0.0, 0.0, 0.0],\n                 [0.0, 0.0, 0.0, 0.0]])\n# two edges connected\ntec_a = np.array([[0.0, 1.0, 1.0, 0.0],\n                  [1.0, 0.0, 0.0, 0.0],\n                  [1.0, 0.0, 0.0, 0.0],\n                  [0.0, 0.0, 0.0, 0.0]])\n# S3\nsta_a = np.array([[0.0, 1.0, 1.0, 1.0],\n                  [1.0, 0.0, 0.0, 0.0],\n                  [1.0, 0.0, 0.0, 0.0],\n                  [1.0, 0.0, 0.0, 0.0]])\n# C4\nsq_a = np.array([[0.0, 1.0, 0.0, 1.0],\n                 [1.0, 0.0, 1.0, 0.0],\n                 [0.0, 1.0, 0.0, 1.0],\n                 [1.0, 0.0, 1.0, 0.0]])\n\norbit = [2, 4]\n\nprint(\"Feature vectors for 4 nodes graphs, from adjacency matrices (exact calculation)\")\nprint(\"One edge \", similarity.feature_vector_events(nx.Graph(oe_a), orbit))\nprint(\"Two edges connected \", similarity.feature_vector_events(nx.Graph(tec_a), orbit))\nprint(\"S3 \", similarity.feature_vector_events(nx.Graph(sta_a), orbit))\nprint(\"C4 \", similarity.feature_vector_events(nx.Graph(sq_a), orbit))\n\nAs you can see, all of the above return\n[0.20408163265306095, 0.14577259475218624]\nwhich are identical.\nIs it a bug or something I didn\u2019t get in the theory?\nThanks in advance.\nEdgard\n\n4_graphs1400\u00d71400 13.9 KB\n", "link": "https://discuss.pennylane.ai//t/two-non-isomorphic-graphs-have-the-same-feature-vector/930/5"}}