{"0": {"author": "imakash", "date": "1685465070752", "content": "I am running the following code:\nimport pennylane as qml\nfrom timeit import default_timer as timer\n\n# To set the number of threads used when executing this script,\n# export the OMP_NUM_THREADS environment variable.ls\n\n# Choose number of qubits (wires) and circuit layers\nwires = 15\nlayers = 3\n\n# Set number of runs for timing averaging\nnum_runs = 5\n\n# Instantiate CPU (lightning.qubit) or GPU (lightning.gpu) device\ndev = qml.device('lightning.qubit', wires=wires)\n\n\n# Create QNode of device and circuit\n@qml.qnode(dev, diff_method=\"adjoint\")\ndef circuit(parameters):\n    qml.StronglyEntanglingLayers(weights=parameters, wires=range(wires))\n    return [qml.expval(qml.PauliZ(i)) for i in range(wires)]\n\n# Set trainable parameters for calculating circuit Jacobian\nshape = qml.StronglyEntanglingLayers.shape(n_layers=layers, n_wires=wires)\nweights = qml.numpy.random.random(size=shape)\n\n# Run, calculate the quantum circuit Jacobian, and average the timing results\ntiming = []\nfor t in range(num_runs):\n    start = timer()\n    jac = qml.jacobian(circuit)(weights)\n    end = timer()\n    timing.append(end - start)\n\nprint(\"Result: \", qml.numpy.mean(timing))\n\n\nWhen the device is \u201clightning.qubit\u201d, I get the following warning message\n/home/sinha/miniconda3/envs/qns/lib/python3.8/site-packages/pennylane_lightning/lightning_qubit.py:893: UserWarning: Pre-compiled binaries for lightning.qubit are not available. Falling back to using the Python-based default.qubit implementation. To manually compile f\nrom source, follow the instructions at https://pennylane-lightning.readthedocs.io/en/latest/installation.html.\n\nAnd when the device is \u201clightning.gpu\u201d, I get the following error message.\nTraceback (most recent call last):\n  File \"/home/sinha/miniconda3/envs/qns/lib/python3.8/site-packages/pennylane_lightning_gpu/lightning_gpu.py\", line 54, in <module>\n    from .lightning_gpu_qubit_ops import (\nImportError: libcudart.so.11.0: cannot open shared object file: No such file or directory\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"trial_lightninig_gpu.py\", line 15, in <module>\n    dev = qml.device('lightning.gpu', wires=wires)\n  File \"/home/sinha/miniconda3/envs/qns/lib/python3.8/site-packages/pennylane/__init__.py\", line 316, in device\n    plugin_device_class = plugin_devices[name].load()\n  File \"/home/sinha/miniconda3/envs/qns/lib/python3.8/site-packages/pkg_resources/__init__.py\", line 2471, in load\n    return self.resolve()\n  File \"/home/sinha/miniconda3/envs/qns/lib/python3.8/site-packages/pkg_resources/__init__.py\", line 2477, in resolve\n    module = __import__(self.module_name, fromlist=['__name__'], level=0)\n  File \"/home/sinha/miniconda3/envs/qns/lib/python3.8/site-packages/pennylane_lightning_gpu/__init__.py\", line 17, in <module>\n    from .lightning_gpu import LightningGPU\n  File \"/home/sinha/miniconda3/envs/qns/lib/python3.8/site-packages/pennylane_lightning_gpu/lightning_gpu.py\", line 92, in <module>\n    except (ModuleNotFoundError, ImportError, ValueError, PLException) as e:\nNameError: name 'PLException' is not defined\n\nOutput of qml.about().\n>>> qml.about()\nName: PennyLane\nVersion: 0.28.0\nSummary: PennyLane is a Python quantum machine learning library by Xanadu Inc.\nHome-page: https://github.com/XanaduAI/pennylane\nAuthor:\nAuthor-email:\nLicense: Apache License 2.0\nLocation: /home/sinha/miniconda3/envs/qns/lib/python3.8/site-packages\nRequires: appdirs, autograd, autoray, cachetools, networkx, numpy, pennylane-lightning, requests, retworkx, scipy, semantic-version, toml\nRequired-by: PennyLane-Lightning, PennyLane-Lightning-GPU\n\nPlatform info:           Linux-5.4.0-147-generic-x86_64-with-glibc2.17\nPython version:          3.8.16\nNumpy version:           1.22.3\nScipy version:           1.7.3\nInstalled devices:\n- lightning.gpu (PennyLane-Lightning-GPU-0.30.0)\n- lightning.qubit (PennyLane-Lightning-0.28.1)\n- default.gaussian (PennyLane-0.28.0)\n- default.mixed (PennyLane-0.28.0)\n- default.qubit (PennyLane-0.28.0)\n- default.qubit.autograd (PennyLane-0.28.0)\n- default.qubit.jax (PennyLane-0.28.0)\n- default.qubit.tf (PennyLane-0.28.0)\n- default.qubit.torch (PennyLane-0.28.0)\n- default.qutrit (PennyLane-0.28.0)\n- null.qubit (PennyLane-0.28.0)\n\n\nI am not sure, where exactly is the problem.1 Reply", "link": "https://discuss.pennylane.ai//t/issues-with-pennylane-lightning-installation/2989/1"}, "1": {"author": "isaacdevlugt", "date": "1685477146788", "content": "Hey @imakash! It might be worth updating to the most-recent versions of everything \u2014 some of your package versions are out-of-sync (you\u2019re pretty up-to-speed with lightning-gpu but not pl-lightning or pennylane)\n\n\n\n imakash:\n\nWhen the device is \u201clightning.qubit\u201d, I get the following warning message\n\n\nYou can try building pl-lightning from source via pip install pybind11 pennylane-lightning --no-binary :all:.\n\n\n\n imakash:\n\nAnd when the device is \u201clightning.gpu\u201d, I get the following error message.\n\n\nThis forum post might be helpful!\n\n\n\n\nPennylane-Lightning GPU PennyLane Lightning\n\n\n    Hi @George_LA  and @mlxd and @isaacdevlugt, \nEven I tried the solution given by @mlxd, however, I was not able to run the script. \nSo, instead, I did this: \nimport torch\ndevice = torch.device(\"cuda:0\" if (torch.cuda.is_available()) else \"cpu\")\n\nI created the quantum circuit under a class. Then, I sent it to the GPU. It was able to utilize it. \nclass QCNN(nn.Module):\n\n    def CONVCircuit(phi, wires, i=0):\n\n    \"\"\"\n    quantum convolution Node\n    \"\"\"\n    # parameter\n         theta = np.pi / 2\n\n  \u2026\n  \n\n", "link": "https://discuss.pennylane.ai//t/issues-with-pennylane-lightning-installation/2989/2"}, "2": {"author": "imakash", "date": "1685486065874", "content": "Hello @isaacdevlugt ,\nThanks for your response. Actually this is just a dummy code to test pennylane lightning. I am actually training a Hybrid quantum Classical neural network. If I cannot make this work, can I use \u2018pytorch\u2019 interface with 'defaul.qubit\" device to train on GPU a hybrid quantum-classical neural network?\nIf I can use \u2018default.qubit\u2019 for running the code on GPU, then what benefit does pennylane-lightning offer?", "link": "https://discuss.pennylane.ai//t/issues-with-pennylane-lightning-installation/2989/3"}, "3": {"author": "isaacdevlugt", "date": "1685541647501", "content": "\ncan I use \u2018pytorch\u2019 interface with 'defaul.qubit\" device to train on GPU a hybrid quantum-classical neural network\n\nYeah that will work! For relatively small problems (<<20 qubits) this is a better option that using pl-lightning-gpu.\n\nIf I can use \u2018default.qubit\u2019 for running the code on GPU, then what benefit does pennylane-lightning offer?\n\nIt\u2019s much much faster for large simulations (>20 qubits). But, pennylane-lightning-gpu\u2019s claim to fame is that it combines NVIDIA\u2019s cuQuantum SDK library with what Pennylane offers in the way of automatic differentiation, optimization, and direct support for GPU-enabled quantum gradients with adjoint differentiation. All of those points culminate in higher performance for larger circuits.1", "link": "https://discuss.pennylane.ai//t/issues-with-pennylane-lightning-installation/2989/4"}, "4": {"author": "imakash", "date": "1685465070752", "content": "I am running the following code:\nimport pennylane as qml\nfrom timeit import default_timer as timer\n\n# To set the number of threads used when executing this script,\n# export the OMP_NUM_THREADS environment variable.ls\n\n# Choose number of qubits (wires) and circuit layers\nwires = 15\nlayers = 3\n\n# Set number of runs for timing averaging\nnum_runs = 5\n\n# Instantiate CPU (lightning.qubit) or GPU (lightning.gpu) device\ndev = qml.device('lightning.qubit', wires=wires)\n\n\n# Create QNode of device and circuit\n@qml.qnode(dev, diff_method=\"adjoint\")\ndef circuit(parameters):\n    qml.StronglyEntanglingLayers(weights=parameters, wires=range(wires))\n    return [qml.expval(qml.PauliZ(i)) for i in range(wires)]\n\n# Set trainable parameters for calculating circuit Jacobian\nshape = qml.StronglyEntanglingLayers.shape(n_layers=layers, n_wires=wires)\nweights = qml.numpy.random.random(size=shape)\n\n# Run, calculate the quantum circuit Jacobian, and average the timing results\ntiming = []\nfor t in range(num_runs):\n    start = timer()\n    jac = qml.jacobian(circuit)(weights)\n    end = timer()\n    timing.append(end - start)\n\nprint(\"Result: \", qml.numpy.mean(timing))\n\n\nWhen the device is \u201clightning.qubit\u201d, I get the following warning message\n/home/sinha/miniconda3/envs/qns/lib/python3.8/site-packages/pennylane_lightning/lightning_qubit.py:893: UserWarning: Pre-compiled binaries for lightning.qubit are not available. Falling back to using the Python-based default.qubit implementation. To manually compile f\nrom source, follow the instructions at https://pennylane-lightning.readthedocs.io/en/latest/installation.html.\n\nAnd when the device is \u201clightning.gpu\u201d, I get the following error message.\nTraceback (most recent call last):\n  File \"/home/sinha/miniconda3/envs/qns/lib/python3.8/site-packages/pennylane_lightning_gpu/lightning_gpu.py\", line 54, in <module>\n    from .lightning_gpu_qubit_ops import (\nImportError: libcudart.so.11.0: cannot open shared object file: No such file or directory\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"trial_lightninig_gpu.py\", line 15, in <module>\n    dev = qml.device('lightning.gpu', wires=wires)\n  File \"/home/sinha/miniconda3/envs/qns/lib/python3.8/site-packages/pennylane/__init__.py\", line 316, in device\n    plugin_device_class = plugin_devices[name].load()\n  File \"/home/sinha/miniconda3/envs/qns/lib/python3.8/site-packages/pkg_resources/__init__.py\", line 2471, in load\n    return self.resolve()\n  File \"/home/sinha/miniconda3/envs/qns/lib/python3.8/site-packages/pkg_resources/__init__.py\", line 2477, in resolve\n    module = __import__(self.module_name, fromlist=['__name__'], level=0)\n  File \"/home/sinha/miniconda3/envs/qns/lib/python3.8/site-packages/pennylane_lightning_gpu/__init__.py\", line 17, in <module>\n    from .lightning_gpu import LightningGPU\n  File \"/home/sinha/miniconda3/envs/qns/lib/python3.8/site-packages/pennylane_lightning_gpu/lightning_gpu.py\", line 92, in <module>\n    except (ModuleNotFoundError, ImportError, ValueError, PLException) as e:\nNameError: name 'PLException' is not defined\n\nOutput of qml.about().\n>>> qml.about()\nName: PennyLane\nVersion: 0.28.0\nSummary: PennyLane is a Python quantum machine learning library by Xanadu Inc.\nHome-page: https://github.com/XanaduAI/pennylane\nAuthor:\nAuthor-email:\nLicense: Apache License 2.0\nLocation: /home/sinha/miniconda3/envs/qns/lib/python3.8/site-packages\nRequires: appdirs, autograd, autoray, cachetools, networkx, numpy, pennylane-lightning, requests, retworkx, scipy, semantic-version, toml\nRequired-by: PennyLane-Lightning, PennyLane-Lightning-GPU\n\nPlatform info:           Linux-5.4.0-147-generic-x86_64-with-glibc2.17\nPython version:          3.8.16\nNumpy version:           1.22.3\nScipy version:           1.7.3\nInstalled devices:\n- lightning.gpu (PennyLane-Lightning-GPU-0.30.0)\n- lightning.qubit (PennyLane-Lightning-0.28.1)\n- default.gaussian (PennyLane-0.28.0)\n- default.mixed (PennyLane-0.28.0)\n- default.qubit (PennyLane-0.28.0)\n- default.qubit.autograd (PennyLane-0.28.0)\n- default.qubit.jax (PennyLane-0.28.0)\n- default.qubit.tf (PennyLane-0.28.0)\n- default.qubit.torch (PennyLane-0.28.0)\n- default.qutrit (PennyLane-0.28.0)\n- null.qubit (PennyLane-0.28.0)\n\n\nI am not sure, where exactly is the problem.1 Reply", "link": "https://discuss.pennylane.ai//t/issues-with-pennylane-lightning-installation/2989/5"}}