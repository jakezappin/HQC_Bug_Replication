{"0": {"author": "P.Kairon", "date": "1593396587948", "content": "Can anyone tell me how to do multi dimensional regression (like we do with ANNs /Linear Regression). In my understanding we have to generalize the code in curve fitting tutorial . But i am having a hard time inputting multi dimensional inputs.\n\n\n Solved by josh in post #6 \n\n\n                Apologies @P.Kairon, looks like there was a typo in my previous reply. The QNode should look like this: \ndef circuit(pars):\n   CVNeuralNetLayers(*pars, wires=[0, 2])\n\n@qml.qnode(dev)\ndef quantum_neural_net(var, x1=None, x2=None, x3=None):\n   # Encode input x into quantum state\n   qml.Displacement(x1\u2026\n              \n", "link": "https://discuss.pennylane.ai//t/multi-dimensional-regression-using-cv-qnn/442/1"}, "1": {"author": "josh", "date": "1593398875611", "content": "Hi @P.Kairon! Do you have a small code example you could share to illustrate your multi dimensional inputs?", "link": "https://discuss.pennylane.ai//t/multi-dimensional-regression-using-cv-qnn/442/2"}, "2": {"author": "P.Kairon", "date": "1593416710635", "content": "\nimage354\u00d7662 12 KB\n\nThis is the boston housing dataset. I want to predict output column using F1,F2,F3.\nimport pennylane as qml\nfrom pennylane import numpy as np\nfrom pennylane.optimize import AdamOptimizer\nfrom numpy import *  # get the \"numpy\" library for linear algebra\nfrom math import *\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom pennylane.templates.layers import CVNeuralNetLayers\nfrom pennylane.init import cvqnn_layers_all\nfrom pennylane.templates.embeddings import DisplacementEmbedding\n\ndata = np.loadtxt(\"sine.txt\")\n\nfrom sklearn import preprocessing\n\nmm_scaler = preprocessing.MinMaxScaler()\ndata = mm_scaler.fit_transform(data)\n\nprint(data.shape)\n\nX = data[:, 0:3]\nY = data[:, 3]\n\nxtr, xt, ytr, yt = train_test_split(X, Y, test_size=0.3)\ndev = qml.device(\"strawberryfields.fock\", wires=3, cutoff_dim=50)\n\n\ndef circuit(*pars):\n    CVNeuralNetLayers(*pars, wires=[0, 2])\n\n\n@qml.qnode(dev)\ndef quantum_neural_net(*var, x1=None, x2=None, x3=None):\n    # Encode input x into quantum state\n    qml.Displacement(x1, 0.0, wires=0)\n    qml.Displacement(x2, 0.0, wires=1)\n    qml.Displacement(x3, 0.0, wires=2)\n\n    for v in var:\n        circuit(*v)\n\n    return qml.expval(qml.X(0))\n\n\ndef square_loss(labels, predictions):\n    loss = 0\n    for l, p in zip(labels, predictions):\n        loss = loss + (l - p) ** 2\n\n    loss = loss / len(labels)\n    return loss\n\n\ndef cost(var, features, labels):\n    preds = [quantum_neural_net(var, x1=xlo[0], x2=xlo[1], x3=xlo[2]) for xlo in features]\n    return square_loss(labels, preds)\n\n\ninit_pars = cvqnn_layers_all(n_layers=1, n_wires=3, seed=None)\nprint(init_pars)\nopt = AdamOptimizer(0.01, beta1=0.9, beta2=0.999)\n\nvar = init_pars\n\nfor it in range(50):\n    var = opt.step(lambda v: cost(v, xtr, ytr), var)\n    print(\"Iter: {:5d} | Cost: {:0.7f} \".format(it + 1, cost(var, xtr, ytr)))\n\npredics = [quantum_neural_net(var, x1=xlo[0], x2=xlo[1], x3=xlo[2]) for xlo in xt]\n\nimport matplotlib.pyplot as plt\n\nplt.figure(figsize=(20, 10))\nplt.plot(predics)\nplt.plot(yt)\n\nI keep getting worng input shape detected error when i run the code.\nAlso could you tell me how to do same code in data reuploading way", "link": "https://discuss.pennylane.ai//t/multi-dimensional-regression-using-cv-qnn/442/3"}, "3": {"author": "josh", "date": "1593488525890", "content": "Hi @P.Kairon, I can\u2019t seem to execute your code example, I get the error\nTraceback (most recent call last):\n  File \"test2.py\", line 50, in <module>\n    Y = data[:, 3]\nIndexError: index 3 is out of bounds for axis 1 with size 2\n\nSince I can\u2019t execute your code I can\u2019t verify for sure the solution, but it looks like your QNode is calling circuit incorrectly; a for loop should not be required if we redefine the ansatz:\ndef circuit(pars):\n    CVNeuralNetLayers(*pars, wires=[0, 2])\n\n@qml.qnode(dev)\ndef quantum_neural_net(*var, x1=None, x2=None, x3=None):\n    # Encode input x into quantum state\n    qml.Displacement(x1, 0.0, wires=0)\n    qml.Displacement(x2, 0.0, wires=1)\n    qml.Displacement(x3, 0.0, wires=2)\n\n    circuit(var)\n\n    return qml.expval(qml.X(0))\n", "link": "https://discuss.pennylane.ai//t/multi-dimensional-regression-using-cv-qnn/442/4"}, "4": {"author": "josh", "date": "1593524053808", "content": "Apologies @P.Kairon, looks like there was a typo in my previous reply. The QNode should look like this:\ndef circuit(pars):\n   CVNeuralNetLayers(*pars, wires=[0, 2])\n\n@qml.qnode(dev)\ndef quantum_neural_net(var, x1=None, x2=None, x3=None):\n   # Encode input x into quantum state\n   qml.Displacement(x1, 0.0, wires=0)\n   qml.Displacement(x2, 0.0, wires=1)\n   qml.Displacement(x3, 0.0, wires=2)\n\n   circuit(var)\n\n   return qml.expval(qml.X(0))\n\nI\u2019ve attached a working Jupyter notebook example below if you want to explore it further!\nUntitled.ipynb (11.6 KB)Solution1", "link": "https://discuss.pennylane.ai//t/multi-dimensional-regression-using-cv-qnn/442/5"}, "5": {"author": "P.Kairon", "date": "1593874396849", "content": "Hey @josh thanks for the help it runs fine . But it is very slow , since i can\u2019t switch simulators (correct me if i\u2019m wrong here) .\nIs there any way to speed up computation ?\nCan i interface it with TF ?\nMy thought is to run it on GPU but not sure how to do that .", "link": "https://discuss.pennylane.ai//t/multi-dimensional-regression-using-cv-qnn/442/6"}, "6": {"author": "josh", "date": "1593931995325", "content": "Hi @P.Kairon, glad it\u2019s now working! Unfortunately, the Strawberry Fields Fock backend is quite computationally intensive \u2014 the memory required for a simulation scales like D^N, for a cutoff of D and N wires.You can try decreasing the cutoff or the number of wires to see a speed improvement.\nStrawberry Fields itself now comes with a simulator backend that supports TensorFlow 2.0 4, which works on GPUs. This is not yet supported via PennyLane, but we are working on integrating this backend!", "link": "https://discuss.pennylane.ai//t/multi-dimensional-regression-using-cv-qnn/442/7"}, "7": {"author": "P.Kairon", "date": "1593944508615", "content": "Hi @josh , thanks for the info. I reached out to Aroosa previously regarding a similar problem. She suggested using data reuploading to encode all the 3 features into a single wire.  Could you please suggest and if possible demonstrate , necessary changes in the code that i need to make to do that ?", "link": "https://discuss.pennylane.ai//t/multi-dimensional-regression-using-cv-qnn/442/8"}, "8": {"author": "AroosaIjaz", "date": "1594062450663", "content": "Hi @P.Kairon,\nIt would be an interesting problem to try this with data reuploading technique   See our tutorial 4 and this paper 1 for more details.\nYou can simply change the code above as follows:\ndev = qml.device('strawberryfields.fock', wires=1, cutoff_dim=1)\n\n\ndef circuit(pars):\n    CVNeuralNetLayers(*pars, wires=0)\n\n@qml.qnode(dev)\ndef quantum_neural_net(var, x1=None,x2=None,x3=None):\n\n    qml.Displacement(x1, 0.0, wires=0)\n    qml.Displacement(x2, 0.0, wires=0)\n    qml.Displacement(x3, 0.0, wires=0)\n    \n    circuit(var)\n    return qml.expval(qml.X(0))\n\nThe cost function can stay the same.\nYou can try and vary the number of layers in CVNeuralNetLayers to see if your model works better. Another trick is to re-upload data as follows:\ndev = qml.device('strawberryfields.fock', wires=1, cutoff_dim=1)\n\n\ndef layer(pars):\n    CVNeuralNetLayers(*pars, wires=0)\n\n@qml.qnode(dev)\ndef quantum_neural_net(var1, var2, x1=None,x2=None,x3=None):\n\n    qml.Displacement(x1, 0.0, wires=0)\n    qml.Displacement(x2, 0.0, wires=0)\n    qml.Displacement(x3, 0.0, wires=0)\n    \n    circuit(var1)\n\n    qml.Displacement(x1, 0.0, wires=0)\n    qml.Displacement(x2, 0.0, wires=0)\n    qml.Displacement(x3, 0.0, wires=0)\n    \n    circuit(var2)\n    return qml.expval(qml.X(0))\n\nHope this helps!", "link": "https://discuss.pennylane.ai//t/multi-dimensional-regression-using-cv-qnn/442/9"}, "9": {"author": "P.Kairon", "date": "1594293689556", "content": "Thanks alot @AroosaIjaz . First method worked , however we have to increase the cutoff else cost function remains the same. Although second method is giving errors\nAlso model is performing really bad as cost function plateaus around 0.02 sometimes and even starts climbing up. Could you please take a look at the uploaded code(data uploaded as well),(sorry for the troubles , i have a deadline coming up . @AroosaIjaz @josh.\nhttps://drive.google.com/drive/folders/13cK5lmcmEWvY1JZ68lyRdAZ9-iHghCX8?usp=sharing 7", "link": "https://discuss.pennylane.ai//t/multi-dimensional-regression-using-cv-qnn/442/10"}, "10": {"author": "nathan", "date": "1594319601285", "content": "Hi @P.Kairon\nWe\u2019re glad to hear that @AroosaIjaz\u2019s proposed method worked. Indeed, you\u2019ll need to set the cutoff dimension to a larger number to ensure numerical accuracy/stability, the value of 1 is just a placeholder.\nYou mentioned that the second method is giving errors. Would you be able to provide the traceback/error msg here so we can try to help?\nRegarding how well your model is performing: we can see if we can spot anything obvious, and make suggestions, but we aren\u2019t necessarily able to debug code that is error-free, but just achieves unsatisfactory outputs.\nMy first guess is that you will need to check whether the cutoff level is sufficiently high to ensure numerical accuracy (this is a tradeoff with the amount of time/memory you need to simulate). Too low a cutoff and you have the risk that some operations\u2014like Displacements, Squeezing, Cubic Phase, etc\u2014push the quantum state outside of the space given by the cutoff. One way to check this would be to see if your state has a trace much less than 1 (equivalently, the expectation value of the identity is much less than 1)", "link": "https://discuss.pennylane.ai//t/multi-dimensional-regression-using-cv-qnn/442/11"}, "11": {"author": "josh", "date": "1593931995325", "content": "Hi @P.Kairon, glad it\u2019s now working! Unfortunately, the Strawberry Fields Fock backend is quite computationally intensive \u2014 the memory required for a simulation scales like D^NDN, for a cutoff of DD and NN wires.You can try decreasing the cutoff or the number of wires to see a speed improvement.\nStrawberry Fields itself now comes with a simulator backend that supports TensorFlow 2.0 4, which works on GPUs. This is not yet supported via PennyLane, but we are working on integrating this backend!", "link": "https://discuss.pennylane.ai//t/multi-dimensional-regression-using-cv-qnn/442/12"}}