{"0": {"author": "kareem_essafty", "date": "1574401562784", "content": "prog = sf.Program(1)\namp = 0.8\nnp.random.seed(0)\nx = np.random.rand(2)\n\nwith prog.context as q:\n    sf.ops.Squeezed(r=amp,p=0) | q[0]\n        \neng = sf.LocalEngine('fock', backend_options={'cutoff_dim': 24})\nresult = eng.run(prog)    \n\nprog2 = sf.Program(1)\nwith prog2.context as n:\n    sf.ops.Squeezed(r=amp,p=10) | n[0]\n\neng = sf.LocalEngine('fock', backend_options={'cutoff_dim': 24})\nresult1 = eng.run(prog)    \n\nThe output of the following:\nnp.vdot(result1.state.data,result.state.data)\n(0.9999886803073812+0j)\nwhile it should be approximately:\n\u201c0.6340021261700056\u201d according to \nthe version of Strawberryfields is \u20180.11.2\u2019\n\n\n Solved by kareem_essafty in post #3 \n\n\n                the following code solves the issue i\u2019m sorry for any inconvenience \nprog = sf.Program(1)\namp = 1.2\n\nwith prog.context as q:\n    sf.ops.Squeezed(r=amp,p=5) | q[0]\n        \neng = sf.Engine('fock', backend_options={'cutoff_dim': 40})\nresult = eng.run(prog)    \n\nprog2 = sf.Program(1)\nwith prog2.context\u2026\n              \n", "link": "https://discuss.pennylane.ai//t/unusual-behaviour-of-squeezing/275/1"}, "1": {"author": "kareem_essafty", "date": "1574426906819", "content": "the following code solves the issue i\u2019m sorry for any inconvenience\nprog = sf.Program(1)\namp = 1.2\n\nwith prog.context as q:\n    sf.ops.Squeezed(r=amp,p=5) | q[0]\n        \neng = sf.Engine('fock', backend_options={'cutoff_dim': 40})\nresult = eng.run(prog)    \n\nprog2 = sf.Program(1)\nwith prog2.context as n:\n    sf.ops.Squeezed(r=amp,p=5) | n[0]\n\neng1 = sf.Engine('fock', backend_options={'cutoff_dim': 40})\nresult1 = eng1.run(prog2)    \n\nthis will result in the following:\nvec = result1.state.reduced_dm(modes=0)\nvec2 = result.state.reduced_dm(modes=0)\n\nand the dot product will be:\nnp.vdot(vec,vec2) >> 0.9997011993187223\nwe can also use a single node with multiple qumodes and access each one using the reduced density matrix. please be careful about the trace of the system if you are going to use r>1 please increase the cut off numberSolution", "link": "https://discuss.pennylane.ai//t/unusual-behaviour-of-squeezing/275/2"}, "2": {"author": "nathan", "date": "1574517624234", "content": "Hi @kareem_essafty,\nYes, the energy of the system (and correspondingly, the size of cutoff you need to accurately simulate it) increases exponentially with the squeezing parameter r. It\u2019s always good to check the trace of the state when working with even a modest amount of squeezing.1", "link": "https://discuss.pennylane.ai//t/unusual-behaviour-of-squeezing/275/3"}, "3": {"author": "kareem_essafty", "date": "1574401562784", "content": "prog = sf.Program(1)\namp = 0.8\nnp.random.seed(0)\nx = np.random.rand(2)\n\nwith prog.context as q:\n    sf.ops.Squeezed(r=amp,p=0) | q[0]\n        \neng = sf.LocalEngine('fock', backend_options={'cutoff_dim': 24})\nresult = eng.run(prog)    \n\nprog2 = sf.Program(1)\nwith prog2.context as n:\n    sf.ops.Squeezed(r=amp,p=10) | n[0]\n\neng = sf.LocalEngine('fock', backend_options={'cutoff_dim': 24})\nresult1 = eng.run(prog)    \n\nThe output of the following:\nnp.vdot(result1.state.data,result.state.data)\n(0.9999886803073812+0j)\nwhile it should be approximately:\n\u201c0.6340021261700056\u201d according to \nthe version of Strawberryfields is \u20180.11.2\u2019\n\n\n Solved by kareem_essafty in post #3 \n\n\n                the following code solves the issue i\u2019m sorry for any inconvenience \nprog = sf.Program(1)\namp = 1.2\n\nwith prog.context as q:\n    sf.ops.Squeezed(r=amp,p=5) | q[0]\n        \neng = sf.Engine('fock', backend_options={'cutoff_dim': 40})\nresult = eng.run(prog)    \n\nprog2 = sf.Program(1)\nwith prog2.context\u2026\n              \n", "link": "https://discuss.pennylane.ai//t/unusual-behaviour-of-squeezing/275/4"}}