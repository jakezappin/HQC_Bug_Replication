{"0": {"author": "Davide_Zuliani", "date": "1635890431053", "content": "Dear experts,\nI\u2019m trying to set up a circuit with AmplitudeEmbedding + StronglyEntanglingLayers using JAX. I\u2019m using 4 input variables, therefore I\u2019m playing with 2 qubits in the following way:\nn_qubits=2\n\ndev = qml.device(\"default.qubit.jax\",wires=n_qubits)\n\nl = 1\nw_shape = (l,n_qubits,3)\nw_len=l*n_qubits*3\n\n@jax.jit\n@qml.qnode(dev,interface=\"jax\")\ndef circuit(data,weights):\n    se_weights = weights[:w_len].reshape(w_shape)\n    AmplitudeEmbedding(data,normalize=True,wires=range(n_qubits))\n    StronglyEntanglingLayers(se_weights,wires=range(n_qubits))\n    return qml.expval(qml.PauliZ(0))\n\nvcircuit = jax.vmap(circuit,in_axes=(0,None))\nn_cores = jax.local_device_count()\npcircuit = jax.pmap(vcircuit,in_axes=(0,None))\n\ndef train(n_events):\n\n    datas, labels = get_muon_dataset(n_jets=n_events,balanced=True)\n    datas = jnp.stack(np.array_split(datas,n_cores))\n    labels = jnp.stack(np.array_split(labels,n_cores))\n\n    def loss(weights):\n        out = pcircuit(datas,weights)\n        l = jnp.mean((out-labels)**2)\n        return l\n\n    def accuracy(weights):\n        out = pcircuit(datas,weights)\n        return jnp.mean(jnp.sign(out) == jnp.sign(labels))\n\n    def callbacks(weights):\n        l = loss(weights)\n        a = accuracy(weights)\n        print(\"loss: \", l, \"  acc: \", a)\n\ngrad_loss = jax.grad(loss)\nweights = np.random.randn(w_len,)\nres = minimize(loss,weights,jac=grad_loss, options = {'maxiter':100})\n\nBut unfortunately, I get this error:\n  Traceback (most recent call last):\n  File \"amplitudeencoding_jax.py\", line 100, in <module>\n  res = train(1000)\n  File \"amplitudeencoding_jax.py\", line 84, in train\n  res = minimize(loss,weights,jac=grad_loss, options = {'maxiter':100})\n  File \"/lhcbdata/miniconda3/envs/dzuliani_env/lib/python3.8/site-            packages/scipy/optimize/_minimize.py\", line 614, in minimize\n  return _minimize_bfgs(fun, x0, args, jac, callback, **options)\n  File \"/lhcbdata/miniconda3/envs/dzuliani_env/lib/python3.8/site-packages/scipy/optimize/optimize.py\", line 1135, in _minimize_bfgs\n  sf = _prepare_scalar_function(fun, x0, jac, args=args, epsilon=eps,\n  File \"/lhcbdata/miniconda3/envs/dzuliani_env/lib/python3.8/site-packages/scipy/optimize/optimize.py\", line 261, in _prepare_scalar_function\n  sf = ScalarFunction(fun, x0, args, grad, hess,\n  File \"/lhcbdata/miniconda3/envs/dzuliani_env/lib/python3.8/site-packages/scipy/optimize/_differentiable_functions.py\", line 136, in __init__\n  self._update_fun()\n  File \"/lhcbdata/miniconda3/envs/dzuliani_env/lib/python3.8/site-packages/scipy/optimize/_differentiable_functions.py\", line 226, in _update_fun\n  self._update_fun_impl()\n  File \"/lhcbdata/miniconda3/envs/dzuliani_env/lib/python3.8/site-packages/scipy/optimize/_differentiable_functions.py\", line 133, in update_fun\n  self.f = fun_wrapped(self.x)\n  File \"/lhcbdata/miniconda3/envs/dzuliani_env/lib/python3.8/site-packages/scipy/optimize/_differentiable_functions.py\", line 130, in fun_wrapped\n  return fun(x, *args)\n  File \"amplitudeencoding_jax.py\", line 64, in loss\n  out = pcircuit(datas,weights)\n  File \"/lhcbdata/miniconda3/envs/dzuliani_env/lib/python3.8/site-packages/pennylane/tape/qnode.py\", line 530, in __call__\n  self.construct(args, kwargs)\n  File \"/lhcbdata/miniconda3/envs/dzuliani_env/lib/python3.8/site-packages/pennylane/tape/qnode.py\", line 469, in construct\n  self.qfunc_output = self.func(*args, **kwargs)\n  File \"amplitudeencoding_jax.py\", line 44, in circuit\n  AmplitudeEmbedding(data,normalize=False,wires=range(n_qubits))\n  File \"/lhcbdata/miniconda3/envs/dzuliani_env/lib/python3.8/site-packages/pennylane/templates/decorator.py\", line 69, in wrapper\n  func(*args, **kwargs)\n  File \"/lhcbdata/miniconda3/envs/dzuliani_env/lib/python3.8/site-packages/pennylane/templates/embeddings/amplitude.py\", line 296, in AmplitudeEmbedding\n  features = _preprocess(features, wires, pad_with, normalize)\n  File \"/lhcbdata/miniconda3/envs/dzuliani_env/lib/python3.8/site-packages/pennylane/templates/embeddings/amplitude.py\", line 81, in _preprocess\n  if not qml.math.allclose(norm, 1.0, atol=TOLERANCE):\n  File \"/lhcbdata/miniconda3/envs/dzuliani_env/lib/python3.8/site-packages/pennylane/math/fn.py\", line 138, in allclose\n  return np.allclose(t1, t2, rtol=rtol, atol=atol, **kwargs)\n  File \"<__array_function__ internals>\", line 5, in allclose\n  File \"/lhcbdata/miniconda3/envs/dzuliani_env/lib/python3.8/site-packages/numpy/core/numeric.py\", line 2189, in allclose\n  res = all(isclose(a, b, rtol=rtol, atol=atol, equal_nan=equal_nan))\n  File \"<__array_function__ internals>\", line 5, in isclose\n  File \"/lhcbdata/miniconda3/envs/dzuliani_env/lib/python3.8/site-packages/numpy/core/numeric.py\", line 2278, in isclose\n  x = asanyarray(a)\n  File \"/lhcbdata/miniconda3/envs/dzuliani_env/lib/python3.8/site-packages/numpy/core/_asarray.py\", line 136, in asanyarray\n  return array(a, dtype, copy=False, order=order, subok=True)\n  jax._src.errors.TracerArrayConversionError: The numpy.ndarray       conversion method __array__() was called on the JAX Tracer object       Traced<ShapedArray(float64[])>with<BatchTrace(level=1/2)> with\n    val = Traced<ShapedArray(float64[100])>with<DynamicJaxprTrace(level=0/2)>\n    batch_dim = 0\n  See https://jax.readthedocs.io/en/latest/errors.html#jax.errors.TracerArrayConversionError\n\nDoes anybody know if it is possible to implement AmplitudeEmbedding in JAX? And if so, what can I do to solve this issue?\nThank you in advance!\nCheers,\nDavide1 Reply", "link": "https://discuss.pennylane.ai//t/problem-when-using-jax-with-amplitudeembedding/1456/1"}, "1": {"author": "josh", "date": "1635931928751", "content": "\n\n\n Davide_Zuliani:\n\nqml.math.allclose(norm, 1.0, atol=TOLERANCE)\n\n\nHi @Davide_Zuliani! It appears that the internal check to ensure that the amplitude is normalized,\nqml.math.allclose(norm, 1.0, atol=TOLERANCE)\n\ndoes not support @jax.jit. Unfortunately, this check is currently hardcoded, so the only way around it with the current PL version is to modify the AmplitudeEmbedding template code to remove the check, as so:\ndiff --git a/pennylane/templates/embeddings/amplitude.py b/pennylane/templates/embeddings/amplitude.py\nindex e0200cf8..7a0682cb 100644\n--- a/pennylane/templates/embeddings/amplitude.py\n+++ b/pennylane/templates/embeddings/amplitude.py\n@@ -188,16 +188,9 @@ class AmplitudeEmbedding(Operation):\n                 feature_set = qml.math.concatenate([feature_set, padding], axis=0)\n\n             # normalize\n-            norm = qml.math.sum(qml.math.abs(feature_set) ** 2)\n-\n-            if not qml.math.allclose(norm, 1.0, atol=TOLERANCE):\n-                if normalize or pad_with:\n-                    feature_set = feature_set / np.sqrt(norm)\n-                else:\n-                    raise ValueError(\n-                        f\"Features must be a vector of norm 1.0; got norm {norm}.\"\n-                        \"Use 'normalize=True' to automatically normalize.\"\n-                    )\n+            if normalize:\n+                norm = qml.math.sum(qml.math.abs(feature_set) ** 2)\n+                feature_set = feature_set / qml.math.sqrt(norm)\n\n             features_batch[i] = qml.math.cast(feature_set, np.complex128)\n\nOnce you do this, the JIT will work:\ndev = qml.device(\"default.qubit\", wires=2)\n\n@jax.jit\n@qml.qnode(dev,interface=\"jax\")\ndef circuit(data, weights):\n    qml.templates.AmplitudeEmbedding(data, normalize=True, wires=[0, 1])\n    qml.templates.StronglyEntanglingLayers(weights, wires=[0, 1])\n    return qml.expval(qml.PauliZ(0))\n\ndata = jnp.ones([4], dtype=jnp.float32)\nweights = jnp.ones([2, 2, 3], dtype=jnp.float32)\n\n>>> circuit(data, weights)\nDeviceArray(0.13645427, dtype=float32)\n>>> jax.grad(circuit)(data, weights)\nDeviceArray([-0.11450433, -0.45287138,  0.24969524,  0.31768045], dtype=float32)\n\nThis is definitely feedback we will take back and consider, however \u2014 we want to find a balance between\n\nEnsuring all PennyLane code supports the JIT, and\nProviding useful validation checks!\n\nSo we will investigate and see if it is possible to retain the validation on state normalization, while also supporting JIT workflows.1", "link": "https://discuss.pennylane.ai//t/problem-when-using-jax-with-amplitudeembedding/1456/2"}, "2": {"author": "josh", "date": "1635947088085", "content": "@Davide_Zuliani a small update: I have created a PR to enable jax.jit support with AmplitudeEmbedding here: Add support for abstract tensors in AmplitudeEmbedding by josh146 \u00b7 Pull Request #1845 \u00b7 PennyLaneAI/pennylane \u00b7 GitHub 4\nBefore this gets merged in, you could install PennyLane directly from this branch to test-drive it \npip install git+https://github.com/PennyLaneAI/pennylane.git@abstract-support\n1", "link": "https://discuss.pennylane.ai//t/problem-when-using-jax-with-amplitudeembedding/1456/3"}, "3": {"author": "Davide_Zuliani", "date": "1636040253446", "content": "Hi @josh!\nThank you very much for your quick answer, very much appreciated!\nIndeed now AmplitudeEmbedding is working with Jax, I tested with some code similar to your example.\nUnfortunately, I still have some troubles when trying to parallelize computation on several CPU cores.\nHere I post my code (an easy example to run on 5 CPU cores):\nimport os\nimport re\nimport time\nimport argparse\ndef set_host_device_count(n):\n    xla_flags = os.getenv('XLA_FLAGS', '').lstrip('--')\n    xla_flags = re.sub(r'xla_force_host_platform_device_count=.+\\s', '', xla_flags).split()\n    os.environ['XLA_FLAGS'] = ' '.join(['--xla_force_host_platform_device_count={}'.format(n)]\n                                   + xla_flags)\nset_host_device_count(5)\nimport pennylane as qml\nfrom pennylane import wires\nfrom pennylane.templates import AngleEmbedding, StronglyEntanglingLayers, QAOAEmbedding, AmplitudeEmbedding\n\nfrom jax.config import config\nconfig.update(\"jax_enable_x64\",True)\nfrom dataset_utils import get_muon_dataset\nimport jax\nimport jax.numpy as jnp\nimport numpy as np\nimport pandas as pd\nfrom scipy.optimize import minimize\nimport matplotlib.pyplot as plt\n\nfrom numpy.random import randn\n\nn_qubits=2\n\ndev = qml.device(\"default.qubit\", wires=n_qubits)\n\nl = 1\n\n@jax.jit\n@qml.qnode(dev,interface=\"jax\")\n    def circuit(data, weights):\n    qml.templates.AmplitudeEmbedding(data, wires=range(n_qubits))\n    qml.templates.StronglyEntanglingLayers(weights, wires=range(n_qubits))\n    return qml.expval(qml.PauliZ(0))\n\nvcircuit = jax.vmap(circuit,in_axes=(0,None))\nn_cores = jax.local_device_count()\npcircuit = jax.pmap(vcircuit,in_axes=(0,None))\n\n\ndata=jnp.ones([4],dtype=jnp.float32)\ndatas = jnp.stack([data] * n_cores)\ndatas = jnp.stack(np.array_split(datas,n_cores))\n\nprint(type(datas))\nprint(datas)\nweights = jnp.ones([l,n_qubits,3], dtype=jnp.float32)\n\nout = pcircuit(datas,weights)\n\nThe error that pops out is something like this:\nTraceback (most recent call last):   File \"prova_angleembedding.py\", line 75, in <module>     out = pcircuit(datas,weights)   File \"/lhcbdata/miniconda3/envs/dzuliani_env/lib/python3.8/site-packages/pennylane/qnode.py\", line 674, in __call__     self.construct(args, kwargs)   File \"/lhcbdata/miniconda3/envs/dzuliani_env/lib/python3.8/site-packages/pennylane/qnode.py\", line 582, in construct     self.qfunc_output = self.func(*args, **kwargs)   File \"prova_angleembedding.py\", line 41, in circuit     qml.templates.AmplitudeEmbedding(data, wires=range(n_qubits))   File \"/lhcbdata/miniconda3/envs/dzuliani_env/lib/python3.8/site-packages/pennylane/templates/embeddings/amplitude.py\", line 132, in __init__     features = self._preprocess(features, wires, pad_with, normalize)   File \"/lhcbdata/miniconda3/envs/dzuliani_env/lib/python3.8/site-packages/pennylane/templates/embeddings/amplitude.py\", line 197, in _preprocess     elif not qml.math.allclose(norm, 1.0, atol=TOLERANCE): jax._src.errors.ConcretizationTypeError: Abstract tracer value encountered where concrete value is expected: Traced<ShapedArray(bool[])>with<BatchTrace(level=1/2)> with   val = Traced<ShapedArray(bool[1])>with<DynamicJaxprTrace(level=0/2)>   batch_dim = 0 The problem arose with the boolfunction.\nWith AngleEmbedding everything works fine.\nThank you very much for your help ", "link": "https://discuss.pennylane.ai//t/problem-when-using-jax-with-amplitudeembedding/1456/4"}, "4": {"author": "josh", "date": "1636046799335", "content": "Oh, nice catch @Davide_Zuliani! Just to clarify, this is when you run the code snippet on the abstract-support branch of PennyLane?\nI think you may have caught an edge case, I will see if we can get this working ", "link": "https://discuss.pennylane.ai//t/problem-when-using-jax-with-amplitudeembedding/1456/5"}, "5": {"author": "josh", "date": "1636047617692", "content": "A quick update \u2013 I believe I have fixed this issue in the branch now. You may need to run\npip uninstall pennylane\npip install git+https://github.com/PennyLaneAI/pennylane.git@abstract-support\n\nfor this change to take effect, if you have installed this branch using pip (otherwise, if you used git, simply pull the latest changes!).\nLet me know if this now works for you ", "link": "https://discuss.pennylane.ai//t/problem-when-using-jax-with-amplitudeembedding/1456/6"}, "6": {"author": "Davide_Zuliani", "date": "1636049106020", "content": "Hi @josh!\nThanks for the tips!\nI actually managed to make it work by doing the following changes:\nin file ../pennylane/templates/embeddings/amplitude.by I changed line 197\nelif not qml.math.allclose(norm, 1.0, atol=TOLERANCE):\nwith\nelif not qml.math.is_abstract(norm):\nwhile in file ../pennylane/devices/default_qubit.by I\u2019ve commented lines 636-638:\n#if not qml.math.is_abstract(state):\n#    if not qml.math.allclose(qml.math.linalg.norm(state, ord=2), 1.0, atol=tolerance):\n#        raise ValueError(\"Sum of amplitudes-squared does not equal one.\")\n\nNow, I think I\u2019ve done just some harsh changes (maybe not understanding the real issue, although I think that qml.math.allclose is giving me some problems) but at least now it\u2019s working fine.\nI will also try your tips and see if it\u2019s working, you\u2019re approach seems definitely more \u201corthodox\u201d.\nAgain thank you very much for your help ", "link": "https://discuss.pennylane.ai//t/problem-when-using-jax-with-amplitudeembedding/1456/7"}, "7": {"author": "CatalinaAlbornoz", "date": "1636123719271", "content": "Hi @Davide_Zuliani, thank you for sharing your solution too!\nEnjoy using PennyLane ", "link": "https://discuss.pennylane.ai//t/problem-when-using-jax-with-amplitudeembedding/1456/8"}, "8": {"author": "Davide_Zuliani", "date": "1635890431053", "content": "Dear experts,\nI\u2019m trying to set up a circuit with AmplitudeEmbedding + StronglyEntanglingLayers using JAX. I\u2019m using 4 input variables, therefore I\u2019m playing with 2 qubits in the following way:\nn_qubits=2\n\ndev = qml.device(\"default.qubit.jax\",wires=n_qubits)\n\nl = 1\nw_shape = (l,n_qubits,3)\nw_len=l*n_qubits*3\n\n@jax.jit\n@qml.qnode(dev,interface=\"jax\")\ndef circuit(data,weights):\n    se_weights = weights[:w_len].reshape(w_shape)\n    AmplitudeEmbedding(data,normalize=True,wires=range(n_qubits))\n    StronglyEntanglingLayers(se_weights,wires=range(n_qubits))\n    return qml.expval(qml.PauliZ(0))\n\nvcircuit = jax.vmap(circuit,in_axes=(0,None))\nn_cores = jax.local_device_count()\npcircuit = jax.pmap(vcircuit,in_axes=(0,None))\n\ndef train(n_events):\n\n    datas, labels = get_muon_dataset(n_jets=n_events,balanced=True)\n    datas = jnp.stack(np.array_split(datas,n_cores))\n    labels = jnp.stack(np.array_split(labels,n_cores))\n\n    def loss(weights):\n        out = pcircuit(datas,weights)\n        l = jnp.mean((out-labels)**2)\n        return l\n\n    def accuracy(weights):\n        out = pcircuit(datas,weights)\n        return jnp.mean(jnp.sign(out) == jnp.sign(labels))\n\n    def callbacks(weights):\n        l = loss(weights)\n        a = accuracy(weights)\n        print(\"loss: \", l, \"  acc: \", a)\n\ngrad_loss = jax.grad(loss)\nweights = np.random.randn(w_len,)\nres = minimize(loss,weights,jac=grad_loss, options = {'maxiter':100})\n\nBut unfortunately, I get this error:\n  Traceback (most recent call last):\n  File \"amplitudeencoding_jax.py\", line 100, in <module>\n  res = train(1000)\n  File \"amplitudeencoding_jax.py\", line 84, in train\n  res = minimize(loss,weights,jac=grad_loss, options = {'maxiter':100})\n  File \"/lhcbdata/miniconda3/envs/dzuliani_env/lib/python3.8/site-            packages/scipy/optimize/_minimize.py\", line 614, in minimize\n  return _minimize_bfgs(fun, x0, args, jac, callback, **options)\n  File \"/lhcbdata/miniconda3/envs/dzuliani_env/lib/python3.8/site-packages/scipy/optimize/optimize.py\", line 1135, in _minimize_bfgs\n  sf = _prepare_scalar_function(fun, x0, jac, args=args, epsilon=eps,\n  File \"/lhcbdata/miniconda3/envs/dzuliani_env/lib/python3.8/site-packages/scipy/optimize/optimize.py\", line 261, in _prepare_scalar_function\n  sf = ScalarFunction(fun, x0, args, grad, hess,\n  File \"/lhcbdata/miniconda3/envs/dzuliani_env/lib/python3.8/site-packages/scipy/optimize/_differentiable_functions.py\", line 136, in __init__\n  self._update_fun()\n  File \"/lhcbdata/miniconda3/envs/dzuliani_env/lib/python3.8/site-packages/scipy/optimize/_differentiable_functions.py\", line 226, in _update_fun\n  self._update_fun_impl()\n  File \"/lhcbdata/miniconda3/envs/dzuliani_env/lib/python3.8/site-packages/scipy/optimize/_differentiable_functions.py\", line 133, in update_fun\n  self.f = fun_wrapped(self.x)\n  File \"/lhcbdata/miniconda3/envs/dzuliani_env/lib/python3.8/site-packages/scipy/optimize/_differentiable_functions.py\", line 130, in fun_wrapped\n  return fun(x, *args)\n  File \"amplitudeencoding_jax.py\", line 64, in loss\n  out = pcircuit(datas,weights)\n  File \"/lhcbdata/miniconda3/envs/dzuliani_env/lib/python3.8/site-packages/pennylane/tape/qnode.py\", line 530, in __call__\n  self.construct(args, kwargs)\n  File \"/lhcbdata/miniconda3/envs/dzuliani_env/lib/python3.8/site-packages/pennylane/tape/qnode.py\", line 469, in construct\n  self.qfunc_output = self.func(*args, **kwargs)\n  File \"amplitudeencoding_jax.py\", line 44, in circuit\n  AmplitudeEmbedding(data,normalize=False,wires=range(n_qubits))\n  File \"/lhcbdata/miniconda3/envs/dzuliani_env/lib/python3.8/site-packages/pennylane/templates/decorator.py\", line 69, in wrapper\n  func(*args, **kwargs)\n  File \"/lhcbdata/miniconda3/envs/dzuliani_env/lib/python3.8/site-packages/pennylane/templates/embeddings/amplitude.py\", line 296, in AmplitudeEmbedding\n  features = _preprocess(features, wires, pad_with, normalize)\n  File \"/lhcbdata/miniconda3/envs/dzuliani_env/lib/python3.8/site-packages/pennylane/templates/embeddings/amplitude.py\", line 81, in _preprocess\n  if not qml.math.allclose(norm, 1.0, atol=TOLERANCE):\n  File \"/lhcbdata/miniconda3/envs/dzuliani_env/lib/python3.8/site-packages/pennylane/math/fn.py\", line 138, in allclose\n  return np.allclose(t1, t2, rtol=rtol, atol=atol, **kwargs)\n  File \"<__array_function__ internals>\", line 5, in allclose\n  File \"/lhcbdata/miniconda3/envs/dzuliani_env/lib/python3.8/site-packages/numpy/core/numeric.py\", line 2189, in allclose\n  res = all(isclose(a, b, rtol=rtol, atol=atol, equal_nan=equal_nan))\n  File \"<__array_function__ internals>\", line 5, in isclose\n  File \"/lhcbdata/miniconda3/envs/dzuliani_env/lib/python3.8/site-packages/numpy/core/numeric.py\", line 2278, in isclose\n  x = asanyarray(a)\n  File \"/lhcbdata/miniconda3/envs/dzuliani_env/lib/python3.8/site-packages/numpy/core/_asarray.py\", line 136, in asanyarray\n  return array(a, dtype, copy=False, order=order, subok=True)\n  jax._src.errors.TracerArrayConversionError: The numpy.ndarray       conversion method __array__() was called on the JAX Tracer object       Traced<ShapedArray(float64[])>with<BatchTrace(level=1/2)> with\n    val = Traced<ShapedArray(float64[100])>with<DynamicJaxprTrace(level=0/2)>\n    batch_dim = 0\n  See https://jax.readthedocs.io/en/latest/errors.html#jax.errors.TracerArrayConversionError\n\nDoes anybody know if it is possible to implement AmplitudeEmbedding in JAX? And if so, what can I do to solve this issue?\nThank you in advance!\nCheers,\nDavide1 Reply", "link": "https://discuss.pennylane.ai//t/problem-when-using-jax-with-amplitudeembedding/1456/9"}}