{"0": {"author": "PhilippHS", "date": "1657007599298", "content": "Hello,\nI am working on an experiment trying different implementations of hybrid quantum neuronal networks: I have a larger classical Neuronal network and replace the final dense layer with different quantum layers.\nSo far, I tried the pennylane basic- and strong entanglement layer templates as well as a self-developed circuit. All of these worked very fine and generated good results. Now tried implementations of the CVNeuralNetLayers described in Killoran et.al. 2018. ( https://pennylane.readthedocs.io/en/stable/code/api/pennylane.CVNeuralNetLayers.html )\nHowever, using this layer I run into wired Tensorflow errors when trying to train the model:\ntensorflow.python.framework.errors_impl.InvalidArgumentError: cannot compute Mul as input #1(zero-based) was expected to be a float tensor but is a double tensor [Op:Mul]\nDoes anyone know what this error means or at least how I can avoid this?\nBest wishes,\nPhilipp\n\nHere my Implementation\nA) The Qnode\nimport pennylane as qml\nfrom pennylane import numpy as np\n\ndef get_CVQuantumLayer(  num_inputs, num_outputs,  n_layers=1, device=\"strawberryfields.fock\" , cutoff_dim=10):\n\n    n_qubits = num_inputs\n    if num_outputs>n_qubits:\n        raise ValueError(\"Number of output measurements can not be larger then number of Q-Bits\")\n\n    # 0) Initialisations\n    # 0.1) define device\n    dev = qml.device( device , wires=n_qubits , cutoff_dim=cutoff_dim )\n\n    # 0.2) Define weight shapes (following Killoran et.al. 2018 )\n    L = n_layers\n    M = n_qubits\n    K = int( M/2*(M-1) )\n    weight_shapes = {'theta_1':(L,K), 'phi_1':(L,K), 'varphi_1':(L,M), 'r':(L,M), 'phi_r':(L,M), 'theta_2':(L,K), 'phi_2': (L,K), 'varphi_2':(L,M), 'a':(L,M), 'phi_a':(L,M), 'k':(L,M) }\n\n    #  1) Define QNode to build quantum layer \n    @qml.qnode(dev,interface='tf')\n    def qnode(inputs, theta_1, phi_1, varphi_1, r, phi_r, theta_2, phi_2, varphi_2, a, phi_a, k):\n    # 1.1) Squeezing Embedding\n    qml.templates.SqueezingEmbedding(inputs, wires=range(n_qubits) )\n        # 1.2) CVNN-Layers\n        qml.templates.CVNeuralNetLayers(theta_1, phi_1, varphi_1, r, phi_r, theta_2, phi_2, varphi_2, a, phi_a, k,\n                                        wires=[i for i in range(n_qubits)] )\n        return [qml.expval(qml.NumberOperator(wires=i)) for i in range(num_outputs)]\n\n    # 2) make QLayer\n    qlayer = qml.qnn.KerasLayer(qnode, weight_shapes, output_dim=num_outputs)\n\n    return qlayer\n\nB) The Network (simplified version)\nimport tensorflow as tf\n\ninput = tf.keras.Input( shape=input_data_size )\nlayer_dense = tf.keras.layers.Dense(dense_layer_size)(input)\n\n# 1.Q) Generate Quantum Layer as output\n# 1.Q.0) Define parameters\nnum_qubits = 3  # number of Qbits used\nnum_qlayers= 1  # number of layers in Qlayer.\n\n# 1.Q.1) add additional dense layer to reduce dimension to reduce number of qubits required\nlayer_quant_in = tf.keras.layers.Dense( num_qubits )(layer_dense)\n\n# 1.Q.2) Load quantum layer\nfrom QLayers import get_CVQuantumLayer \nqlayer = get_CVQuantumLayer(num_qubits, output_data_size, num_qlayers )(layer_quant_in)\n\n# 3.2) Assemble Network\nmodel = tf.keras.Model(inputs=input_data, outputs=qlayer)\nmodel.compile(optimizer=tf.optimizers.Adam(), loss=tf.keras.losses.MeanSquaredError())", "link": "https://discuss.pennylane.ai//t/error-when-using-cvneuralnetlayers/2017/1"}, "1": {"author": "CatalinaAlbornoz", "date": "1657054831611", "content": "Hi @PhilippHS, welcome to the forum!\nI\u2019m having trouble to replicate your problem because I don\u2019t have access to the following variables: input_data, input_data_size, dense_layer_size, and output_data_size.\nIn the past I\u2019ve seen this problem happens sometimes with Keras and it can be solved by adding the following line to you code. tf.keras.backend.set_floatx('float64')\nPlease let me know if this works for you!", "link": "https://discuss.pennylane.ai//t/error-when-using-cvneuralnetlayers/2017/2"}, "2": {"author": "PhilippHS", "date": "1657112223713", "content": "Thank you very much @CatalinaAlbornoz using\ntf.keras.backend.set_floatx('float64')\n\nindeed solved the problem ", "link": "https://discuss.pennylane.ai//t/error-when-using-cvneuralnetlayers/2017/3"}, "3": {"author": "PhilippHS", "date": "1657200675203", "content": "Update: I accidentally found another solution to the problem. Using the device \u201cstrawberryfields.tf\u201d (instead of \u201cstrawberryfields.fock\u201d ) also solves the issue and seems to make the code a bit faster.", "link": "https://discuss.pennylane.ai//t/error-when-using-cvneuralnetlayers/2017/4"}, "4": {"author": "CatalinaAlbornoz", "date": "1657221388231", "content": "That\u2019s great to hear @PhilippHS!\nIndeed \u201cstrawberryfields.tf\u201d uses the TensorFlow interface (see more here 1) so by changing it to the fock device (\u201cstrawberryfields.fock\u201d) you no longer have the \u201cfloat64\u201d issue.", "link": "https://discuss.pennylane.ai//t/error-when-using-cvneuralnetlayers/2017/5"}, "5": {"author": "PhilippHS", "date": "1657007599298", "content": "Hello,\nI am working on an experiment trying different implementations of hybrid quantum neuronal networks: I have a larger classical Neuronal network and replace the final dense layer with different quantum layers.\nSo far, I tried the pennylane basic- and strong entanglement layer templates as well as a self-developed circuit. All of these worked very fine and generated good results. Now tried implementations of the CVNeuralNetLayers described in Killoran et.al. 2018. ( https://pennylane.readthedocs.io/en/stable/code/api/pennylane.CVNeuralNetLayers.html )\nHowever, using this layer I run into wired Tensorflow errors when trying to train the model:\ntensorflow.python.framework.errors_impl.InvalidArgumentError: cannot compute Mul as input #1(zero-based) was expected to be a float tensor but is a double tensor [Op:Mul]\nDoes anyone know what this error means or at least how I can avoid this?\nBest wishes,\nPhilipp\n\nHere my Implementation\nA) The Qnode\nimport pennylane as qml\nfrom pennylane import numpy as np\n\ndef get_CVQuantumLayer(  num_inputs, num_outputs,  n_layers=1, device=\"strawberryfields.fock\" , cutoff_dim=10):\n\n    n_qubits = num_inputs\n    if num_outputs>n_qubits:\n        raise ValueError(\"Number of output measurements can not be larger then number of Q-Bits\")\n\n    # 0) Initialisations\n    # 0.1) define device\n    dev = qml.device( device , wires=n_qubits , cutoff_dim=cutoff_dim )\n\n    # 0.2) Define weight shapes (following Killoran et.al. 2018 )\n    L = n_layers\n    M = n_qubits\n    K = int( M/2*(M-1) )\n    weight_shapes = {'theta_1':(L,K), 'phi_1':(L,K), 'varphi_1':(L,M), 'r':(L,M), 'phi_r':(L,M), 'theta_2':(L,K), 'phi_2': (L,K), 'varphi_2':(L,M), 'a':(L,M), 'phi_a':(L,M), 'k':(L,M) }\n\n    #  1) Define QNode to build quantum layer \n    @qml.qnode(dev,interface='tf')\n    def qnode(inputs, theta_1, phi_1, varphi_1, r, phi_r, theta_2, phi_2, varphi_2, a, phi_a, k):\n    # 1.1) Squeezing Embedding\n    qml.templates.SqueezingEmbedding(inputs, wires=range(n_qubits) )\n        # 1.2) CVNN-Layers\n        qml.templates.CVNeuralNetLayers(theta_1, phi_1, varphi_1, r, phi_r, theta_2, phi_2, varphi_2, a, phi_a, k,\n                                        wires=[i for i in range(n_qubits)] )\n        return [qml.expval(qml.NumberOperator(wires=i)) for i in range(num_outputs)]\n\n    # 2) make QLayer\n    qlayer = qml.qnn.KerasLayer(qnode, weight_shapes, output_dim=num_outputs)\n\n    return qlayer\n\nB) The Network (simplified version)\nimport tensorflow as tf\n\ninput = tf.keras.Input( shape=input_data_size )\nlayer_dense = tf.keras.layers.Dense(dense_layer_size)(input)\n\n# 1.Q) Generate Quantum Layer as output\n# 1.Q.0) Define parameters\nnum_qubits = 3  # number of Qbits used\nnum_qlayers= 1  # number of layers in Qlayer.\n\n# 1.Q.1) add additional dense layer to reduce dimension to reduce number of qubits required\nlayer_quant_in = tf.keras.layers.Dense( num_qubits )(layer_dense)\n\n# 1.Q.2) Load quantum layer\nfrom QLayers import get_CVQuantumLayer \nqlayer = get_CVQuantumLayer(num_qubits, output_data_size, num_qlayers )(layer_quant_in)\n\n# 3.2) Assemble Network\nmodel = tf.keras.Model(inputs=input_data, outputs=qlayer)\nmodel.compile(optimizer=tf.optimizers.Adam(), loss=tf.keras.losses.MeanSquaredError())", "link": "https://discuss.pennylane.ai//t/error-when-using-cvneuralnetlayers/2017/6"}}