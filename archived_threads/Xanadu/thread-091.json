{"0": {"author": "Benjamin_Gregory", "date": "1570222390650", "content": "I am trying to use the Interferometer gate in a qnode running on the strawberry fields.fock device but I\u2019m getting an error \u201cGate Interferometer not supported on device strawberryfields.fock\u201d\nInterferometer is within the pennylane.ops.cv module and is supposed to be compatible. Any ideas why this will never work or is  there a clever workaround. I\u2019m really interested in implementing an arbitrary unitary with trainable elements and Interferometer seemed the most elegant way.", "link": "https://discuss.pennylane.ai//t/interferometer-compatibility-with-sf-device/239/1"}, "1": {"author": "josh", "date": "1570244616658", "content": "Hi @Benjamin_Gregory! That is odd, as far as I can tell the Interferometer gate should work with strawberryfields.fock.\nDo you have a minimal (non)-working code example you could share?", "link": "https://discuss.pennylane.ai//t/interferometer-compatibility-with-sf-device/239/2"}, "2": {"author": "Benjamin_Gregory", "date": "1570487924569", "content": "import tensorflow as tf\nimport pennylane as qml\nfrom pennylane import numpy as np\nimport pennylane.ops.cv as sf\n\n#import tensorflow.contrib.eager as tfe\n#tf.enable_eager_execution()\n\n\nM = int(5)  #modenumber\nK = int(M*(M-1)/2)\nallmodes =list(range(M))\n\nGBS_dev = qml.device(\"strawberryfields.fock\", wires= M, cutoff_dim=10)\n\ntheta = np.random.uniform(0, 2*np.pi, K)\nphi = np.random.uniform(0, 2*np.pi, K)\ninput_squeeze = .4*np.pi\n\n#define device, squeezing first and then interferometer\n@qml.qnode(GBS_dev)\ndef device(theta, input_squeeze):\n    qml.Squeezing(1, input_squeeze, wires = 1)\n    qml.Interferometer(theta, wires = [0,1])\n     return qml.expval(qml.NumberOperator(0))\n    \n\ndevice(theta, input_squeeze)\n", "link": "https://discuss.pennylane.ai//t/interferometer-compatibility-with-sf-device/239/3"}, "3": {"author": "josh", "date": "1570490036313", "content": "Hi @Benjamin_Gregory, I had a look through your code, and you\u2019re right, qml.Interferometer is currently not working with strawberryfields.fock. I\u2019ll make a pull request on GitHub to fix that.\nHowever, to train an arbitrary interferometer, you probably don\u2019t want this operation. Note that we have two similar operations:\n\n\nqml.Interferometer(U, wires): accepts a numeric unitary matrix, determining a fixed interferometer.\n\n\nqml.templates.layers.Interferometer(theta, phi, varphi, wires): accepts an array of parameters theta, phi, and varphi, and creates a mesh of beamsplitters and rotation gates for applying a parametrized unitary.\n\n\nIn this case, it is probably the latter function you want. Check out the documentation 2 for more details on this function and its arguments.\n\nHere is a quick example using the Interferometer layer template:\nimport numpy as np\nimport pennylane as qml\nfrom pennylane.templates.layers import Interferometer\nfrom pennylane.init import interferometer_uniform\n\nimport tensorflow as tf\nimport tensorflow.contrib.eager as tfe\ntf.enable_eager_execution()\n\nM = 5\n\nGBS_dev = qml.device(\"strawberryfields.gaussian\", wires=M)\n\n@qml.qnode(GBS_dev, interface=\"tf\")\ndef device(params, input_squeeze):\n    # get beamsplitter angles\n    theta = params[:M*(M-1)//2]\n    # get beamsplitter phases\n    phi = params[M*(M-1)//2:2*M*(M-1)//2]\n    # get local rotations\n    varphi = params[-M:]\n\n    for w in range(M):\n        qml.Squeezing(1, input_squeeze, wires=w)\n\n    Interferometer(theta, phi, varphi, wires=range(M))\n\n    return [qml.expval(qml.NumberOperator(i)) for i in range(M)]\n\ninput_squeeze = 0.4*np.pi\nparams = tfe.Variable(np.concatenate(interferometer_uniform(M)))\n\nprint(device(params, input_squeeze))\n", "link": "https://discuss.pennylane.ai//t/interferometer-compatibility-with-sf-device/239/4"}, "4": {"author": "Benjamin_Gregory", "date": "1570731318881", "content": "Hi @josh\nthanks for your help\nI am having two problems with your suggestion\n\nNumberOperator not supported with sf.gaussian or sf.fock device\ntf.Variable object is not iterable\n\nalso is there a reason you switched to sf.gaussian over sf.fock device?", "link": "https://discuss.pennylane.ai//t/interferometer-compatibility-with-sf-device/239/5"}, "5": {"author": "Benjamin_Gregory", "date": "1571260157167", "content": "Still not able to get NumberOperator to run with strawberry fields.gaussian or strawberry fields.fock devices. I have tried using other related functions MeanPhoton, mean_photon, NumberState etc.\nI can only get NumberOperator to work with the default.gaussian device\ndev.observables\n{\u2018Homodyne\u2019, \u2018Identity\u2019, \u2018MeanPhoton\u2019, \u2018NumberState\u2019, \u2018P\u2019, \u2018PolyXP\u2019, \u2018X\u2019}\nAll the other observables work except MeanPhoton and NumberState", "link": "https://discuss.pennylane.ai//t/interferometer-compatibility-with-sf-device/239/6"}, "6": {"author": "josh", "date": "1571261796740", "content": "Hi @Benjamin_Gregory, just following up on some of your questions:\n\nNumberOperator not supported with sf.gaussian or sf.fock device\n\nAh, that\u2019s good to know! We will release a bugfix version of PennyLane-SF at the end of this week, so it will include that fix (and allow NumberOperator to work on both the Fock and Gaussian devices).\n\ntf.Variable object is not iterable\n\nUnfortunately I can\u2019t recreate this error. Can I ask what version of PennyLane and TensorFlow you are using?\nWe have been working internally on updating PennyLane to work with TensorFlow 2.0. This will be coming out at the end of this week (at the same time as the new plugin releases), and perhaps might solve the issue.\n\nalso is there a reason you switched to sf.gaussian over sf.fock device?\n\nSimply due to speed  Since the NumberOperator is a Gaussian observable (it is only second-order in the \\hat{x} and \\hat{p} operators), it is supported on both the Gaussian and Fock backends. If you were instead looking to train your optimizer using the probability (as opposed to the mean photon number), you can use the FockStateProjector observable, which is non-Gaussian.", "link": "https://discuss.pennylane.ai//t/interferometer-compatibility-with-sf-device/239/7"}, "7": {"author": "Benjamin_Gregory", "date": "1571264266596", "content": "import pennylane as qml\nfrom pennylane import numpy as np\nimport tensorflow as tf\nimport pennylane as qml\nfrom pennylane import numpy as np\nimport tensorflow as tf\n\nfrom pennylane.templates.layers import Interferometer\nfrom pennylane.init import interferometer_uniform\n\nimport tensorflow.contrib.eager as tfe\ntf.enable_eager_execution()\n\nM = 4\nwires = np.array(range(M))\nGBS_dev = qml.device(\"default.gaussian\", wires=M)\n\n@qml.qnode(GBS_dev, interface=\"tf\")\ndef device(params, input_squeeze):\n    theta = params[:M*(M-1)//2]\n    phi = params[M*(M-1)//2:2*M*(M-1)//2]\n    varphi = params[-M:]\n\n    for i in range(M):\n        qml.Squeezing(squeeze, 0, wires = i) \n        Interferometer(theta, phi, varphi, wires=range(M))\n        return qml.expval(qml.NumberOperator(0)) \nsqueeze = 2.0\nparams = tf.Variable(np.concatenate(interferometer_uniform(M)))\nprint(device(params, squeeze))\n\nThis is producing the tf.Variable error; if I remove it it works fine\ntf version 1.12.0\nqml version 0.5.0\nsf version 0.11.1\nThanks for your help I\u2019ll look for the bug fixes soon", "link": "https://discuss.pennylane.ai//t/interferometer-compatibility-with-sf-device/239/8"}, "8": {"author": "josh", "date": "1571357642965", "content": "Hi @Benjamin_Gregory, try changing the line\n@qml.qnode(GBS_dev, interface=\"tf\")\n\nto\n@qml.qnode(GBS_dev, interface=\"tfe\")\n\nIn the latest GitHub version of PennyLane we have changed the interface name to 'tf' alongside supporting TF 2.0. This version will be released at the end of this week.\nHowever, on PennyLane 0.5 (which you are using), it is still 'tfe' for now!", "link": "https://discuss.pennylane.ai//t/interferometer-compatibility-with-sf-device/239/9"}, "9": {"author": "josh", "date": "1571588666692", "content": "Hi @Benjamin_Gregory, just letting you know that the new releases of both PennyLane and PennyLane-SF v0.6 are now live \nIf you could have a go upgrading, and let me know if that fixes the original bug!", "link": "https://discuss.pennylane.ai//t/interferometer-compatibility-with-sf-device/239/10"}, "10": {"author": "josh", "date": "1571261796740", "content": "Hi @Benjamin_Gregory, just following up on some of your questions:\n\nNumberOperator not supported with sf.gaussian or sf.fock device\n\nAh, that\u2019s good to know! We will release a bugfix version of PennyLane-SF at the end of this week, so it will include that fix (and allow NumberOperator to work on both the Fock and Gaussian devices).\n\ntf.Variable object is not iterable\n\nUnfortunately I can\u2019t recreate this error. Can I ask what version of PennyLane and TensorFlow you are using?\nWe have been working internally on updating PennyLane to work with TensorFlow 2.0. This will be coming out at the end of this week (at the same time as the new plugin releases), and perhaps might solve the issue.\n\nalso is there a reason you switched to sf.gaussian over sf.fock device?\n\nSimply due to speed  Since the NumberOperator is a Gaussian observable (it is only second-order in the \\hat{x}^x and \\hat{p}^p operators), it is supported on both the Gaussian and Fock backends. If you were instead looking to train your optimizer using the probability (as opposed to the mean photon number), you can use the FockStateProjector observable, which is non-Gaussian.", "link": "https://discuss.pennylane.ai//t/interferometer-compatibility-with-sf-device/239/11"}}