{"0": {"author": "josh", "date": "1542728482326", "content": "From GitHub issue #130  1 by @chMoussa:\n\nHello,\nI want to write a CV classifier. To get probabilities in the context of binary classification,\nwe would need two expectation values. For instance, get the Fock probability of [0, 1] and [1, 0] outcomes and normalize like:\np0 = qml.expval.cv.NumberState(np.array([1, 0]), wires=[0, 1])\np1 =  qml.expval.cv.NumberState(np.array([0, 1]), wires=[0, 1])\nreturn p1 / (p0+p1 + 1e-10)\n\nHowever, I am not able to do so because :\nQuantumFunctionError: Each wire in the quantum circuit can only be measured once.\nTypeError: unsupported operand type(s) for +: 'NumberState' and 'NumberState'\n\nHow can we do so currently?\n", "link": "https://discuss.pennylane.ai//t/returning-numberstate-expectation-values-for-classification/30/1"}, "1": {"author": "josh", "date": "1542728538331", "content": "While QNodes can contain quantum functions that are constructed similarly to Python functions, there are some important restrictions:\n\nQuantum functions must only contain quantum operations, one operation per line, in the order in which they are to be applied,\nQuantum functions must return either a single or a tuple of expectation values, with one expectation value per wire,\nQuantum functions must not contain any classical processing.\n\nIn the example you have posted, this breaks the above restrictions in a few ways:\n\n\nAcross the two expectation values, wires 0 and wires 1 are measured twice. This is not allowed, as it does not map to physical hardware devices.\n\n\nreturn p1 / (p0+p1 + 1e-10) is also invalid, as it involves classical processing within the QNode.\n\n\nOne solution is to use a combination of two QNodes, one for each expectation value you wish to measure, alongside a classical node for post-processing:\n@qml.qnode(dev)\ndef p0(x):\n    # quantum operations\n    return qml.expval.cv.NumberState(np.array([1, 0]),wires=[0, 1])\n\n@qml.qnode(dev)\ndef p1(x):\n    # quantum operations\n    return qml.expval.cv.NumberState(np.array([0, 1]),wires=[0, 1])\n\ndef postprocessing(x):\n    return p1(x)/(p0(x) + p1(x) + 1e-10)\n", "link": "https://discuss.pennylane.ai//t/returning-numberstate-expectation-values-for-classification/30/2"}, "2": {"author": "josh", "date": "1542728482326", "content": "From GitHub issue #130  1 by @chMoussa:\n\nHello,\nI want to write a CV classifier. To get probabilities in the context of binary classification,\nwe would need two expectation values. For instance, get the Fock probability of [0, 1] and [1, 0] outcomes and normalize like:\np0 = qml.expval.cv.NumberState(np.array([1, 0]), wires=[0, 1])\np1 =  qml.expval.cv.NumberState(np.array([0, 1]), wires=[0, 1])\nreturn p1 / (p0+p1 + 1e-10)\n\nHowever, I am not able to do so because :\nQuantumFunctionError: Each wire in the quantum circuit can only be measured once.\nTypeError: unsupported operand type(s) for +: 'NumberState' and 'NumberState'\n\nHow can we do so currently?\n", "link": "https://discuss.pennylane.ai//t/returning-numberstate-expectation-values-for-classification/30/3"}}