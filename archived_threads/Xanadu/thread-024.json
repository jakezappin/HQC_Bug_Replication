{"0": {"author": "georgy", "date": "1624901140140", "content": "Greetings PennyLane team, I\u2019m trying to compute the gradient of a circuit using the Jax interface but my kernel dies. Could you help me why this happens? \nThis is an example that produces the issue:\nimport jax\nfrom jax import numpy as jnp\nimport pennylane as qml\nimport numpy as np\n\ndev = qml.device(\"default.qubit\", wires=2)\n\namplitude_0 = 1\namplitude_1 = 2\namplitude_2 = 3\namplitude_3 = 4\n\ninitial_state = jnp.array([amplitude_0, amplitude_1, amplitude_2, amplitude_3])\nnorm = jnp.linalg.norm(initial_state)\ninitial_state = initial_state / norm\n\n@qml.qnode(dev, diff_method=\"finite-diff\", interface=\"jax\")\ndef circuit(phi):\n    qml.QubitStateVector(initial_state, wires=[0, 1])\n    qml.IsingZZ(phi, wires=[0, 1])\n    return qml.expval(qml.PauliZ(0))\n\nphi = jnp.array(0.1)\n\nres = jax.grad(circuit, argnums=0)(phi)\n\nThank you!", "link": "https://discuss.pennylane.ai//t/dead-kernel-for-circuit-grad/1163/1"}, "1": {"author": "CatalinaAlbornoz", "date": "1625578628948", "content": "Hi @georgy! I\u2019m not sure why this is happening but I did manage to make it work by removing diff_method=\u201cfinite-diff\u201d and removing  (phi) in the last line. I will look deeper into why this is happening but for now you could work with the following code:\n---------------\nimport jax\nfrom jax import numpy as jnp\nimport pennylane as qml\nimport numpy as np\ndev = qml.device(\u201cdefault.qubit\u201d, wires=2)\namplitude_0 = 1\namplitude_1 = 2\namplitude_2 = 3\namplitude_3 = 4\ninitial_state = jnp.array([amplitude_0, amplitude_1, amplitude_2, amplitude_3])\nnorm = jnp.linalg.norm(initial_state)\ninitial_state = initial_state / norm\n@qml.qnode(dev, interface=\u201cjax\u201d)\ndef circuit(phi):\nqml.QubitStateVector(initial_state, wires=[0, 1])\nqml.IsingZZ(phi, wires=[0, 1])\nreturn qml.expval(qml.PauliZ(0))\nphi = jnp.array(0.1)\nres = jax.grad(circuit, argnums=0)\n-----------------\nPlease let me know if this helps and I\u2019ll let you know when I figure out the cause for this problem!", "link": "https://discuss.pennylane.ai//t/dead-kernel-for-circuit-grad/1163/2"}, "2": {"author": "georgy", "date": "1625844034092", "content": "Hello @CatalinaAlbornoz,\nOh thanks for taking a look! I tried your suggestion, but something weird is going on.  It indeed executed fine and wanted to compute with the result, but then getting another error:\njax.numpy.sum(res)\n\n~/anaconda3/lib/python3.8/site-packages/jax/_src/numpy/lax_numpy.py in _check_arraylike(fun_name, *args)\n    306                     if not _arraylike(arg))\n    307     msg = \"{} requires ndarray or scalar arguments, got {} at position {}.\"\n--> 308     raise TypeError(msg.format(fun_name, type(arg), pos))\n    309 \n    310 def _check_no_float0s(fun_name, *args):\n\nTypeError: sum requires ndarray or scalar arguments, got <class 'function'> at position 0.\n\nWhat\u2019s wrong here? ", "link": "https://discuss.pennylane.ai//t/dead-kernel-for-circuit-grad/1163/3"}, "3": {"author": "CatalinaAlbornoz", "date": "1626141609904", "content": "Hi @georgy! You\u2019re getting this error because res is in fact a function. It\u2019s the function that gives the gradient of your circuit! You can check this by using print(res).\nIn order to get the result you expect you need to evaluate the res function on a point. It\u2019s here that you include the phi.\nIf you try\nprint(f\"res(phi): {res(phi):0.3f}\")\nyou will get the result expected.\nYou can also use numpy to do operations on the result the way you did, but always remembering to evaluate the function first.\nIn your case your code would look like this:\nprint(jax.numpy.sum(res(phi)))\nPlease let me know if this answered your question!\nAlso, regarding the initial question of why the finite-difference method didn\u2019t work, I will ask someone from the team to take a deeper look at this.", "link": "https://discuss.pennylane.ai//t/dead-kernel-for-circuit-grad/1163/4"}, "4": {"author": "antalszava", "date": "1626188812429", "content": "Hi @georgy,\nThanks for the question!\nUnfortunately, when using the jax interface, we\u2019re experiencing issues for the parameter-shift and finite-diff differentiation methods. After some investigation, it looks that the stopped kernel is due to the lack of ability to specify jax arrays as trainable. We\u2019re still looking for a fitting solution.\nIn the meantime, the solution that @CatalinaAlbornoz suggested should work great. That will use the backprop differentiation method with the default.qubit.jax device.", "link": "https://discuss.pennylane.ai//t/dead-kernel-for-circuit-grad/1163/5"}, "5": {"author": "georgy", "date": "1626189253555", "content": "Hi @CatalinaAlbornoz and @antalszava,\nThank you for the answers! Oh, that makes sense. I\u2019ll then be using backpropagation for the time being. Thanks again!", "link": "https://discuss.pennylane.ai//t/dead-kernel-for-circuit-grad/1163/6"}, "6": {"author": "CatalinaAlbornoz", "date": "1626192477955", "content": "I\u2019m glad this helped @georgy! And thank you @antalszava for your answer. Enjoy using PennyLane!", "link": "https://discuss.pennylane.ai//t/dead-kernel-for-circuit-grad/1163/7"}, "7": {"author": "georgy", "date": "1624901140140", "content": "Greetings PennyLane team, I\u2019m trying to compute the gradient of a circuit using the Jax interface but my kernel dies. Could you help me why this happens? \nThis is an example that produces the issue:\nimport jax\nfrom jax import numpy as jnp\nimport pennylane as qml\nimport numpy as np\n\ndev = qml.device(\"default.qubit\", wires=2)\n\namplitude_0 = 1\namplitude_1 = 2\namplitude_2 = 3\namplitude_3 = 4\n\ninitial_state = jnp.array([amplitude_0, amplitude_1, amplitude_2, amplitude_3])\nnorm = jnp.linalg.norm(initial_state)\ninitial_state = initial_state / norm\n\n@qml.qnode(dev, diff_method=\"finite-diff\", interface=\"jax\")\ndef circuit(phi):\n    qml.QubitStateVector(initial_state, wires=[0, 1])\n    qml.IsingZZ(phi, wires=[0, 1])\n    return qml.expval(qml.PauliZ(0))\n\nphi = jnp.array(0.1)\n\nres = jax.grad(circuit, argnums=0)(phi)\n\nThank you!", "link": "https://discuss.pennylane.ai//t/dead-kernel-for-circuit-grad/1163/8"}}