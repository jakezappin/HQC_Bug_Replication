{"0": {"author": "Muhammad_Kashif", "date": "1651590837221", "content": "Hi there,\nHow can I set the weights of customized quantum layer (to be converted to keras layer later on), instead of using built-in templates.\nn_qubits = 6\ndev = qml.device(\"default.qubit\",  wires=n_qubits)\n\n@qml.qnode(dev, interface = \"tf\", diff_method=\"adjoint\")\ndef qnode(inputs, w1):\n    qml.templates.AmplitudeEmbedding(inputs, wires=range(n_qubits), pad_with=2,  normalize = True)\n    for i in range(n_qubits):\n        qml.RX(w1[i], i)\n    return [qml.expval(qml.PauliZ(wires=[i])) for i in range(n_qubits)]\n\nn_layers = 2\nweight_shapes = {\"w1\":(1,n_qubits)}\n\nwhen I convert the above qnode into Keras Layer following this 3 template and later train the model, I get the following error:\nInvalidArgumentError: Exception encountered when calling layer \"keras_layer_4\" (type KerasLayer).\n\nslice index 1 of dimension 0 out of bounds. [Op:StridedSlice] name: model_4/keras_layer_4/strided_slice/\n\nAny pointers to why is this the case would be appreciated\u2026\nThanks", "link": "https://discuss.pennylane.ai//t/weights-in-qunatum-layers/1876/1"}, "1": {"author": "CatalinaAlbornoz", "date": "1651698989688", "content": "Hi @Muhammad_Kashif, unfortunately I\u2019m not being able to reproduce your error. Could you please post a minimal non-working example of your code? Basically your full code but stripped off any elements that don\u2019t contribute to you getting this error. Please include your data too so that I can run it and try to see what the problem may be.", "link": "https://discuss.pennylane.ai//t/weights-in-qunatum-layers/1876/2"}, "2": {"author": "Muhammad_Kashif", "date": "1651707032296", "content": "Hi @CatalinaAlbornoz,\nThanks for looking into my query. Below is my code example:\nimports\nimport pennylane as qml\nfrom pennylane import numpy as np\nimport tensorflow as tf\nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import train_test_split\nfrom sklearn import datasets\n\ndataset loading\nx_train, x_test = datasets.load_digits().data, datasets.load_digits().target\nsplitting train and test data\nx_train, x_test, y_train, y_test = train_test_split(\n    x_train, x_test, test_size=0.25, random_state=42)\n\ncreating qnode\nn_qubits = 6\ndev = qml.device(\"default.qubit\", wires=n_qubits)\n@qml.qnode(dev)\ndef qnode(inputs, w1):\n    qml.templates.AmplitudeEmbedding(inputs, wires=range(n_qubits), pad_with=2,  normalize = True)\n\n    for i in range(n_qubits):\n        qml.RY(w1[i], wires = i)\n    return [qml.expval(qml.PauliZ(wires=i)) for i in range(n_qubits)]\n\ndefining weight shapes for quantum gates\nweight_shapes = {\"w1\": (1,6)}\nqnode to keras layer\nqlayer = qml.qnn.KerasLayer(qnode, weight_shapes, output_dim=n_qubits)\ncreating a hybrid NN\nclayer = tf.keras.layers.Dense(10, activation=\"softmax\")\nmodel = tf.keras.models.Sequential([qlayer, clayer])\n\ncompiling the NN model\nopt = tf.keras.optimizers.SGD(learning_rate=0.2)\nmodel.compile(opt, loss=\"sparse_categorical_crossentropy\", metrics=[\"accuracy\"])\n\nstart training the model\nfitting = model.fit(x_train, y_train, epochs=1, batch_size=16, validation_data=(x_test, y_test))\nThe above results in the following error:\nInvalidArgumentError: slice index 1 of dimension 0 out of bounds. [Op:StridedSlice] name: sequential_20/keras_layer_21/strided_slice/\nNow the issue I am facing here is regarding the weight_shapes. since I am using single parametrized gate RY means it should have a single dimension weight (as per my understanding) and hence the first argument in weight_shapes dictionary is 1 and since I am using 6 qubits the second argument is 6. which means 6 weights of dimension 1 (correct me if I am wrong)? but it gives the error mentioned above.\nIf I set the weight_shapes = {\"w1\": (1)}  and not use w1[i] in the qnode where I pass the weights to RY the code works fine but in that case, I think we are only training the 6 RY gates with same weights which is, in a way, same like training a single weight or single RY gate, whereas all 6 RY gates should have different weights, right?\nI hope I made my question clear. Any help would be appreciated.\nThanks", "link": "https://discuss.pennylane.ai//t/weights-in-qunatum-layers/1876/3"}, "3": {"author": "CatalinaAlbornoz", "date": "1651761918818", "content": "Hi @Muhammad_Kashif,\nI was able to reproduce your error now.  Your error is effectively in the weight shapes. You want it to be a vector of size 6. This means that the weights shape should be: weight_shapes = {\"w1\": (6)}\nThis has solved the problem on my end. Please let me know if it works for you too!", "link": "https://discuss.pennylane.ai//t/weights-in-qunatum-layers/1876/4"}, "4": {"author": "Muhammad_Kashif", "date": "1651779140997", "content": "Hi @CatalinaAlbornoz,\nIt works.\nThanks for the help\u2026!!\nI asked a query here 6 few days back. Any update on this so far?\nThanks", "link": "https://discuss.pennylane.ai//t/weights-in-qunatum-layers/1876/5"}, "5": {"author": "CatalinaAlbornoz", "date": "1652120530324", "content": "Hi @Muhammad_Kashif,\nI\u2019m glad this solved your issue!\nRegarding the other query I will give you an answer there.", "link": "https://discuss.pennylane.ai//t/weights-in-qunatum-layers/1876/6"}, "6": {"author": "Muhammad_Kashif", "date": "1651590837221", "content": "Hi there,\nHow can I set the weights of customized quantum layer (to be converted to keras layer later on), instead of using built-in templates.\nn_qubits = 6\ndev = qml.device(\"default.qubit\",  wires=n_qubits)\n\n@qml.qnode(dev, interface = \"tf\", diff_method=\"adjoint\")\ndef qnode(inputs, w1):\n    qml.templates.AmplitudeEmbedding(inputs, wires=range(n_qubits), pad_with=2,  normalize = True)\n    for i in range(n_qubits):\n        qml.RX(w1[i], i)\n    return [qml.expval(qml.PauliZ(wires=[i])) for i in range(n_qubits)]\n\nn_layers = 2\nweight_shapes = {\"w1\":(1,n_qubits)}\n\nwhen I convert the above qnode into Keras Layer following this 3 template and later train the model, I get the following error:\nInvalidArgumentError: Exception encountered when calling layer \"keras_layer_4\" (type KerasLayer).\n\nslice index 1 of dimension 0 out of bounds. [Op:StridedSlice] name: model_4/keras_layer_4/strided_slice/\n\nAny pointers to why is this the case would be appreciated\u2026\nThanks", "link": "https://discuss.pennylane.ai//t/weights-in-qunatum-layers/1876/7"}}