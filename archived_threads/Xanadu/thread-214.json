{"0": {"author": "NikSchet", "date": "1635867455734", "content": "Hello\nI have a Hybrid (classical - quantum) model for classification:\n1st layer is a classical layer with 6-neurons\n2nd layer is a standard quantum node with 6-qubits\n3d decision layer is a 2-neuron classical layer with a sigmoid function\nThe Quantum node is the same as in the tutorial \u201chttps://pennylane.ai/qml/demos/tutorial_qnn_module_tf.html 2\u201d but with 6 qubits.\nIt works fine but i would expect it not to work. Instead it makes sense to insert a classical layer of 6-neurons prior to the final decision layer.\nMy question is, should the output dimensions of the Qnode match the dimensions of the next classical layer? and if there is a mismatch how pennylane deals with it? thank you very much in advance!!!\n\n\n Solved by nathan in post #4 \n\n\n                Hi @NikSchet, \nThanks for providing a snippet of your code. From this, I can see that you have properly specified a 6-dimensional output_dim to your qml.qnn.KerasLayer, which matches the output delivered by your QNode. \nAs for any \u201cmagic\u201d on how things get connected together, this is actually all ha\u2026\n              \n", "link": "https://discuss.pennylane.ai//t/hybrid-model-mismatch-between-output-of-qnode-and-input-of-next-classical-layer/1453/1"}, "1": {"author": "nathan", "date": "1635883963546", "content": "Hi @NikSchet, thanks for the question \nIn general, you\u2019d likely want the output dimensions of the QNode to match the dimensions of the next classical layer. So if you had a final layer with 2 neurons, you would want to pass a two-dimensional tensor to that layer. You can create such a two-dimensional tensor from a QNode by having it return two measurements (e.g., expectation values of different observables). Note that it is not required that just because you have 6 qubits that the output of your QNode needs necessarily be 6-dimensional.\nIf you are able to provide a (condensed) version of your code, in particular showing the layer structure, it would potentially help us give a more specific answer ", "link": "https://discuss.pennylane.ai//t/hybrid-model-mismatch-between-output-of-qnode-and-input-of-next-classical-layer/1453/2"}, "2": {"author": "NikSchet", "date": "1635889395106", "content": "Ok let me try to provide the architecture:\nI use this as a Qnode:\n\n@qml.qnode(dev, interface=\"tf\", grad_method=\"backprop\")\ndef qnode(inputs, weights):\n    for i in range(blocks):\n        qml.templates.AngleEmbedding(inputs, wires=range(n_qubits))\n          qml.templates.StronglyEntanglingLayers(weights[i], wires=range(n_qubits)) #STRONGLY ENTANGLING LAYERS\n    return [qml.expval(qml.PauliZ(i)) for i in range(n_qubits)]\n\n\nThe layers are:\nclayer1 = tf.keras.layers.Dense(16, activation=\u201crelu\u201d)\nclayer2 = tf.keras.layers.Dense(6, activation=\u201crelu\u201d)\nqlayer = qml.qnn.KerasLayer(qnode, weight_shapes, 6)\nclayerD = tf.keras.layers.Dense(1, activation=\u201csigmoid\u201d)\nAnd the model is defined as:\nmodel = tf.keras.models.Sequential([clayer1,clayer2,qlayer,clayerD])\nSo dimensions are (16neurons,6neurons,6qubits,1neuron)\nIn this case can you explain the procedure in which the outcome of the qlayer (6 qubits) is imported into the decision layer (1 neuron) ?\nso your suggestion should be to use :\nmodel=tf.keras.models.Sequential([clayer1,clayer2,qlayer,clayer2,clayerD])\nThank you for the fast reply!", "link": "https://discuss.pennylane.ai//t/hybrid-model-mismatch-between-output-of-qnode-and-input-of-next-classical-layer/1453/3"}, "3": {"author": "nathan", "date": "1635965782326", "content": "Hi @NikSchet,\nThanks for providing a snippet of your code. From this, I can see that you have properly specified a 6-dimensional output_dim to your qml.qnn.KerasLayer, which matches the output delivered by your QNode.\nAs for any \u201cmagic\u201d on how things get connected together, this is actually all happening in Keras. From what I understand by looking at their docs, you only need to provide an output shape, and the input shape is inferred automatically. So in this case, when you do tf.keras.layers.Dense(1, activation=\"sigmoid\"), you are saying that you want a dense layer with a 1D output.\nThe necessary input shape is put together under the hood by Keras by looking at what layer proceeds clayerD in the input of Sequential (in your case, a layer with output dimension 6). So Keras infers that your final dense layer will have shape (6,1).\nmodel=tf.keras.models.Sequential([clayer1,clayer2,qlayer,clayer2,clayerD])\n\nNope, I didn\u2019t really suggest that. What you were already doing seems to be correct, even if you didn\u2019t quite know the details of what happens under the hood Solution1", "link": "https://discuss.pennylane.ai//t/hybrid-model-mismatch-between-output-of-qnode-and-input-of-next-classical-layer/1453/4"}, "4": {"author": "NikSchet", "date": "1635966930809", "content": "ok noted! Thank you very much for your time! much appreciated ", "link": "https://discuss.pennylane.ai//t/hybrid-model-mismatch-between-output-of-qnode-and-input-of-next-classical-layer/1453/5"}, "5": {"author": "NikSchet", "date": "1635867455734", "content": "Hello\nI have a Hybrid (classical - quantum) model for classification:\n1st layer is a classical layer with 6-neurons\n2nd layer is a standard quantum node with 6-qubits\n3d decision layer is a 2-neuron classical layer with a sigmoid function\nThe Quantum node is the same as in the tutorial \u201chttps://pennylane.ai/qml/demos/tutorial_qnn_module_tf.html 2\u201d but with 6 qubits.\nIt works fine but i would expect it not to work. Instead it makes sense to insert a classical layer of 6-neurons prior to the final decision layer.\nMy question is, should the output dimensions of the Qnode match the dimensions of the next classical layer? and if there is a mismatch how pennylane deals with it? thank you very much in advance!!!\n\n\n Solved by nathan in post #4 \n\n\n                Hi @NikSchet, \nThanks for providing a snippet of your code. From this, I can see that you have properly specified a 6-dimensional output_dim to your qml.qnn.KerasLayer, which matches the output delivered by your QNode. \nAs for any \u201cmagic\u201d on how things get connected together, this is actually all ha\u2026\n              \n", "link": "https://discuss.pennylane.ai//t/hybrid-model-mismatch-between-output-of-qnode-and-input-of-next-classical-layer/1453/6"}}