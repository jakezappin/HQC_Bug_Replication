{"0": {"author": "NikSchet", "date": "1604663467200", "content": "Hello all,\nSo, i have builded a 2 qubit Variational Classifier as in the demo. It runs very well with Iris datasets but when i try to import a different dataset from scikit although dataset has exactly the same format i get error\nTypeError: float() argument must be a string or a number, not 'ArrayBox'\nValueError: setting an array element with a sequence. \n\nThe code i used to generate dataset is the following\nfrom sklearn.datasets import make_blobs\nfrom matplotlib import pyplot\nfrom pandas import DataFrame\n# generate 2d classification dataset\nX, y = make_blobs(n_samples=100, centers=2, n_features=2)\n# scatter plot, dots colored by class value\ndf = DataFrame(dict(x=X[:,0], y=X[:,1], label=y))\n\ny[y == 0] = -1           # map zeroes to -1 \n\nXnorm = minmax_scale(X, feature_range=(0, np.pi))\nX_train_val, X_test, y_train_val, y_test = train_test_split(Xnorm, y, test_size=0.5)\n\nAny ideas on how to solve this? Thanks in advance!!\nComplete code in the next comment.", "link": "https://discuss.pennylane.ai//t/variational-classifier-error-when-using-scikit-dataset/661/1"}, "1": {"author": "NikSchet", "date": "1604663474787", "content": "from itertools import chain\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import minmax_scale\nfrom sklearn.datasets import make_blobs\nfrom matplotlib import pyplot\nfrom pandas import DataFrame\nimport pennylane as qml\nfrom pennylane.templates.embeddings import AngleEmbedding\nfrom pennylane.templates.layers import StronglyEntanglingLayers\nfrom pennylane.init import strong_ent_layers_uniform\nfrom pennylane.optimize import GradientDescentOptimizer\n\n# generate 2d classification dataset\nX, y = make_blobs(n_samples=100, centers=2, n_features=2)\n\n# scaling and splitting dataset\nXnorm = minmax_scale(X, feature_range=(0, np.pi))\nX_train_val, X_test, y_train_val, y_test = train_test_split(Xnorm, y, test_size=0.5)\n\n\n\n# number of qubits is equal to the number of features \nn_qubits = X.shape[1] \nn_qubits= 2\n# quantum device handle\ndev = qml.device(\"default.qubit\", wires=n_qubits)\n\n# quantum circuit\n@qml.qnode(dev)\ndef circuit(weights, x=None):\n    AngleEmbedding(x, wires = range(n_qubits))\n    StronglyEntanglingLayers(weights, wires = range(n_qubits))\n    return qml.expval(qml.PauliZ(0))\n\n# variational quantum classifier\ndef variational_classifier(theta, x=None):\n    weights = theta[0]\n    bias = theta[1]\n    return circuit(weights, x=x) + bias\n\ndef cost(theta, X, expectations):\n    e_predicted = \\\n        np.array([variational_classifier(theta, x=x) for x in X])\n    loss = np.mean((e_predicted - expectations)**2)    \n    return loss\n\n# number of quantum layers\nn_layers = 3\n\n# split into train and validation\nX_train, X_validation, y_train, y_validation = \\\n    train_test_split(X_train_val, y_train_val, test_size=0.50) \n\n# convert classes to expectations: 0 to -1, 1 to +1\ne_train = np.empty_like(y_train)\ne_train[y_train == -1] = -1\ne_train[y_train == 1] = +1\n\n# select learning batch size\nbatch_size = 5\n\n# calculate numbe of batches\nbatches = len(X_train) // batch_size\n\n# select number of epochs\nn_epochs = 10\n\n# draw random quantum node weights\ntheta_weights = strong_ent_layers_uniform(n_layers, n_qubits, seed=42)\ntheta_bias = 0.0\ntheta_init = (theta_weights, theta_bias) # initial weights\n\ntheta = theta_init\n\n\n# start of main learning loop\n# build the optimizer object\npennylane_opt = GradientDescentOptimizer()\n\n# split training data into batches\nX_batches = np.array_split(np.arange(len(X_train)), batches)\n\n\nfor it, batch_index in enumerate(chain(*(n_epochs * [X_batches]))):\n    # Update the weights by one optimizer step\n    batch_cost = \\\n        lambda theta: cost(theta, X_train[batch_index], e_train[batch_index])\n    theta = pennylane_opt.step(batch_cost, theta)\n     # end of learning loop\n\n    print(\n        \"Iter: {:5d} |  \"\n        \"\".format(it + 1))", "link": "https://discuss.pennylane.ai//t/variational-classifier-error-when-using-scikit-dataset/661/2"}, "2": {"author": "antalszava", "date": "1604703008566", "content": "Hi @NikSchet,\nIn PennyLane, internally we are using a custom ndarray class (called tensor) which subclasses numpy's ndarray. It is useful because differentiable parameters can be tracked easily (note the requires_grad attribute).\nIn order to use the custom tensor class internally, numpy has to be imported from PennyLane: from pennylane import numpy as np .\nThis should help out with your case, this was also a subtle difference between your code and the demo.2", "link": "https://discuss.pennylane.ai//t/variational-classifier-error-when-using-scikit-dataset/661/3"}, "3": {"author": "NikSchet", "date": "1604744292370", "content": "Thank you very much that fixed the problem.", "link": "https://discuss.pennylane.ai//t/variational-classifier-error-when-using-scikit-dataset/661/4"}, "4": {"author": "NikSchet", "date": "1604663467200", "content": "Hello all,\nSo, i have builded a 2 qubit Variational Classifier as in the demo. It runs very well with Iris datasets but when i try to import a different dataset from scikit although dataset has exactly the same format i get error\nTypeError: float() argument must be a string or a number, not 'ArrayBox'\nValueError: setting an array element with a sequence. \n\nThe code i used to generate dataset is the following\nfrom sklearn.datasets import make_blobs\nfrom matplotlib import pyplot\nfrom pandas import DataFrame\n# generate 2d classification dataset\nX, y = make_blobs(n_samples=100, centers=2, n_features=2)\n# scatter plot, dots colored by class value\ndf = DataFrame(dict(x=X[:,0], y=X[:,1], label=y))\n\ny[y == 0] = -1           # map zeroes to -1 \n\nXnorm = minmax_scale(X, feature_range=(0, np.pi))\nX_train_val, X_test, y_train_val, y_test = train_test_split(Xnorm, y, test_size=0.5)\n\nAny ideas on how to solve this? Thanks in advance!!\nComplete code in the next comment.", "link": "https://discuss.pennylane.ai//t/variational-classifier-error-when-using-scikit-dataset/661/5"}}