{"0": {"author": "Davide_Zuliani", "date": "1639991902285", "content": "Dear experts,\nI\u2019ve seen that the Qiskit framework allows simulating quantum circuits using GPUs. I was wondering if this is possible also in Pennylane through the pennylane-qiskit plugin.\nThank you very much ", "link": "https://discuss.pennylane.ai//t/gpu-usage-for-pennylane-qiskit/1567/1"}, "1": {"author": "mlxd", "date": "1640001976862", "content": "Hi @Davide_Zuliani Thanks for the question.\nIt is possible to enable the Aer GPU backend, though we currently cannot guarantee it will work across all use-cases.\nIf you would like to try it out with a supported device and let us know, following https://qiskit.org/documentation/tutorials/simulators/1_aer_provider.html#GPU-Simulation 23 ensure the qiskit-aer-gpu package is installed first. Then we can enable the device with:\ndev = qml.device(\"qiskit.aer\", wires=1)\ndev.backend.set_options(device='GPU')\n\nFeel free to get in touch if you need any additional assistance. Hope this helps!", "link": "https://discuss.pennylane.ai//t/gpu-usage-for-pennylane-qiskit/1567/2"}, "2": {"author": "Davide_Zuliani", "date": "1640007289802", "content": "Hi @mlxd, thank you for your quick answer \nSo I gave it a try but it doesn\u2019t seem to work (the GPU-util is always at 0%).\nHere is a simplified version of my code:\nimport os\nimport argparse\nimport qiskit\nimport pytorch_lightning as pl\nimport torch.nn as nn\nimport torch\nfrom torch.functional import F\nimport pennylane as qml\nfrom data_preprocessing import prepare_data\nimport torchmetrics\nimport pandas as pd\nimport numpy as np\n\nCUDA_VISIBLE_DEVICES=0\n\n#for noise\nfrom qiskit.providers.aer.noise import NoiseModel\nfrom qiskit import IBMQ, Aer\n\nparser = argparse.ArgumentParser()\nparser.add_argument(\"-c\", \"--city\", help=\"city name for IBM hardware\")\nargs = parser.parse_args()\n\nWantNoise = True\n\n\n#load ibm account\nIBMQ.enable_account('')\nprovider = IBMQ.get_provider(hub='')\ncity = args.city\n\nprint(\"hardware selected: \", \"ibmq_\"+city)\nprint(\"possible choices: sydney, toronto, guadalupe, lagos, santiago, manila, bogota, jakarta, quito, belem, lima\")\n\n\nn_qubits = 4\nn_QAOA_layers = 1\nn_SE_layers = 4\n\ndef circuit(inputs,QAOA_weights,SE_weights):\n    qml.templates.QAOAEmbedding(inputs,QAOA_weights,wires=range(n_qubits))\n    qml.templates.StronglyEntanglingLayers(weights=SE_weights,wires=range(n_qubits))\nreturn qml.expval(qml.PauliZ(0))\n\nclass MuonModel(pl.LightningModule):\ndef __init__(self):\n    super().__init__()\n    if WantNoise:\n        noise_model = NoiseModel.from_backend(provider.get_backend('ibmq_'+city))\n        tfdev = qml.device('qiskit.aer',wires=n_qubits,noise_model=noise_model)\n        tfdev.backend.set_options(device='GPU')\n    else:\n        tfdev = qml.device('qiskit.aer',wires=n_qubits)\n    \n    circ = qml.QNode(circuit,tfdev,interface='torch',diff_method='best')\n     \n    qlayer = qml.qnn.TorchLayer(circ,{'QAOA_weights': (n_QAOA_layers, 2*n_qubits) , 'SE_weights' : (n_SE_layers,n_qubits,3)})\n    self.training_acc = torchmetrics.Accuracy()\n    self.validation_acc = torchmetrics.Accuracy()\n    self.quantum = qlayer\n\ndef forward(self, x):\n    return 0.5*(self.quantum(x)+1)\n    #return self.output(self.quantum(x))\n\ndef training_step(self, batch, batch_idx):\n    x, y = batch\n    #print(y)\n    y_hat = self(x.float())\n    #print(y_hat)\n    loss = F.mse_loss(y_hat,y.float())\n    #print(list(self.parameters()))\n     \n    return {'loss' : loss, 'preds' : y_hat, 'target' : y}\n\ndef training_step_end(self, outputs):\n    self.training_acc(outputs['preds'], outputs['target'])\n    self.log('train_accuracy', self.training_acc,on_epoch=True,prog_bar=True)\n    self.log('train_loss',outputs['loss'],on_epoch=True,sync_dist=True)\n\n    return outputs\n\ndef training_epoch_end(self, outputs):\n    return None\n\ndef validation_step(self, batch, batch_idx):\n    x, y = batch\n    #print(y)\n    y_hat = self(x.float())\n    #print(y_hat)\n    loss = F.mse_loss(y_hat,y.float())\n    #print(list(self.parameters()))\n     \n    return {'loss' : loss, 'preds' : y_hat, 'target' : y}\n\ndef validation_step_end(self, outputs):\n    self.validation_acc(outputs['preds'], outputs['target'])\n    self.log('val_accuracy', self.validation_acc,on_epoch=True,prog_bar=True)\n    self.log('val_loss',outputs['loss'],on_epoch=True)\n\n    return outputs\n\ndef validation_epoch_end(self, outputs):\n    return None\n\n\ndef configure_optimizers(self):\n    return torch.optim.Adam(self.parameters(), lr=0.01)\n\n\nif __name__ == '__main__':\n\nmodel = MuonModel()\n\ntrainer = pl.Trainer(\n                    gpus=1,\n                    max_epochs=100,\n                    min_epochs=50)\n\nAs you can see I\u2019m embedding the quantum circuit into a TorchLayer and then I\u2019m using PyTorch Lightning to perform the training. Hope this helps in clarifying the issue, anyway thank you for your help ", "link": "https://discuss.pennylane.ai//t/gpu-usage-for-pennylane-qiskit/1567/3"}, "3": {"author": "mlxd", "date": "1640010847366", "content": "Thanks for the update @Davide_Zuliani\nI had trouble running your example code as given. Would it be possible to simplify it further to a minimum working example? That way we can help try to understand if something is going wrong in the pipeline on our side, and hopefully see if we can get it going.", "link": "https://discuss.pennylane.ai//t/gpu-usage-for-pennylane-qiskit/1567/4"}, "4": {"author": "jackaraz", "date": "1640532910012", "content": "Hi @mlxd I have a similar problem even after setting GPU for the device and installing the GPU support for qiskit pip install qiskit-aer-gpu I do not see any change in GPU usage but I do see a single CPU core running at 100%. Also, pennylane does not raise any error when I request GPU run without any GPU or when I don\u2019t have qiskit-aer-gpu installed. Is there another plugin in pennylane that I should install for GPU support?\nSystem settings:\n\nPennyLane-qiskit             v0.20.0\nqiskit                       v0.34.0\nqiskit-aer                   v0.10.1\nqiskit-aer-gpu               v0.10.1\nPennyLane                    v0.20.0\n\nCorrection: pennylane does give me an error if I don\u2019t have a GPU when I execute the circuit.\nThanks", "link": "https://discuss.pennylane.ai//t/gpu-usage-for-pennylane-qiskit/1567/5"}, "5": {"author": "Romain_Moyard", "date": "1641326474711", "content": "@jackaraz Thank you for your question, by using pip install qiskit-aer-gpu, you should overwrite the installation of qiskit-aer. There is more information about the package here 12. Maybe you could try to create a new environment and install it without the qiskit_aer. Could share a minimal example of what you are trying to run such I can potentially help you!", "link": "https://discuss.pennylane.ai//t/gpu-usage-for-pennylane-qiskit/1567/6"}, "6": {"author": "Davide_Zuliani", "date": "1639991902285", "content": "Dear experts,\nI\u2019ve seen that the Qiskit framework allows simulating quantum circuits using GPUs. I was wondering if this is possible also in Pennylane through the pennylane-qiskit plugin.\nThank you very much ", "link": "https://discuss.pennylane.ai//t/gpu-usage-for-pennylane-qiskit/1567/7"}}