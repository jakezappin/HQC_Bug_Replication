{"question": "\nI want ask how the params.npy variable were obtained? It would be great if you provide the codes for my better understanding.\nimport tensorflow as tf\nimport dask\n\nn_classes = 2 #label \nn_layers = 2\n# the first index is for the two models\nparams = torch.tensor(np.random.random((2, n_layers, n_wires, 3)), requires_grad=True)\niteration = 1\n\ndef softmax_ensemble(params, x_point=None):\n    results = [q(params, x=x_point) for q in qnodes]\n    softmax = torch.nn.functional.softmax(results, dim=1)\n    choice = torch.where(softmax == torch.max(softmax))[0][0]\n    return softmax[choice]\n\ndef cost(params, y_point, x_point=None):\n    return torch.sum(torch.abs(softmax_ensemble(params, x_point=x_point) - y_point))\n\ny_soft = torch.tensor(tf.one_hot(y_train, n_classes).numpy(), requires_grad=True)\n\nopt = torch.optim.Adam([params], lr = 0.1) #learning rate \n\nfor x_point, y_point in zip(x_train, y_soft):\n    opt.zero_grad()\n    c = cost(params, y_point=y_point, x_point=x_point)\n    c.backward()\n    opt.step()\n    if iteration % 10 == 0 and iteration > 0:\n        print(\"Iteration : \", iteration)\n    iteration += 1\n\noutput :\n\n", "answers": [], "comments": ["Please clarify your specific problem or provide additional details to highlight exactly what you need. As it's currently written, it's hard to tell exactly what you're asking."], "link": "https://quantumcomputing.stackexchange.com//questions/33137/ensemble-classification-with-rigetti-and-qiskit-devices-params-npy?r=SearchResults"}