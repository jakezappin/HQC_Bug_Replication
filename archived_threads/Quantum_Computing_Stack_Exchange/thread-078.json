{"question": "\nI am trying to compute the ground state energy of He-He using VQE. For this purpose I have utilized Qiskit and have written the following script:\nfrom qiskit.chemistry.drivers import PySCFDriver, UnitsType, Molecule\nfrom qiskit.chemistry.transformations import FermionicTransformation, FermionicQubitMappingType\nfrom qiskit.aqua.algorithms import NumPyMinimumEigensolver\nfrom qiskit import BasicAer\nfrom qiskit.aqua import QuantumInstance\nfrom qiskit.chemistry.algorithms.ground_state_solvers.minimum_eigensolver_factories import VQEUCCSDFactory\nfrom qiskit.aqua.algorithms import VQE\nfrom qiskit.circuit.library import TwoLocal\nfrom qiskit.chemistry.algorithms.ground_state_solvers import GroundStateEigensolver\n\nmolecule = Molecule(geometry=[['He', [0., 0., 0.]],\n                              ['He', [0., 0., 3.1]]],\n                     charge=0, multiplicity=1)\n\ndriver = PySCFDriver(molecule = molecule, unit=UnitsType.ANGSTROM, basis='sto3g')\ntransformation = FermionicTransformation(qubit_mapping=FermionicQubitMappingType.JORDAN_WIGNER)\n\nnumpy_solver = NumPyMinimumEigensolver()\nvqe_solver = VQEUCCSDFactory(QuantumInstance(BasicAer.get_backend('statevector_simulator')))\n\n\nnum_qubits = 4\ntl_circuit = TwoLocal(num_qubits, ['h', 'rx'], 'cz',\n                      entanglement='full', reps=3, parameter_prefix = 'y')\n\ntl_circuit.draw(output = 'mpl')\n\nanother_solver = VQE(var_form = tl_circuit,\n                     quantum_instance = QuantumInstance(BasicAer.get_backend('statevector_simulator')))\n\n\ncalc = GroundStateEigensolver(transformation, vqe_solver)\nres = calc.solve(driver)\n\nprint(transformation)\nprint(res)\n\nWhen I run it I get a following error message:\nTraceback (most recent call last):\n  File \"test_remove.py\", line 37, in <module>\n    res = calc.solve(driver)\n  File \"/Users/monica/miniconda3/lib/python3.7/site-packages/qiskit/chemistry/algorithms/ground_state_solvers/ground_state_eigensolver.py\", line 94, in solve\n    solver = self._solver.get_solver(self.transformation)\n  File \"/Users/monica/miniconda3/lib/python3.7/site-packages/qiskit/chemistry/algorithms/ground_state_solvers/minimum_eigensolver_factories/vqe_uccsd_factory.py\", line 212, in get_solver\n    same_spin_doubles=self._same_spin_doubles)\n  File \"/Users/monica/miniconda3/lib/python3.7/site-packages/qiskit/chemistry/components/variational_forms/uccsd.py\", line 153, in __init__\n    excitation_type=self._excitation_type,)\n  File \"/Users/monica/miniconda3/lib/python3.7/site-packages/qiskit/chemistry/components/variational_forms/uccsd.py\", line 509, in compute_excitation_lists\n    raise ValueError('No unoccupied orbitals')\nValueError: No unoccupied orbitals\n\nCan anyone explain to me what is going on? What am I doing wrong?\n", "answers": ["\nTry this:\nfrom qiskit import IBMQ\nfrom qiskit.aqua import QuantumInstance\nfrom qiskit.aqua.components.optimizers import COBYLA\nfrom qiskit.aqua.algorithms import VQE\nfrom qiskit.circuit.library import TwoLocal\nfrom qiskit.chemistry.qmolecule import QMolecule\nfrom qiskit.chemistry.drivers import PySCFDriver, UnitsType\nfrom qiskit.chemistry import FermionicOperator\nfrom qiskit.chemistry.core import Hamiltonian, TransformationType, QubitMappingType\n\nimport warnings\nwarnings.filterwarnings(\"ignore\",category=DeprecationWarning)\n\n\n##### Defining Molecular Structure #######\natom_structure = \"He 0. 0. 0.; He 3.1 0. 0\"  \n[unit, charge, spin, basis]= [UnitsType.ANGSTROM, 0, 0, 'sto3g'] \ndriver = PySCFDriver(atom= atom_structure, unit=unit,charge=charge, spin=spin, basis=basis)\nqmolecule = driver.run()\nferOp = Hamiltonian(transformation = TransformationType.FULL , \n                    qubit_mapping = QubitMappingType.PARITY,\n                    two_qubit_reduction = True,\n                    freeze_core = True, \n                    orbital_reduction = [ ], \n                    z2symmetry_reduction = None)\nqubitOp, aux_ops = ferOp.run(qmolecule)\nprint( qubitOp.print_details() )\n\n##### Exact Diagonalization Result ########\nfrom qiskit.aqua.algorithms import NumPyMinimumEigensolver\nexact_result = NumPyMinimumEigensolver(qubitOp).run() \nprint('THis is the exact result:', exact_result)\n\n\n##### VQE Result #######\ntl_circuit = TwoLocal(qubitOp.num_qubits, ['h', 'rx'], 'cz',\n                      entanglement='full', reps=3, parameter_prefix = 'y')\nprovider = IBMQ.load_account()\nbackend = provider.get_backend('ibmq_qasm_simulator')\nquantum_instance = QuantumInstance(backend,\n                                   shots = 8192,\n                                   initial_layout = None,\n                                   optimization_level = 3)  \n\noptimizer = COBYLA(maxiter= 100,tol=0.000000001)   \nvqe = VQE(qubitOp, tl_circuit, optimizer,initial_point= None)\nvqe_result = vqe.run(quantum_instance)\nvqe_result\n\nNote that by specifying freeze_core = True and z2symmetry_reduction = 'auto'  will help with reducing the number of qubits needed to solve your problem.\n"], "comments": ["Thank you! It helps a lot. I am wondering if it is possible to run a quantum simulation just for an atom. I made a modification of \"atom_structure\", and left only he, but it leads to errors. I assume that the circuit must be defined differently.  Do you have any experience with this?", "You are welcome. It should be possible, but you end up with 0 qubits because of the two_qubit_reduction method... but you can turn this off and having a two qubit system to play with. That is, you can just replace the ferOp line with this:                        ferOp = Hamiltonian(transformation = TransformationType.FULL , qubit_mapping = QubitMappingType.PARITY, two_qubit_reduction = False, freeze_core = True, orbital_reduction = [ ],  z2symmetry_reduction = None)", "The Ansatze (parametrized quantum circuit) will update itself so you don't have to worry make any changes there.", "It worked for the he atom! Thanks again! I tested the code for a hydrogen atom and I am getting an error from the pyscf side:File \"/Users/monica/miniconda3/lib/python3.7/site-packages/pyscf/ao2mo/incore.py\",line 65, in full   return general(eri_ao, (mo_coeff,)*4, verbose, compact)   File \"/Users/monica/miniconda3/lib/python3.7/site-packages/pyscf/ao2mo/incore.py\", line 125, in general     if eri_ao.size == nao**4: AttributeError: 'NoneType' object has no attribute 'size  Do you reproduce this issue? I also ran a test for Li, and I do not observe any problems. Not sure what is going on.", "@user14660 for problems with pyscf you might also try materials.stackexchange.com where they have a tag just for pyscf."], "link": "https://quantumcomputing.stackexchange.com//questions/15755/simulation-of-a-helium-molecule-using-qiskit"}