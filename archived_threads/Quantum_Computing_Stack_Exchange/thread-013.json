{"question": "\nI'm trying to implement BOBYQA optimizer for my VQE job. Though, I'm facing the below issue. Can anyone help in pointing out what the actual cause of this issue is and how to solve this:\n---------------------------------------------------------------------------\nIndexError                                Traceback (most recent call last)\nCell In [34], line 9\n      7 # Run the custom VQE function and monitor execution time\n      8 start = time()\n----> 9 result = custom_vqe.compute_minimum_eigenvalue(ham_16)\n     10 end = time()\n     12 print(result)\n\nCell In [32], line 30, in CustomVQE.compute_minimum_eigenvalue(self, operators, aux_operators)\n     27 x0 = np.pi/4 * np.random.rand(self._circuit.num_parameters)\n     29 # Run optimization\n---> 30 res = self._optimizer.minimize(objective, x0=x0, bounds=None)\n     32 # Populate VQE result\n     33 result = VQEResult()\n\nFile ~/venv/lib/python3.9/site-packages/qiskit/algorithms/optimizers/bobyqa.py:69, in BOBYQA.minimize(self, fun, x0, jac, bounds)\n     60 def minimize(\n     61     self,\n     62     fun: Callable[[POINT], float],\n   (...)\n     65     bounds: Optional[List[Tuple[float, float]]] = None,\n     66 ) -> OptimizerResult:\n     67     from skquant import opt as skq\n---> 69     res, history = skq.minimize(\n     70         func=fun,\n     71         x0=np.asarray(x0),\n     72         bounds=np.array(bounds),\n     73         budget=self._maxiter,\n     74         method=\"bobyqa\",\n     75     )\n     77     optimizer_result = OptimizerResult()\n     78     optimizer_result.x = res.optpar\n\nFile ~/venv/lib/python3.9/site-packages/skquant/opt/__init__.py:56, in minimize(func, x0, bounds, budget, method, options, **optkwds)\n     53     import skquant.opt._norbitR as optimizer\n     55 if optimizer is not None:\n---> 56     return optimizer.minimize(func, x0, bounds, budget, options, **optkwds)\n     58 raise RuntimeError('unknown optimizer \"%s\"' % method)\n\nFile ~/venv/lib/python3.9/site-packages/skquant/opt/_pybobyqa.py:27, in minimize(func, x0, bounds, budget, optin, **optkwds)\n     24 objfunc = ObjectiveFunction(func, {'simple_function' : True })\n     26 # massage bounds (force reshaping as bobyqa is picky)\n---> 27 lower = numpy.asarray(bounds[:,0]).reshape(-1)\n     28 upper = numpy.asarray(bounds[:,1]).reshape(-1)\n     30 x0 = numpy.asarray(x0).reshape(-1)\n\nIndexError: too many indices for array: array is 0-dimensional, but 2 were indexed\n\nBelow is my code for the VQE algorithm:\nclass CustomVQE(MinimumEigensolver):\n    \n    def __init__(self, estimator, circuit, optimizer, callback=None):\n        self._estimator = estimator\n        self._circuit = circuit\n        self._optimizer = optimizer\n        self._callback = callback\n        \n    def compute_minimum_eigenvalue(self, operators, aux_operators=None):\n                \n        # Define objective function to classically minimize over\n        def objective(x):\n            # Execute job with estimator primitive\n            job = self._estimator.run([self._circuit], [operators], [x])\n            # Get results from jobs\n            est_result = job.result()\n            # Get the measured energy value\n            value = est_result.values[0]\n            # Save result information using callback function\n            if self._callback is not None:\n                self._callback(value)\n            return value\n            \n        # Select an initial point for the ansatzs' parameters\n        x0 = np.pi/4 * np.random.rand(self._circuit.num_parameters)\n        \n        # Run optimization\n        res = self._optimizer.minimize(objective, x0=x0, bounds=None)\n        \n        # Populate VQE result\n        result = VQEResult()\n        result.cost_function_evals = res.nfev\n        result.eigenvalue = res.fun\n        result.optimal_parameters = res.x\n        return result\n\n", "answers": ["\nThe SciPy BOBYQA wrapper is expecting an array for bounds, not None. The array would be a tuple of lower and upper bound for each parameter. You can try passing [(None, None)] * len(x0) for bounds instead of None.\n"], "comments": [], "link": "https://quantumcomputing.stackexchange.com//questions/30226/bobyqa-optimizer-indexerror/30228?r=SearchResults#30228"}