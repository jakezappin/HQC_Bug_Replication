{"question": "\nI'm trying to build a simple web app for generating random numbers using IBMQ (Qiskit) and Streamlit. However, if there is no IBMQ saved account it should wait for the user to enter the API token and if the token is valid then proceed further and load IBMQ backends.\nBelow is the code which I have written:\nfilename.py\n# -*- coding: utf-8 -*-\n\"\"\"\nCreated on Sun Jan 31 01:30:00 2021\n\n@author: ShadabHussain\n\"\"\"\n\nimport warnings \nwarnings.filterwarnings(\"ignore\")\nimport requests\nimport streamlit as st\n\n# IBMQ\nfrom qiskit import QuantumRegister, ClassicalRegister, QuantumCircuit, execute, IBMQ\nfrom qiskit.tools.monitor import job_monitor\n\n\nst.set_page_config(page_title='QRNG', page_icon=None, layout='centered', initial_sidebar_state='auto')\n\nst.markdown(\"<h1 style='text-align: center; color: black;'>Quantum Random Number Generator</h1>\", unsafe_allow_html=True)\n\nquantum_computer = st.sidebar.selectbox(\"Select Quantum Computer Type\", ['IBMQ'])\n\nsubheader = \"using \"+ quantum_computer\nst.markdown(f\"<h1 style='text-align: center; color: black;'>{subheader}</h1>\", unsafe_allow_html=True)\n\n\ndef about(quantum_computer):\n    if quantum_computer == \"IBMQ\":\n        text = \"Qiskit is an open source SDK for working with quantum computers at the level of pulses, circuits and application modules. It accelerates the development of quantum applications by providing the complete set of tools needed for interacting with quantum systems and simulators.\"\n        link = 'https://qiskit.org/'\n        link_text = 'For Qiskit Documentation'\n    st.markdown(f\"<body style='text-align: center; color: black;'>{text}</body>\", unsafe_allow_html=True)\n    st.markdown(f\"<h4 align='center'> <a href={link}>{link_text}</a> </h4>\", unsafe_allow_html=True)\n        \n    \nabout(quantum_computer)\n\ndef ibmq_qrng(minimum, maximum):\n        \n    q = QuantumRegister(num_q, 'q')\n    c = ClassicalRegister(num_q, 'c')\n\n    circuit = QuantumCircuit(q, c)\n    circuit.h(q)  # Applies hadamard gate to all qubits\n    circuit.measure(q, c)  # Measures all qubits\n\n    job = execute(circuit, backend, shots=1)\n    counts = job.result().get_counts()\n    result = int(counts.most_frequent(), 2)\n    result1 = minimum + result % (maximum+1 - minimum)\n    return result1\n\n\n\nif quantum_computer == \"IBMQ\": \n    api_key = None\n    try:\n        IBMQ.load_account()\n    except Exception as e:\n        api_key = st.sidebar.text_input(\"Enter IBMQ API Key\")\n        if api_key != None:\n            IBMQ.save_account(api_key, overwrite=True)\n            IBMQ.load_account()          \n    provider = IBMQ.get_provider(hub='ibm-q')\n    device = st.sidebar.selectbox(\"Select Quantum Device\", [str(each) for each in provider.backends()])\n    backend = provider.get_backend(device)\n    if device == \"ibmq_qasm_simulator\":\n        num_q = 32\n    else:\n        num_q = 5\n    minimum = st.sidebar.number_input(\"Minimum Random Number\", value=0)\n    maximum = st.sidebar.number_input(\"Maximum Random Number\", min_value=minimum+1, value=minimum+1)\n\n\nnum_rand_numbers = st.sidebar.number_input(\"Number of Random Numbers to be Generated\", min_value=1, value=1)\n\n            \ndef display_result(result1):\n    if 'result1' in locals():\n        st.markdown(f\"<h2 style='text-align: center; color: black;'>Sampling {num_rand_numbers} random number between {minimum} and {maximum}: {result1}</h2>\", unsafe_allow_html=True)\n    \n\n\nif st.sidebar.button(\"Generate Random Number\"):\n    if num_rand_numbers <1:\n        st.markdown(f\"<h3 style='text-align: center; color: black;'>Please enter number of random numbers to be generated 1 or greater then 1</h3>\", unsafe_allow_html=True)\n    else:\n        if quantum_computer == \"IBMQ\":\n            if num_rand_numbers==1:\n                result1 = ibmq_qrng(minimum, maximum)\n            else:\n                result1 = []\n                for i in range(num_rand_numbers):\n                    result1.append(ibmq_qrng(minimum, maximum))\n            display_result(result1)\nelse:\n    st.markdown(f\"<h3 style='text-align: center; color: black;'>Click on 'Generate Random Number' button</h3>\", unsafe_allow_html=True)\n\nFor running the above code you should have IBMQ API token (https://quantum-computing.ibm.com/account) and python installed on your system with the below dependencies:\npip install qiskit streamlit\n\nCommand to run the code:\nstreamlit run filename.py\n\nWhen I'm running the app, I'm getting the following error:\n\nIs there any better way of exception handling for qiskit and streamlit?\n", "answers": ["\nBy looking at the code, it seems the problem is in api_key != None. If api_key is the empty string (which is the case, based on the error), you try to save it. Probably you can change the check for something like not api_key. We talked about this in https://quantumcomputing.stackexchange.com/a/15919/1859\n"], "comments": ["From the error message, the exception is thrown when IBMQ.save_account is called. This method call happens outside your try-block. You may need to add another try-except for this statement as well.", "I\u2019m voting to close this question because the following 3 reasons: 1) it is a purely code question that belongs to stackoverflow.com/questions/tagged/qiskit ; 2) OP made no effort to extract the minimal problematic part; 3) Duplicated, since OP already asked this question in quantumcomputing.stackexchange.com/q/15910/1859", "@luciano just because SO has a qiskit tag doesn't mean qiskit questions have to go there. If you eant specific types of qiskit questions to go there as a QCSE policy then please try to gather support for that at QCSE Meta. It's also not a duplicate of the user's other question.", "it's exactly the same problem with the exactly same exception that can be solved in the exactly same way! At least the previous one was a minimum failing example. We can discuss point 1, no problem. Even two 2, sure. But 3 fully applies!", "@luciano its not exactly the same problem, the exception raised is the same here but the way streamlit behaves is different, as the streamlit text_input option doesn't wait for the input and it moves to the next block of coding coz of which exception is not getting handled here in a better way. Also, the solution which you suggested before of running the loop 3 times for handling exception was not very much ideal for exception handling, I was looking for a better way but maybe coz of limitation with Qiskit we are not able to do it", "However in the case of Python, if we are taking input from the user, the control will first wait for the user input before moving to the next block of code"], "link": "https://quantumcomputing.stackexchange.com//questions/16028/handle-qiskit-exception-while-loading-ibmq-account-using-streamlit?r=SearchResults"}