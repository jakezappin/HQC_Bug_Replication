{"question": "\nI'm trying to deploy a simple Quantum App written using Python on Heroku Server which is also using Microsoft's Q#, but getting the below error:\nAttributeError: module 'qsharp' has no attribute 'clients'\nTraceback:\nFile \"/app/.heroku/python/lib/python3.6/site-packages/streamlit/script_runner.py\", line 332, in _run_script\n    exec(code, module.__dict__)\nFile \"/app/qrng_final.py\", line 18, in <module>\n    import qsharp\nFile \"/app/.heroku/python/lib/python3.6/site-packages/qsharp/__init__.py\", line 123, in <module>\n    client = _start_client()\nFile \"/app/.heroku/python/lib/python3.6/site-packages/qsharp/clients/__init__.py\", line 31, in _start_client\n    client = qsharp.clients.iqsharp.IQSharpClient()\n\nLog from the docker image:\novyan@7ca97f8365fb: /appjovyan@7ca97f8365fb:/app$ ls\nDockerfile  Operation.qs  README.md  qrng_final.py     runtime.txt\nLICENSE     Procfile      obj        requirements.txt  setup.sh\novyan@7ca97f8365fb: /appjovyan@7ca97f8365fb:/app$ ls $HOME/.local/bin\nbase58     f2py3         pip3             pybind11-config  virtualenv\ncygdb      f2py3.7       pip3.7           sample           virtualenv-clone\ncython     get_objgraph  pipenv           streamlit        watchmedo\ncythonize  isympy        pipenv-resolver  streamlit.cmd\nf2py       pip           plasma_store     undill\novyan@7ca97f8365fb: /appjovyan@7ca97f8365fb:/app$ ls $HOME/.local/binls $HOME/.local/bin $HOME/.local/bin $HOME/.local/binc $HOME/.local/bind $HOME/.local/bin $HOME/.local/bin$HOME/.local/bin\novyan@7ca97f8365fb: ~/.local/binjovyan@7ca97f8365fb:~/.local/bin$ ls streamlit\nstreamlit\novyan@7ca97f8365fb: ~/.local/binjovyan@7ca97f8365fb:~/.local/bin$ ls streamlit/streamltit\nls: cannot access 'streamlit/streamlit': Not a directory\novyan@7ca97f8365fb: ~/.local/binjovyan@7ca97f8365fb:~/.local/bin$ ls streamlit/streamlit streamlit/streamlit streamlit/streamlitc streamlit/streamlita streamlit/streamlitt streamlit/streamlit\ncat: streamlit/streamlit: Not a directory\novyan@7ca97f8365fb: ~/.local/binjovyan@7ca97f8365fb:~/.local/bin$ cat steeamlit\n#!/usr/local/bin/python\n# -*- coding: utf-8 -*-\nimport re\nimport sys\nfrom streamlit.cli import main\nif __name__ == '__main__':\n    sys.argv[0] = re.sub(r'(-script\\.pyw|\\.exe)?$', '', sys.argv[0])\nsys.exit(main())\novyan@7ca97f8365fb: ~/.local/binjovyan@7ca97f8365fb:~/.local/bin$ cd ..\novyan@7ca97f8365fb: ~/.localjovyan@7ca97f8365fb:~/.local$ vfcf f ..cd /app\novyan@7ca97f8365fb: /appjovyan@7ca97f8365fb:/app$ ls\nDockerfile  Operation.qs  README.md  qrng_final.py     runtime.txt\nLICENSE     Procfile      obj        requirements.txt  setup.sh\novyan@7ca97f8365fb: /appjovyan@7ca97f8365fb:/app$ $HOME/.local/bin/streamlit run qrng_final.py \n2021-02-06 23:56:11.279 \nWarning: the config option 'server.enableCORS=false' is not compatible with 'server.enableXsrfProtection=true'.\nAs a result, 'server.enableCORS' is being overridden to 'true'.\n\nMore information:\nIn order to protect against CSRF attacks, we send a cookie with each request.\nTo do so, we must specify allowable origins, which places a restriction on\ncross-origin resource sharing.\n\nIf cross origin resource sharing is required, please disable server.enableXsrfProtection.\n            \n2021-02-06 23:56:13.041 \nWarning: the config option 'server.enableCORS=false' is not compatible with 'server.enableXsrfProtection=true'.\nAs a result, 'server.enableCORS' is being overridden to 'true'.\n\nMore information:\nIn order to protect against CSRF attacks, we send a cookie with each request.\nTo do so, we must specify allowable origins, which places a restriction on\ncross-origin resource sharing.\n\nIf cross origin resource sharing is required, please disable server.enableXsrfProtection.\n            \n\n  You can now view your Streamlit app in your browser.\n\n  Network URL: http://172.17.0.2:8501\n  External URL: http://106.51.241.244:8501\n\n/home/jovyan/.local/lib/python3.7/site-packages/qiskit/quantum_info/operators/pauli.py:107: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.\nDeprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n  z = np.zeros(len(label), dtype=np.bool)\n/home/jovyan/.local/lib/python3.7/site-packages/qiskit/quantum_info/operators/pauli.py:108: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.\nDeprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n  x = np.zeros(len(label), dtype=np.bool)\n/home/jovyan/.local/lib/python3.7/site-packages/qiskit/quantum_info/operators/pauli.py:30: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.\nDeprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n  arr = np.asarray(arr).astype(np.bool)\n/home/jovyan/.local/lib/python3.7/site-packages/qiskit/quantum_info/operators/pauli.py:30: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.\nDeprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n  arr = np.asarray(arr).astype(np.bool)\n/home/jovyan/.local/lib/python3.7/site-packages/qiskit/quantum_info/operators/pauli.py:107: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.\nDeprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n  z = np.zeros(len(label), dtype=np.bool)\n/home/jovyan/.local/lib/python3.7/site-packages/qiskit/quantum_info/operators/pauli.py:108: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.\nDeprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n  x = np.zeros(len(label), dtype=np.bool)\n/home/jovyan/.local/lib/python3.7/site-packages/qiskit/quantum_info/operators/pauli.py:30: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.\nDeprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n  arr = np.asarray(arr).astype(np.bool)\n/home/jovyan/.local/lib/python3.7/site-packages/qiskit/quantum_info/operators/pauli.py:30: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.\nDeprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n  arr = np.asarray(arr).astype(np.bool)\n/home/jovyan/.local/lib/python3.7/site-packages/qiskit/quantum_info/operators/pauli.py:107: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.\nDeprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n  z = np.zeros(len(label), dtype=np.bool)\n/home/jovyan/.local/lib/python3.7/site-packages/qiskit/quantum_info/operators/pauli.py:108: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.\nDeprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n  x = np.zeros(len(label), dtype=np.bool)\n/home/jovyan/.local/lib/python3.7/site-packages/qiskit/quantum_info/operators/pauli.py:30: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.\nDeprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n  arr = np.asarray(arr).astype(np.bool)\n/home/jovyan/.local/lib/python3.7/site-packages/qiskit/quantum_info/operators/pauli.py:30: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.\nDeprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n  arr = np.asarray(arr).astype(np.bool)\n/home/jovyan/.local/lib/python3.7/site-packages/qiskit/quantum_info/operators/pauli.py:107: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.\nDeprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n  z = np.zeros(len(label), dtype=np.bool)\n/home/jovyan/.local/lib/python3.7/site-packages/qiskit/quantum_info/operators/pauli.py:108: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.\nDeprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n  x = np.zeros(len(label), dtype=np.bool)\n/home/jovyan/.local/lib/python3.7/site-packages/qiskit/quantum_info/operators/pauli.py:30: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.\nDeprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n  arr = np.asarray(arr).astype(np.bool)\n/home/jovyan/.local/lib/python3.7/site-packages/qiskit/quantum_info/operators/pauli.py:30: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.\nDeprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n  arr = np.asarray(arr).astype(np.bool)\n2021-02-06 23:56:17.792 Starting IQ# kernel...\n2021-02-06 23:56:23.896 Exception while checking if IQ# is ready.\nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.7/site-packages/qsharp/clients/iqsharp.py\", line 97, in is_ready\n    result = self.component_versions(timeout=6)\n  File \"/usr/local/lib/python3.7/site-packages/qsharp/clients/iqsharp.py\", line 193, in component_versions\n    self._execute(\"%version\", output_hook=capture, _quiet_=True, **kwargs)\n  File \"/usr/local/lib/python3.7/site-packages/qsharp/clients/iqsharp.py\", line 270, in _execute\n    reply = self.kernel_client.execute_interactive(input, output_hook=_output_hook, **kwargs)\n  File \"/usr/local/lib/python3.7/site-packages/jupyter_client/blocking/client.py\", line 321, in execute_interactive\n    raise TimeoutError(\"Timeout waiting for output\")\nTimeoutError: Timeout waiting for output\nPreparing Q# environment...\n2021-02-06 23:56:27.619 Q# version\n{'iqsharp': LooseVersion ('0.15.2101126940'), 'Jupyter Core': LooseVersion ('1.5.0.0'), '.NET Runtime': LooseVersion ('.NETCoreApp,Version=v3.1')}\n\n\nI have already given Q#package name in requirements.txt but still not able to resolve it. Is there any solution around how can I install Q# binded with Python on any remote server?\n", "answers": ["\nI believe that Heroku does not currently support installing additional software, such as the IQ# kernel used by the qsharp Python package. That said, Heroku's documentation suggests that using Docker can allow for providing additional dependencies. The Quantum Development Kit is published along with a Docker image, iqsharp-base, that provides everything you need to use Q# and Python together within a Docker environment:\nFROM mcr.microsoft.com/quantum/iqsharp-base:0.15.2101125897\n\n"], "comments": ["Hey Chris, I tried Docker as well, but with this docker image I don't have access as a root user because of which not able to install other packages at the default location", "The iqsharp-base Docker image is designed for use with tools like mybinder.org which require running as non-root users, but that can be overridden by using the USER command in a Dockerfile that inherits FROM mcr.microsoft.com/quantum/iqsharp-base:0.15.2101125897. Alternatively, you can see the code we used to build that image at github.com/microsoft/iqsharp/blob/main/images/iqsharp-base/\u2026.", "I tried creating a Doker image using this file as well, but it's throwing some error at Line 97. Any changes you suggest in the below docker file which overrides the jovyan user and installs my dependencies as root user? github.com/shadab-entrepreneur/\u2026", "Also I have added logs from the docker image, see if you can help out", "I didn't see the logs, but looking at github.com/shadab-entrepreneur/\u2026, line 10 fails as the current user set by the FROM line is still jovyan. To override and get back to root, you need a USER root command to appear above the Docker commands that you want to run as root.", "I have added the User root and able to start streamlit server on Heroku, but Q# is throwing an error."], "link": "https://quantumcomputing.stackexchange.com//questions/15797/q-installation-on-heroku?r=SearchResults"}