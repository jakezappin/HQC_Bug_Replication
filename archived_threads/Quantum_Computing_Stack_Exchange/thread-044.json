{"question": "\n\"\"\"\nfrom qiskit.providers import aer\nfrom qiskit.circuit import QuantumCircuit,reset\n\ndef run_circuit(circuit:QuantumCircuit)\n  print(circuit)\n  simulator = aer.Aer.get_backend(\"statevector_simulator\")\n  result1 = simulator.run(circuit).result()\n  statevector1 = result1.get_statevector(circuit)\n  prob_vector1 = Statevector(statevector1).probabilities()\n  print(prob_vector1)\n  result2=simulator.run(circuit).result()\n  statevector2 = result2.get_statevector(circuit)\n  prob_vector2 = Statevector(statevector2).probabilities()\n  print(prob_vector2)\n\n\"\"\"\nThe code above is what I am using to run some simple circuit. See image of the circuit below.\n\nAs you can see from the print line after the circuit, the probability vector is mixed up for the same circuit when run twice. Does anyone know why this is happening? I am assuming it has something to do with the reset operation, as without it it works fine everytime. But is there a way to do the reset operation and not get this bug?\nThanks and Best Regards\nAP\nEdit with New Information:\nSo it seems that when you use the reset operation, rather than give you the new state vector, it causes the collapse of the state vector and gives full probability to a specific state. I have these images from the IBMQ lab that show what I am taking about. Does anyone know how to make it so that it gives the correct state vector and not the collapsed state?\n\n\n", "answers": ["\nReset instruction is composed of a mid-circuit measurement followed by an X-gate conditioned on the outcome of the measurement[1]. So, the collapse is inevitable due to this implicit measurement.\nIn your case, you will always get two state vectors, one for the case where the state after reset is |00\u27e9, and the other for the case where the state is |10\u27e9. Unless, of course, you prepared the state without non-unitary operations.\n", "\nIn run_circuit function you are printing probabilities 2 times may be i.e it is happening you can refactor your code as follow:\ndef run_circuit(circuit:QuantumCircuit)\n  print(circuit)\n  simulator = aer.Aer.get_backend(\"statevector_simulator\")\n  result1 = simulator.run(circuit).result()\n  statevector1 = result1.get_statevector(circuit)\n  prob_vector1 = Statevector(statevector1).probabilities()\n  return prob_vector1\n\n"], "comments": ["Hey Raghav, my question was more so with regards to why, when the circuit is run twice do I get different state vectors for the same circuit. Should the state-vector not be the same, as none of the operators are changing? and does this change have something to do with non-unitary nature of the reset qubit that I am not understanding or is it the specific implementation of the statevector_simulator that is causing this issue."], "link": "https://quantumcomputing.stackexchange.com//questions/33911/question-related-to-the-qiskit-statevector-simulator-which-returns-the-probabil?r=SearchResults"}