{"question": "\n\n\n\n\n\n\n\nClosed. This question is off-topic. It is not currently accepting answers.\n                                \n                            \n\n\n\n\n\n\n\n\n\n\n\n This question does not appear to be about quantum computing or quantum information, within the scope defined in the help center.\n\n\nClosed 2 years ago.\n\n\n\n\n\n\n\n                        Improve this question\n                    \n\n\n\nI want to use QAOAProgram from Qiskit in the following way:\nfrom qiskit_optimization.runtime import QAOAProgram\nfrom qiskit_optimization.converters import QuadraticProgramToQubo\nfrom qiskit_optimization.applications.max_cut import Maxcut\n\nmax_cut_quadr_program = Maxcut(graph).to_quadratic_program()\npauli, f = max_cut_quadr_program.to_ising()\n\noptimizer = {'name': 'SPSA',\n             'maxiter': 50}\nbackend = provider.get_backend('ibmq_qasm_simulator')\n\nruntime_qaoa = QAOAProgram(\n                         callback=None,\n                         optimizer=optimizer,\n                         initial_point=None,\n                         provider=provider,\n                         backend=backend,\n                         shots=8192,\n                         measurement_error_mitigation=True)\n\nruntime_result = runtime_qaoa.compute_minimum_eigenvalue(pauli)\n\n\nBut I got this error:\n\n---------------------------------------------------------------------------\nerror                                     Traceback (most recent call last)\n<ipython-input-40-1f2a3143b054> in <module>()\n     19                          measurement_error_mitigation=True)\n     20 \n---> 21 runtime_result = runtime_qaoa.compute_minimum_eigenvalue(pauli)\n\n10 frames\n/usr/local/lib/python3.7/dist-packages/qiskit_optimization/runtime/qaoa_program.py in compute_minimum_eigenvalue(self, operator, aux_operators)\n    158             mixer_operator=self.mixer,\n    159         )\n--> 160         return super().compute_minimum_eigenvalue(operator, aux_operators)\n\n/usr/local/lib/python3.7/dist-packages/qiskit_optimization/runtime/vqe_program.py in compute_minimum_eigenvalue(self, operator, aux_operators)\n    272             inputs=inputs,\n    273             options=options,\n--> 274             callback=self._wrap_vqe_callback(),\n    275         )\n    276         # print job ID if something goes wrong\n\n/usr/local/lib/python3.7/dist-packages/qiskit/providers/ibmq/runtime/ibm_runtime_service.py in run(self, program_id, options, inputs, callback, result_decoder)\n    233 \n    234         backend_name = options['backend_name']\n--> 235         params_str = json.dumps(inputs, cls=RuntimeEncoder)\n    236         result_decoder = result_decoder or ResultDecoder\n    237         response = self._api_client.program_run(program_id=program_id,\n\n/usr/lib/python3.7/json/__init__.py in dumps(obj, skipkeys, ensure_ascii, check_circular, allow_nan, cls, indent, separators, default, sort_keys, **kw)\n    236         check_circular=check_circular, allow_nan=allow_nan, indent=indent,\n    237         separators=separators, default=default, sort_keys=sort_keys,\n--> 238         **kw).encode(obj)\n    239 \n    240 \n\n/usr/lib/python3.7/json/encoder.py in encode(self, o)\n    197         # exceptions aren't as detailed.  The list call should be roughly\n    198         # equivalent to the PySequence_Fast that ''.join() would do.\n--> 199         chunks = self.iterencode(o, _one_shot=True)\n    200         if not isinstance(chunks, (list, tuple)):\n    201             chunks = list(chunks)\n\n/usr/lib/python3.7/json/encoder.py in iterencode(self, o, _one_shot)\n    255                 self.key_separator, self.item_separator, self.sort_keys,\n    256                 self.skipkeys, _one_shot)\n--> 257         return _iterencode(o, 0)\n    258 \n    259 def _make_iterencode(markers, _default, _encoder, _indent, _floatstr,\n\n/usr/local/lib/python3.7/dist-packages/qiskit/providers/ibmq/runtime/utils.py in default(self, obj)\n    127             value = _serialize_and_encode(\n    128                 data=obj,\n--> 129                 serializer=lambda buff, data: qpy_serialization.dump(data, buff)\n    130             )\n    131             return {'__type__': 'QuantumCircuit', '__value__': value}\n\n/usr/local/lib/python3.7/dist-packages/qiskit/providers/ibmq/runtime/utils.py in _serialize_and_encode(data, serializer, compress, **kwargs)\n     54     \"\"\"\n     55     buff = io.BytesIO()\n---> 56     serializer(buff, data, **kwargs)\n     57     buff.seek(0)\n     58     serialized_data = buff.read()\n\n/usr/local/lib/python3.7/dist-packages/qiskit/providers/ibmq/runtime/utils.py in <lambda>(buff, data)\n    127             value = _serialize_and_encode(\n    128                 data=obj,\n--> 129                 serializer=lambda buff, data: qpy_serialization.dump(data, buff)\n    130             )\n    131             return {'__type__': 'QuantumCircuit', '__value__': value}\n\n/usr/local/lib/python3.7/dist-packages/qiskit/circuit/qpy_serialization.py in dump(circuits, file_obj)\n    853     file_obj.write(header)\n    854     for circuit in circuits:\n--> 855         _write_circuit(file_obj, circuit)\n    856 \n    857 \n\n/usr/local/lib/python3.7/dist-packages/qiskit/circuit/qpy_serialization.py in _write_circuit(file_obj, circuit)\n    871         num_instructions=num_instructions,\n    872     )\n--> 873     header = struct.pack(HEADER_PACK, *header_raw)\n    874     file_obj.write(header)\n    875     file_obj.write(circuit_name)\n\nerror: required argument is not a float\n\n\nQiskit verison: 0.28\nWhat am I doing wrong?\nMy idea is that there is some issue  with my ansatz or PauliSumOp is not correct, but maybe someone has a better explanation.\n", "answers": ["\nI submitted an issue on GitHub here.\n"], "comments": ["Hello, I don't know why this doesn't work, but by downgrading to qiskit 0.27 I managed to get your code working. Maybe you could downgrade while the issue is solved? :)", "Hi @grafix, thanks for posting this! But I\u2019m voting to close this question because this is a technical Qiskit issue which should be posted as issue on GitHub, that gives your issue more visibility to the Qiskit team and we can cross-reference it more easily :)", "@Lena, you are right - with qiskit 0.27 it's working.", "All right, @Cryoris. I submitted an issue here.", "A PR to fix it is up already: github.com/Qiskit/qiskit-terra/pull/6792"], "link": "https://quantumcomputing.stackexchange.com//questions/18539/pack-header-error-when-using-qaoaprogram"}