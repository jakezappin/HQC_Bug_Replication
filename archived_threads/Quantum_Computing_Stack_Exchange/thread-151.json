{"question": "\nI'm trying to generate random numbers using IBMQ backends with the following code:\npip install qiskit_rng\nfrom qiskit_rng import Generator\n\nIBMQ.load_account()\nrng_provider = IBMQ.get_provider(hub='ibm-q', group='open', project='main')\nbackend = rng_provider.backends.ibmq_manila\n\ngenerator = Generator(backend=backend)\noutput = generator.sample(num_raw_bits=20001).block_until_ready()\nqiskit_raw = output.raw_bits\nprint(qiskit_raw)\n\nHowever, I get the following error:\n  Input In [3] in <cell line: 2>\n    from qiskit_rng import Generator\n  File /opt/conda/lib/python3.8/site-packages/qiskit_rng/__init__.py:52 in <module>\n    from .generator import Generator\n  File /opt/conda/lib/python3.8/site-packages/qiskit_rng/generator.py:35 in <module>\n    from qiskit.providers.basebackend import BaseBackend\nModuleNotFoundError: No module named 'qiskit.providers.basebackend'\n\nHow can I fix this error? My current version of terra is 0.21.2. Also, is there a way to recreate this process? It is my understanding that IBM uses the GHZ (Greenberger\u2013Horne\u2013Zeilinger) states and then measures them with random X- and Y-measurements. I would appreciate if someone can confirm that.\nThank you!\n", "answers": ["\nThe last qiskit-rng is 0.2.2 from January 2021. It is unmaintained since then and their github repo is archived. Based on their requirements.txt file:\nqiskit-ibmq-provider>=0.10\nqiskit-terra>=0.16.2\n\nYou can get exactly these with:\npip install \"qiskit-terra==0.16.2\"\npip install \"qiskit-ibmq-provider~=0.10\"\n\nIt should work after that.\n"], "comments": ["It does! Thank you! Is there currently a better way implemented by IBM to get some rng?", "Not that I'm aware of. If you have a strong use case for it, I would call the community on slack to consider writing and supporting one."], "link": "https://quantumcomputing.stackexchange.com//questions/28356/modulenotfounderror-when-running-qiskit-rng?r=SearchResults"}