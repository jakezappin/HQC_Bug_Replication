{"question": "\nThis link\nhttps://qiskit.org/documentation/machine-learning/stubs/qiskit_machine_learning.kernels.QuantumKernel.construct_circuit.html#qiskit_machine_learning.kernels.QuantumKernel.construct_circuit\ntells us that the circuit can be built automatically, but an error was found after using it, how can I solve it?\nfrom qiskit import BasicAer\nfrom qiskit.circuit.library import ZZFeatureMap\nfrom qiskit.utils import QuantumInstance, algorithm_globals\nfrom qiskit_machine_learning.algorithms import QSVC\nfrom qiskit_machine_learning.kernels import QuantumKernel\nseed = 12345\nX_data = np.array([[1,2,7,12],[3,7,7,11],[12,18,7,90]])\nY_data = np.array([[1,12,7,22],[3,71,7,111],[12,118,7,90]])\ny_train = np.array([12,5,9])\nprint(X_data.shape[0],X_data.shape[1])\nqbits = X_data.shape[0]\nansatz0 = ZZFeatureMap(feature_dimension=qbits, insert_barriers = True, name = 'Quantum Kernel',reps=1, parameter_prefix='x')\nansatz1 = ZZFeatureMap(feature_dimension=qbits, insert_barriers = True, name = 'Quantum Kernel',reps=1, parameter_prefix='y').inverse()\nqc = ansatz0.compose(ansatz1)\nqc.draw('mpl')\nQI = QuantumInstance(BasicAer.get_backend(\"qasm_simulator\"), shots=1024, seed_simulator=seed, seed_transpiler=seed)\nqk = QuantumKernel(feature_map=ansatz0, quantum_instance=QI)\nqc = qk.construct_circuit(x=X_data, y=Y_data, is_statevector_sim = False)\nqc.draw('mpl')\n\nOUT:\n3 4\n---------------------------------------------------------------------------\nCircuitError                              Traceback (most recent call last)\nInput In [323], in <cell line: 18>()\n     16 QI = QuantumInstance(BasicAer.get_backend(\"qasm_simulator\"), shots=1024, seed_simulator=seed, seed_transpiler=seed)\n     17 qk = QuantumKernel(feature_map=ansatz0, quantum_instance=QI)\n---> 18 qc = qk.construct_circuit(x=X_data, y=Y_data, is_statevector_sim = False)\n     19 qc.draw('mpl')\n\nFile d:\\miniconda3\\lib\\site-packages\\qiskit_machine_learning\\kernels\\quantum_kernel.py:317, in QuantumKernel.construct_circuit(self, x, y, measurement, is_statevector_sim)\n    314 qc = QuantumCircuit(q, c)\n    316 x_dict = dict(zip(self._feature_map.parameters, x))\n--> 317 psi_x = self._feature_map.assign_parameters(x_dict)\n    318 qc.append(psi_x.to_instruction(), qc.qubits)\n    320 if not is_statevector_sim:\n\nFile d:\\miniconda3\\lib\\site-packages\\qiskit\\circuit\\library\\n_local\\n_local.py:810, in NLocal.assign_parameters(self, parameters, inplace)\n    807 if not self._is_built:\n    808     self._build()\n--> 810 return super().assign_parameters(parameters, inplace=inplace)\n\nFile d:\\miniconda3\\lib\\site-packages\\qiskit\\circuit\\quantumcircuit.py:2663, in QuantumCircuit.assign_parameters(self, parameters, inplace)\n   2661     # replace the parameters with a new Parameter (\"substitute\") or numeric value (\"bind\")\n   2662     for parameter, value in unrolled_param_dict.items():\n-> 2663         bound_circuit._assign_parameter(parameter, value)\n   2664 else:\n   2665     if len(parameters) != self.num_parameters:\n\nFile d:\\miniconda3\\lib\\site-packages\\qiskit\\circuit\\quantumcircuit.py:2749, in QuantumCircuit._assign_parameter(self, parameter, value)\n   2747 # Normal ParameterExpression.\n   2748 if isinstance(assignee, ParameterExpression):\n-> 2749     new_param = assignee.assign(parameter, value)\n   2750     # if fully bound, validate\n   2751     if len(new_param.parameters) == 0:\n\nFile d:\\miniconda3\\lib\\site-packages\\qiskit\\circuit\\parameterexpression.py:91, in ParameterExpression.assign(self, parameter, value)\n     89 if isinstance(value, ParameterExpression):\n     90     return self.subs({parameter: value})\n---> 91 return self.bind({parameter: value})\n\nFile d:\\miniconda3\\lib\\site-packages\\qiskit\\circuit\\parameterexpression.py:113, in ParameterExpression.bind(self, parameter_values)\n     94 \"\"\"Binds the provided set of parameters to their corresponding values.\n     95 \n     96 Args:\n   (...)\n    109     parameter_values.\n    110 \"\"\"\n    112 self._raise_if_passed_unknown_parameters(parameter_values.keys())\n--> 113 self._raise_if_passed_nan(parameter_values)\n    115 symbol_values = {}\n    116 for parameter, value in parameter_values.items():\n\nFile d:\\miniconda3\\lib\\site-packages\\qiskit\\circuit\\parameterexpression.py:207, in ParameterExpression._raise_if_passed_nan(self, parameter_values)\n    203 nan_parameter_values = {\n    204     p: v for p, v in parameter_values.items() if not isinstance(v, numbers.Number)\n    205 }\n    206 if nan_parameter_values:\n--> 207     raise CircuitError(\n    208         f\"Expression cannot bind non-numeric values ({nan_parameter_values})\"\n    209     )\n\nCircuitError: 'Expression cannot bind non-numeric values ({ParameterVectorElement(x[0]): array([ 1,  2,  7, 12])})'\n\n", "answers": ["\nSee QuantumKernel API Ref where construct_circuit takes a ParameterVector for x and y. You can see an instance of how it's used, when in the source it calls that as part of calculating the kernel\n"], "comments": ["Thanks for your suggestion, I'm looking for examples to achieve what I want, but it seems that there are too few demos like this", "There is a tutorial for QuantumKernel here qiskit.org/documentation/machine-learning/tutorials/\u2026 The construct circuit method was exposed since it has been the case that people often want to see the circuit(s) that get used under the covers - in normal use you would not have to call this, the tutorial for instance does not."], "link": "https://quantumcomputing.stackexchange.com//questions/28221/quantumkernel-construct-circuithow-to-automatically-build-a-quantum-kernel-circ?r=SearchResults"}