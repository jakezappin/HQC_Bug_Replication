{"question": "\nRecently I encountered a weird qiskit error which produces a pretty useless traceback. To replicate this error, I create a very simple circuit given below:\n\nWhen I run it on a simulator, I get an error whose traceback is at the bottom.\nCould anyone point out why this is happening?\nThe circuit above is produced with the following code:\n# Importing standard Qiskit libraries\nfrom qiskit import QuantumCircuit, execute, Aer, QuantumRegister, ClassicalRegister\nfrom qiskit.compiler import transpile, assemble\nfrom qiskit.tools.jupyter import *\nfrom qiskit.visualization import *\n\ndef create_controled_gate():\n    h_circuit = QuantumCircuit(1, name='H')\n    h_circuit.h(0)\n    gate = h_circuit.to_gate().control()\n    return gate\n\ncircuit = QuantumCircuit(2)\ncontrolled_gate = create_controled_gate()\ncircuit.append(controlled_gate, [0,1])\n\ncr = ClassicalRegister(2,'creg')\ncircuit.add_register(cr)\ncircuit.measure(range(2), range(2))\ncircuit.draw()\n\naer_sim = Aer.get_backend('aer_simulator')\nqobj = assemble(circuit, shots=1000)\njob = aer_sim.run(qobj)\nhist = job.result().get_counts()\nprint(hist)\n\nQiskitError                               Traceback (most recent call last)\nInput In [5], in <module>\n      2 qobj = assemble(circuit, shots=1000)\n      3 job = aer_sim.run(qobj)\n----> 4 hist = job.result().get_counts()\n      5 print(hist)\n\nFile ~/.pyenv/versions/3.8.7/lib/python3.8/site-packages/qiskit/result/result.py:269, in Result.get_counts(self, experiment)\n    267 dict_list = []\n    268 for key in exp_keys:\n--> 269     exp = self._get_experiment(key)\n    270     try:\n    271         header = exp.header.to_dict()\n\nFile ~/.pyenv/versions/3.8.7/lib/python3.8/site-packages/qiskit/result/result.py:397, in Result._get_experiment(self, key)\n    395 result_status = getattr(self, \"status\", \"Result was not successful\")\n    396 exp_status = getattr(exp, \"status\", \"Experiment was not successful\")\n--> 397 raise QiskitError(result_status, \", \", exp_status)\n\nQiskitError: 'ERROR:  [Experiment 0] Circuit circuit-85 contains invalid instructions {\"gates\": {cH}} for \"statevector\" method. ,  ERROR: Circuit circuit-85 contains invalid instructions {\"gates\": {cH}} for \"statevector\" method.'\n\nI use qiskit 0.22.2.\nP.S. I'm not trying to implement a controlled H gate, but rather understand why this error occurs and how I can avoid it in more complicated scenarios.\n", "answers": ["\nControlled-H is not one of the basis gates of AerSimulator. You can get this list of gates using:\naer_sim.configuration().basis_gates\n\nSo, you need to transpile the circuit into the supported set of gates before running it:\nfrom qiskit import transpile\n\ncircuit = transpile(circuit, backend=aer_sim)\njob = aer_sim.run(circuit)\n\nNotes:\n\nThere is no need to call assemble(). Actually, passing an assembled qobj directly to the run() method of the Aer simulator backends has been deprecated in favor of passing transpiled circuits directly.\n\nUsing execute() function also works because transpile() is called internally.\n\n\n", "\nI've had better luck using execute() rather than run().  I changed the last five lines to:\nfrom qiskit import execute\n\naer_sim = Aer.get_backend('aer_simulator')\njob = aer_sim.execute(circuit, backend, shots=1000)\nhist = job.result().get_counts()\nprint(hist)\n\nand it worked fine.\nI wished I knew what was actually causing your problem.  I suspect you've found a bug.  execute has all the bells and whistles I need, and seems to be more robust.\n"], "comments": [], "link": "https://quantumcomputing.stackexchange.com//questions/29038/qiskit-error-circuit-contains-invalid-instructions?r=SearchResults"}