{"question": "\nI tried to solve a simple system of two simultaneous linear equations in with HHL algorithm in Qiskit. In particular the system is Ax=bAx=b, where\nA=(1.50.50.51.5)A=(1.50.50.51.5)\nand\nb=(0.9010\u22120.4339)b=(0.9010\u22120.4339)\nThe matrix AA is Hermitian, so HHL should cope with it without any problems.\nI wrote following code\n%matplotlib inline\n# Importing standard Qiskit libraries and configuring account\nfrom qiskit import QuantumCircuit, execute, Aer, IBMQ\nimport numpy as np\nfrom qiskit.compiler import transpile, assemble\nfrom qiskit.tools.jupyter import *\nfrom qiskit.visualization import *\n#HHL in Qiskit\nfrom qiskit.aqua.algorithms import HHL\n\nmatrix_A = np.array([[1.5, 0.5],[0.5, 1.5]])\nvector_b = [0.9010, -0.4339]\n#x = [0.8184, -0.5747] #expected result\n\nbackend = Aer.get_backend('statevector_simulator')\n#num_q \u2013 Number of qubits required for the matrix Operator instance\n#num_a \u2013 Number of ancillary qubits for Eigenvalues instance\n\nhhlObject = HHL(matrix = matrix_A, vector = vector_b, quantum_instance = backend, num_q = 2, num_a = 1)\n\nres = hhlObject.run(quantum_instance = backend)\nprint(res)\n\nHowever, this error occured\n---------------------------------------------------------------------------\nAttributeError                            Traceback (most recent call last)\n<ipython-input-4-071684a21c97> in <module>\n      9 hhlObject = HHL(matrix = matrix_A, vector = vector_b, quantum_instance = backend, num_q = 2, num_a = 1)\n     10 \n---> 11 res = hhlObject.run(quantum_instance = backend)\n     12 print(res)\n\n/opt/conda/lib/python3.7/site-packages/qiskit/aqua/algorithms/quantum_algorithm.py in run(self, quantum_instance, **kwargs)\n     68                 self.quantum_instance = quantum_instance\n     69 \n---> 70         return self._run()\n     71 \n     72     @abstractmethod\n\n/opt/conda/lib/python3.7/site-packages/qiskit/aqua/algorithms/linear_solvers/hhl.py in _run(self)\n    399     def _run(self):\n    400         if self._quantum_instance.is_statevector:\n--> 401             self.construct_circuit(measurement=False)\n    402             self._statevector_simulation()\n    403         else:\n\n/opt/conda/lib/python3.7/site-packages/qiskit/aqua/algorithms/linear_solvers/hhl.py in construct_circuit(self, measurement)\n    204 \n    205         # InitialState\n--> 206         qc += self._init_state.construct_circuit(\"circuit\", q)\n    207 \n    208         # EigenvalueEstimation (QPE)\n\nAttributeError: 'NoneType' object has no attribute 'construct_circuit'\n\nI also tried to run construct_circuit method before run method, however, same error was returned.\nCould you please tell me how to set parameters of HHL algorithm to run it correctly?\n", "answers": ["\nBased on tsgeorgios information about Qiskit manual and the manual content, I created the code below which works as expected.\n#BASED ON: https://qiskit.org/textbook/ch-applications/hhl_tutorial.html#4.-Qiskit-Implementation\n%matplotlib inline\n# Importing standard Qiskit libraries and configuring account\nfrom qiskit import Aer\nfrom qiskit.circuit.library import QFT\nfrom qiskit.aqua.components.eigs import EigsQPE\nfrom qiskit.aqua.components.reciprocals import LookupRotation\nfrom qiskit.aqua.operators import MatrixOperator\nfrom qiskit.aqua.components.initial_states import Custom\nimport numpy as np\n#Linear equations solvers\nfrom qiskit.aqua.algorithms import HHL, NumPyLSsolver #HHL - quantum, NumPyLSolver - classical\n\ndef create_eigs(matrix, num_ancillae, num_time_slices, negative_evals):\n    ne_qfts = [None, None]\n    if negative_evals:\n        num_ancillae += 1\n        ne_qfts = [QFT(num_ancillae - 1), QFT(num_ancillae - 1).inverse()]\n    \n    #Construct the eigenvalues estimation using the PhaseEstimationCircuit\n    return EigsQPE(MatrixOperator(matrix=matrix),\n                   QFT(num_ancillae).inverse(),\n                   num_time_slices=num_time_slices,\n                   num_ancillae=num_ancillae,\n                   expansion_mode='suzuki',\n                   expansion_order=2,\n                   evo_time=None,\n                   negative_evals=negative_evals,\n                   ne_qfts=ne_qfts)\n\ndef HHLsolver(matrix, vector, backend, no_ancillas, no_time_slices):\n    orig_size = len(vector_b)\n    #adapt the matrix to have dimension 2^k\n    matrix, vector, truncate_powerdim, truncate_hermitian = HHL.matrix_resize(matrix_A, vector_b)\n\n    #find eigenvalues of the matrix wih phase estimation (i.e. calc. exponential of A, apply \n    #phase estimation) to get exp(lamba) and then inverse QFT to get lambdas themselves\n    eigs = create_eigs(matrix, no_ancillas, no_time_slices, False)\n    #num_q \u2013 Number of qubits required for the matrix Operator instance\n    #num_a \u2013 Number of ancillary qubits for Eigenvalues instance\n    num_q, num_a = eigs.get_register_sizes()\n\n    #construct circuit for finding reciprocals of eigenvalues\n    reci = LookupRotation(negative_evals=eigs._negative_evals, evo_time=eigs._evo_time)\n\n    #preparing init state for HHL, i.e. the state containing vector b\n    init_state = Custom(num_q, state_vector=vector)\n\n    #construct circuit for HHL based on matrix A, vector B and reciprocals of eigenvalues\n    algo = HHL(matrix, vector, truncate_powerdim, truncate_hermitian, eigs,\n               init_state, reci, num_q, num_a, orig_size)\n    \n    #solution on quantum computer\n    result = algo.run(quantum_instance = backend)\n    print(\"Solution:\\t\\t\", np.round(result['solution'], 5))\n    print(\"Probability:\\t\\t %f\" % result['probability_result'])\n\n    #refence solution - NumPyLSsolver = Numpy LinearSystem algorithm (classical).\n    result_ref = NumPyLSsolver(matrix, vector).run()\n    print(\"Classical Solution:\\t\", np.round(result_ref['solution'], 5))\n\nmatrix_A = np.array([[1.5, 0.5],[0.5, 1.5]])\nvector_b = [0.9010, -0.4339]\n#x = A^(-1)b = [0.78420, -0.55066] #expected result\n\nprocessor = Aer.get_backend('statevector_simulator')\n\nno_ancillas = 3 #number of ancilla qubits\nno_time_slices = 50 #number of timeslices in exponential of matrix A (exp(i*A*t))\n\nHHLsolver(matrix_A, vector_b, processor, no_ancillas, no_time_slices)\n\nAcknowledgement: The code is based on Qiskit manual on HHL.\n"], "comments": ["Have you read the corresponding chapter in Qiskit textbook? qiskit.org/textbook/ch-applications/hhl_tutorial.html It may be helpful.", "@tsgeorgios: Thanks for directing me here. It helped. Please feel free to post the comment as an answer to get the bounty. I will provide my code below.", "nice. thanks for posting the code. +1"], "link": "https://quantumcomputing.stackexchange.com//questions/14117/error-when-running-hhl-algorithm-in-qiskit/14271?r=SearchResults#14271"}