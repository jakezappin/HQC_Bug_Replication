{"question": "\nI am trying to write a phase estimation algorithm using Cirq. The algorithm works for different inputs but I receive a few errors in the estimate_phi(mystery) function.\nfrom cirq import CZPowGate\n\ndef create_operator(phi):\n    CU = CZPowGate(exponent = phi*2)\n    return CU\n\ndef iqft(n,qubits,circuit):\n    \n    #Swap the qubits\n    for i in range(n//2):\n        circuit.append(SWAP(qubits[i],qubits[n-i-1]), strategy = InsertStrategy.NEW)\n     \n    #For each qubit\n    for i in range(n-1,-1,-1):\n        #Apply CR_k gates where j is the control and i is the target\n        k=n-i #We start with k=n-i\n        for j in range(n-1,i,-1):\n            #Define and apply CR_k gate\n            crk = CZPowGate(exponent = -2/2**(k))\n            circuit.append(crk(qubits[j],qubits[i]),strategy = InsertStrategy.NEW)\n            k=k-1 #Decrement at each step\n            \n        #Apply Hadamard to the qubit\n        circuit.append(H(qubits[i]),strategy = InsertStrategy.NEW)\n\ndef qpe(t,control, target, circuit, CU):\n    \n    #Apply Hadamard to control qubits\n    circuit.append(cirq.H.on_each(control))\n    \n    #Apply CU gates\n    for i in range(t):\n        #Obtain the power of CU gate \n        CUi = CU**(2**i)\n        #Apply CUi gate where t-i-1 is the control\n        circuit.append(CUi(control[t-i-1],*target))\n        \n    #Apply inverse QFT\n    iqft(t,control,circuit)\n\nThis script works for different inputs:\nimport cirq\nfrom cirq.circuits import InsertStrategy\nfrom cirq          import H, X, SWAP, CZPowGate\n# def estimate_phi(mystery):\nmystery = 0.30\n#     Let the size of the first register equal 10.\nn = 1\n\nfor t in range (1,10):\n    #Create cirucit\n    circuit = cirq.Circuit()\n    \n   \n    #Create t control qubits\n    control = [cirq.LineQubit(i) for i in range(t) ]\n\n    #Create n target qubits\n    target = [cirq.LineQubit(i) for i in range(t, t + n) ]\n\n    #Set target qubit to state |1> \n    circuit.append(X.on_each(target))\n    \n    #Apply QPE\n    CU = create_operator(mystery)\n    qpe(t,control, target, circuit, CU)\n\n    circuit.append(cirq.measure(*control, key = 'result'))\n\n    s       = cirq.Simulator()\n    samples = s.run(circuit, repetitions = 1000)\n    \n    #Most frequent observation\n    freq = list(samples.histogram(key = 'result').keys())[0]\n    print(\"t:\", t,\"estimation:\", freq/2**t)\n\nbut when I put it in a function, I receive two errors for the print(test_qpe(0.23)) command\n\nunsupported operand type(s) for ** or pow(): 'complex' and\n'LinearCombinationOfGates'\nDuring handling of the above exception, another exception occurred:\nSimulator doesn't support\n(cirq.CZcirq.LinearCombinationOfGates({(cirq.CZ0.46):\n2})).on(cirq.LineQubit(0), cirq.LineQubit(1))\n\nimport cirq\nfrom cirq.circuits import InsertStrategy\nfrom cirq          import H, X, SWAP, CZPowGate\n\ndef estimate_phi(mystery):\n\n    for t in range (1,10):\n    #Create cirucit\n        circuit = cirq.Circuit()\n        #Number of qubits in the register storing eigenvector\n        n = 1 \n    \n    \n    #Create t control qubits\n        control = [cirq.LineQubit(i) for i in range(t) ]\n\n    #Create n target qubits\n        target = [cirq.LineQubit(i) for i in range(t, t + n) ]\n\n    #Set target qubit to state |1> \n        circuit.append(X.on_each(target))\n    \n    #Apply QPE\n        CU = create_operator(mystery)\n        qpe(t,control, target, circuit, CU)\n\n        circuit.append(cirq.measure(*control, key = 'result'))\n\n        s       = cirq.Simulator()\n        samples = s.run(circuit, repetitions = 1000)\n    \n    #Most frequent observation\n        freq = list(samples.histogram(key = 'result').keys())[0]\n        \n        \n    return freq/2**t\n\nimport math\ndef test_qpe(phi):\n    operator = CZPowGate(exponent=2*phi)\n    return estimate_phi(operator)\n\n", "answers": ["\nYou are passing estimate_phi the an operator: CZPowGate(exponent=2*phi).  Then in estimate_phi this operator becomes the mystery parameter.  You then take this mystery variable and call create_operator on it.  In create_operator this means that CU = CZPowGate(exponent = phi*2) is really CU = CZPowGate(CZPowGate(exponent=2*phi)).  So you are creating a CZ raised to a CZ!\nI think what you want to do is to pass in 2*phi in the test_qpe function.\nAlso, for creating the line qubits, you might be interested in the class function LineQubit.range which is just like python's range but returns LineQubits instead.\n"], "comments": [], "link": "https://quantumcomputing.stackexchange.com//questions/26780/writing-a-phase-estimation-function-in-cirq?r=SearchResults"}