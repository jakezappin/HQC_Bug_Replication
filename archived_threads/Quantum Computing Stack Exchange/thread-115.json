{"question": "\nIn order to explore whether it is possible to train a Qiskit Quantum circuit with tensorflow I built a small toy model.\nThe purpose of this toy model is to find via tensorflow the correct angle to get \"zero\" output independent of the input.\nimport numpy as np\nimport qiskit\nfrom qiskit.circuit import QuantumCircuit, QuantumRegister\nimport tensorflow as tf\nfrom tensorflow.keras.layers import Input, Dense, Layer\n\ndef QuantumCircuit(thetas, n_qubits=1):\n   \n   simulator = qiskit.Aer.get_backend('qasm_simulator')\n   shots=1024\n\n   circuit= qiskit.QuantumCircuit(n_qubits)\n   circuit.h(0)\n   circuit.ry(float(thetas),0)\n   circuit.measure_all()\n   \n   job = qiskit.execute(circuit,backend=simulator,shots=shots)\n   result = job.result().get_counts(circuit)\n\n   counts = np.array(list(result.values()))\n   states = np.array(list(result.keys())).astype(float)\n\n   # Compute probabilities for each state\n   probabilities = counts / shots\n   # Get state expectation\n   expectation = np.sum(states * probabilities)\n\n   return np.array(expectation)\n\nclass Linear(Layer):\n   def __init__(self,units=1,input_dim=1):\n       super(Linear,self).__init__()\n       self.w = self.add_weight(shape=(input_dim,units),initializer='random_uniform', trainable=True)        \n       \n   def call(self, inputs, input_dim=1):\n       if (tf.executing_eagerly()):\n           return QuantumCircuit(self.w)           \n       return inputs\n\nx_train = np.arange(10)\ny_train = np.array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0])\n\ninputs=Input(shape=(1,))\noutputs=Linear()(inputs)\nmodel=tf.keras.models.Model(inputs=inputs,outputs=outputs)\nmodel.summary()\nmodel.compile(optimizer=tf.keras.optimizers.Adam(learning_rate=0.01),\nloss=tf.keras.losses.MeanSquaredError())\nmodel.fit(x_train, y_train, epochs=100, batch_size=1, verbose=1)\n\nUnfortunately the toy model doesn't work and I get the following error:\noptimizer_v2.py:1219 _filter_grads\n([v.name for _, v in grads_and_vars],))\nValueError: No gradients provided for any variable: ['Variable:0'].\nSo I tried to calculate the gradient \"by myself\":\n@tf.custom_gradient\ndef custom_activation(w):\n    result  = QuantumCircuit(w)\n    \n    def grad(dy):\n        eps=0.0001\n        result1=QuantumCircuit(w)\n        result2=QuantumCircuit(w+eps)\n        grad=(result2-result1)/eps\n        return dy * [grad]\n\n    return result, grad\n\nas an intermediate step before the Quantum circuit is called. But this works out neither :-(\nDoes anybody have another idea to plug in Qiskit circuits into tensorflow and to deal with the fact that the automatic differentiation framework of tensorflow does not work in this case ?\nThanks a lot !!\n", "answers": ["\nIndeed as was pointed out, this problem was figured out a few years ago and we built a software library for it. PennyLane was created to make it easier for users to perform automatic differentiation of hybrid quantum-classical computations.\nFor the specific use case, using PennyLane you could create a KerasLayer natively, to create a quantum layer. Such a quantum layer can then be used together with classical layers defined using Keras.\nFurthermore, PennyLane is hardware and device agnostic. This means that the same quantum circuit could be run on different quantum devices and simulators by a minimal change in code.\nAdditional direct references that would be helpful:\n\nPennyLane-Qiskit Plugin: allows using Qiskit devices (e.g., Aer devices with the qasm_simulator backend)\nThe TensorFlow interface of PennyLane: allows interfacing with TensorFlow and using TensorFlow optimizers\n\nDisclaimer: I'm one of the developers working on PennyLane.\n", "\nI would use Pennylane to do that. And Pennylane offers a plugin to Qiskit so you can run your circuit on IBM's hardware.\nAlthough with the new Qiskit release, they provide a gradient frame work within Qiskit if you are interested. Here is the link to the announcement.. And here is the link to  their tutorial notebook on gradient framework.\n"], "comments": ["Thanks a lot for your hints ! I know the solution via Pennylane and used it. However having Pennylane between Qiskit and Tensorflow makes the calculations terribly slow. At least compared with TensorflowQuantum (which is optimzed I know but anyway). Therefore I'm interested in gaining performance in connecting Qiskit and Tensorflow directly. As I want to combine my Quantum circuit with a classical neural net and train them together the new Qiskit gradient framework does not help I guess...."], "link": "https://quantumcomputing.stackexchange.com//questions/14585/usage-of-tensorflow-keras-to-train-qiskit-circuits/14591?r=SearchResults#14591"}