{"question": "\nfirst of all, I would probably report this as a bug if I was confident enough in my QC abilities. As it stands, I've just started out, so I'm phrasing it as a question.\nFrom what I can tell, adding two PauliOps in this specific case does not result in the expected operator matrix:\nimport qiskit as qk\nfrom qiskit.opflow.primitive_ops import PauliOp\n\n(PauliOp(qk.quantum_info.Pauli(\"X\")) + PauliOp(qk.quantum_info.Pauli(\"iY\"))).to_matrix()\n\nresults in\narray([[0.+0.j, 1.-1.j],\n       [1.+1.j, 0.+0.j]])\n\nwhereas the result that I would expect is the one i get when I run the following code:\nPauliOp(qk.quantum_info.Pauli(\"X\")).to_matrix() + PauliOp(qk.quantum_info.Pauli(\"iY\")).to_matrix()\n\nResult:\narray([[0.+0.j, 2.+0.j],\n       [0.+0.j, 0.+0.j]])\n\nWhat further confuses me is that the deprecated version of PauliOp actually results in the expected operator. Running this code:\nimport qiskit as qk\nfrom qiskit.aqua.operators.primitive_ops import PauliOp\n\n(PauliOp(qk.quantum_info.Pauli(\"X\")) + PauliOp(qk.quantum_info.Pauli(\"iY\"))).to_matrix()\n\ngives a deprecation warning and the [[0,2],[0,0]]-array that I want.\nHas the behaviour of the addition changed or is this a bug? In any case, how can I construct the operator that I want (in a non-deprecated way)?\nI'm running qiskit version 0.29.0\nThanks in advance!\n", "answers": ["\nYou can do this instead:\n(PauliOp(qk.quantum_info.Pauli(\"X\")) + 1j*PauliOp(qk.quantum_info.Pauli(\"Y\"))).to_matrix()\n\nwhich gives what you expect:\narray([[0.+0.j, 2.+0.j],\n       [0.+0.j, 0.+0.j]])\n\n"], "comments": [], "link": "https://quantumcomputing.stackexchange.com//questions/21210/expected-outcome-of-adding-two-pauliop?r=SearchResults"}