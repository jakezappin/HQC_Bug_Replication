{"question": "\n\n\n\n\n\n\n\nThis question already has answers here:\n                                \n                            \n\n\n\n\nquantum random number generator implementation in quantum lab\n\n                                (2 answers)\n                            \n\nClosed 2 years ago.\n\n\n\ndef random_bitstring_generator(bit_number, backend):\n    \n\n    bitstring = \"\"\n\n    one_qubit_random_bit_generator_circuit = QuantumCircuit(4,4)\n    one_qubit_random_bit_generator_circuit.h(3)\n    one_qubit_random_bit_generator_circuit.measure(3,3)\n\n    for _ in range(bit_number):\n        counts = execute(one_qubit_random_bit_generator_circuit, backend, shots=8000).result().get_counts()\n        bit = list(counts.keys())[0]  \n        bitstring += bit\n\n    return bitstring\n\nfrom qiskit.providers.aer import QasmSimulator\n\nprovider = IBMQ.load_account()\nibmq_melbourne = provider.get_backend('ibmq_16_melbourne')\nbackend = QasmSimulator.from_backend(ibmq_melbourne)\n\nprint(random_bitstring_generator(512, backend))```\n\nUsing the above  code,\nI am only getting an output bit string with all 0's even with changing number of shots.\nwhat is the error leading to incorrect output.\nI am trying to generate a long random sequence \n\n", "answers": ["\nHow about:\ndef random_bitstring_generator(bit_number, backend):\n    bitstring = \"\"\n\n    one_qubit_random_bit_generator_circuit = QuantumCircuit(1, 1)\n    one_qubit_random_bit_generator_circuit.h(0)\n    one_qubit_random_bit_generator_circuit.measure(0, 0)\n\n    for _ in range(bit_number):\n        counts = execute(one_qubit_random_bit_generator_circuit, backend, shots=1).result().get_counts()\n        bit = list(counts.keys())[0]  \n        bitstring += bit\n\n    return bitstring\n\nbackend = BasicAer.get_backend('qasm_simulator')\nrandom_bitstring_length = 100\nprint(random_bitstring_generator(random_bitstring_length, backend) ) \n\nThis would output something like:\n0000010000010010001000111010001110001000000100110011110110101010111011001100100001100100001101100000\n\nNote that the number of shot is 1 since we just creating some random number and not finding the probability of seeing |0\u27e9|0\u27e9 and |1\u27e9|1\u27e9.\n"], "comments": ["I am not able to achieve the results with the implementation given here. As also It gives errors which i am unable to rectify. like ERROR code 3444:login failed though i am logged in with gmail account in Q experience.I mistakenly regenerated the API token, should it have any effect on the error above as i logged out and logged in again too but the error still was the same.I am an open provider user in IBM Q experience", "does this mean that i should be trying to execute with minimum number of qubits because when i am executing the above code  for 3,4 or more qubits the sequence doesn't appear to be random as large number of continuous 0s and 1s appear inside the sequence.Also when i am trying to execute over any prototype like vigo,santiago or ourense it outputs error code 3446:login failed though i am logged in IBM Q Experience with gmail account. I am only using quantum lab /Q Experience GUI and do not know much of python for Qiskit."], "link": "https://quantumcomputing.stackexchange.com//questions/15293/how-to-generate-a-random-sequence?r=SearchResults"}