{"question": "\nI'm trying to define a custom gate for my computations. I decided to copy the structure in one of the files in qiskit.extensions.standard package. Here is the code of h.py (Hadamard gate):\n# -*- coding: utf-8 -*-\n\n# Copyright 2017, IBM.\n#\n# This source code is licensed under the Apache License, Version 2.0 found in\n# the LICENSE.txt file in the root directory of this source tree.\n\n# pylint: disable=invalid-name\n\n\"\"\"\nHadamard gate.\n\"\"\"\nfrom qiskit.circuit import Gate\nfrom qiskit.circuit import QuantumCircuit\nfrom qiskit.circuit import InstructionSet\nfrom qiskit.circuit import QuantumRegister\nfrom qiskit.qasm import pi\nfrom qiskit.dagcircuit import DAGCircuit\nfrom qiskit.extensions.standard import header  # pylint: disable=unused-import\nfrom qiskit.extensions.standard.u2 import U2Gate\n\n\nclass HGate(Gate):\n    \"\"\"Hadamard gate.\"\"\"\n\n    def __init__(self, qubit, circ=None):\n        \"\"\"Create new Hadamard gate.\"\"\"\n        super().__init__(\"h\", [], [qubit], circ)\n\n    def _define_decompositions(self):\n        \"\"\"\n        gate h a { u2(0,pi) a; }\n        \"\"\"\n        decomposition = DAGCircuit()\n        q = QuantumRegister(1, \"q\")\n        decomposition.add_qreg(q)\n        decomposition.add_basis_element(\"u2\", 1, 0, 2)\n        rule = [\n            U2Gate(0, pi, q[0])\n        ]\n        for inst in rule:\n            decomposition.apply_operation_back(inst)\n        self._decompositions = [decomposition]\n\n    def inverse(self):\n        \"\"\"Invert this gate.\"\"\"\n        return self  # self-inverse\n\n    def reapply(self, circ):\n        \"\"\"Reapply this gate to corresponding qubits in circ.\"\"\"\n        self._modifiers(circ.h(self.qargs[0]))\n\n\ndef h(self, q):\n    \"\"\"Apply H to q.\"\"\"\n    if isinstance(q, QuantumRegister):\n        instructions = InstructionSet()\n        for j in range(q.size):\n            instructions.add(self.h((q, j)))\n        return instructions\n\n    if isinstance(q, QuantumRegister):\n        instructions = InstructionSet()\n        for j in range(q.size):\n            instructions.add(self.h(q))\n        return instructions\n\n    self._check_qubit(q)\n    return self._attach(HGate(q, self))\n\n\nQuantumCircuit.h = h\n\nTrying to change the names of the class, the property of QuantumCircuit and the name string in Gate constructor results in an exception (name of the gate) is not in the list of basic operations  if I try to either draw or execute an example circuit containing the gate.\n\"\n\"\"\n[1]-const gate.\n\"\"\"\nfrom qiskit.circuit import Gate\nfrom qiskit.circuit import QuantumCircuit\nfrom qiskit.circuit import InstructionSet\nfrom qiskit.circuit import QuantumRegister\nfrom qiskit.qasm import pi\nfrom qiskit.dagcircuit import DAGCircuit\nfrom qiskit.extensions.standard import header  # pylint: disable=unused-import\nfrom qiskit.extensions.standard.u2 import U2Gate\n\n\nclass OneConstGate(Gate):\n\n    def __init__(self, qubit, circ=None):\n        super().__init__(\"oneconst\", [], [qubit], circ)\n\n    def _define_decompositions(self):\n        decomposition = DAGCircuit()\n        q = QuantumRegister(1, \"q\")\n        decomposition.add_qreg(q)\n        decomposition.add_basis_element(\"u2\", 1, 0, 2)\n        rule = [\n            U2Gate(0, pi, q[0])\n        ]\n        for inst in rule:\n            decomposition.apply_operation_back(inst)\n        self._decompositions = [decomposition]\n\n    def inverse(self):\n        \"\"\"Invert this gate.\"\"\"\n        return self  # self-inverse\n\n    def reapply(self, circ):\n        \"\"\"Reapply this gate to corresponding qubits in circ.\"\"\"\n        self._modifiers(circ.oneconst(self.qargs[0]))\n\n\ndef oneconst(self, q):\n    \"\"\"Apply H to q.\"\"\"\n    if isinstance(q, QuantumRegister):\n        instructions = InstructionSet()\n        for j in range(q.size):\n            instructions.add(self.oneconst((q, j)))\n        return instructions\n\n    if isinstance(q, QuantumRegister):\n        instructions = InstructionSet()\n        for j in range(q.size):\n            instructions.add(self.oneconst(q))\n        return instructions\n\n    self._check_qubit(q)\n    return self._attach(OneConstGate(q, self))\n\n\nQuantumCircuit.oneconst = oneconst\n\nHere is the example code:\nx = QuantumRegister(1, 'x')\ngate = QuantumCircuit(x)\ngate.oneconst(x[0])\ngate.draw()\n\nNote that I haven't changed any logic yet. Just the names. Did I forgot something?\nEdit (1):\nI had a look at header.py code in qiskit.extensions.standard. Adding these lines of code remove the error on draw method, but not in execute method:\nimport sympy\nfrom qiskit.circuit import QuantumCircuit\nfrom qiskit.qasm import _node as node\n\nQuantumCircuit.definitions[\"oneconst\"] = {\n    \"print\": False,\n    \"opaque\": False,\n    \"n_args\": 0,\n    \"n_bits\": 1,\n    \"args\": [],\n    \"bits\": [\"a\"],\n    # gate x a { u3(pi,0,pi) a; }\n    \"body\": node.GateBody([\n        node.CustomUnitary([\n            node.Id(\"u3\", 0, \"\"),\n            node.ExpressionList([\n                node.Real(sympy.pi),\n                node.Int(0),\n                node.Real(sympy.pi)\n            ]),\n            node.PrimaryList([\n                node.Id(\"a\", 0, \"\")\n            ])\n        ])\n    ])\n}\n\n", "answers": ["\nDid you add these lines to the file qiskit/extensions/standard/__init__.py:\nfrom .oneconst import oneconst\nfrom .oneconst import OneConstGate\nI did everything you described doing, as well as added those lines to __init__.py and the following code ran without error:\nimport qiskit\nfrom qiskit import QuantumCircuit, QuantumRegister, ClassicalRegister, execute\nfrom qiskit import Aer\n\nqr = QuantumRegister(1)\ncr = ClassicalRegister(1)\ngate = QuantumCircuit(qr, cr)\ngate.oneconst(qr[0])\ngate.measure(qr[0], cr[0])\nprint(gate.draw())\n\nbackend = Aer.get_backend(\"qasm_simulator\")\n\njob = execute(gate, backend, shots=100)\n\nprint(job.result().get_counts(gate))\n\n"], "comments": [], "link": "https://quantumcomputing.stackexchange.com//questions/5869/name-of-gate-is-not-in-the-list-of-basis-operations?r=SearchResults"}