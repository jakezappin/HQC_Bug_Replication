{"question": "\nI would like to automatically get a phase gate of pi/2 converted to a S gate.\nI have:\nimport qiskit as qk\nfrom qiskit import QuantumRegister, ClassicalRegister, QuantumCircuit,Aer\nbackend = Aer.get_backend('unitary_simulator')\n\nbasis_gates=['h',\"cx\",'t', \"s\"]\nqreg_q = QuantumRegister(1, 'q')\nreplacement_circuit = QuantumCircuit(qreg_q)\nreplacement_circuit.s(0)\nqk.circuit.equivalence_library.StandardEquivalenceLibrary.add_equivalence(qk.circuit.library.PhaseGate(np.pi/2),replacement_circuit)\n\nqreg_q = QuantumRegister(1, 'q')\ncircuit = QuantumCircuit(qreg_q)\ncircuit.p(np.pi/2,0)\nqk.transpile(circuit, backend, basis_gates)\n\nbut I get CircuitError: 'Cannot bind parameters (p[0]) not present in the circuit.'\nWhy?\n", "answers": ["\nIf you look at Qiskit's equivalence_library.py, you'll notice that each gate and equivalent circuit include their parameters.\nq = QuantumRegister(1, \"q\")\ntheta = Parameter(\"theta\")\nphase_to_u = QuantumCircuit(q)\nphase_to_u.u(0, 0, theta, 0)\n_sel.add_equivalence(PhaseGate(theta), phase_to_u)\n\nWhen BasisTranslator calls the equivalence library, notice that it only passes in the gate name and not matching specific parameters yet.\nequiv_lib._get_equivalences((gate_name, gate_num_qubits))\n\nBecause you are binding the PhaseGate parameters ahead of time, explains the error telling you the PhaseGate parameter is no longer present.\nInstead, since this behavior is tightly coupled with the BasisTranslator pass I might suggest writing a new TransformationPass. For example, iterate through all the gates and make the substitution manually when a PhaseGate(np.pi/2) is found.\n"], "comments": [], "link": "https://quantumcomputing.stackexchange.com//questions/26477/qiskit-transpile-circuit-with-custom-equivalences/26480?r=SearchResults#26480"}