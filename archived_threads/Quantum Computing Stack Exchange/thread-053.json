{"question": "\nQiskit Aqua has a module that implements the HHL algorithm:\nhttps://qiskit.org/documentation/stable/0.32/stubs/qiskit.aqua.algorithms.HHL.html\nHow does one draw the implemented circuit?\n*** EDIT ***\nI'm working with an example from the github.  I modified it as follows:\n#\n# Example from \n# https://github.com/Qiskit/qiskit-iqx-tutorials/blob/master/qiskit/advanced/aqua/linear_systems_of_equations.ipynb\n#\n\n\nfrom qiskit.aqua import run_algorithm\nfrom qiskit.aqua.input import LinearSystemInput\nfrom qiskit.quantum_info import state_fidelity\nfrom qiskit.aqua.algorithms.classical import ExactLSsolver\nimport numpy as np\n\n\nparams = {\n    'problem': {\n        'name': 'linear_system'\n    },\n    'algorithm': {\n        'name': 'HHL'\n    },\n    'eigs': {\n        'expansion_mode': 'suzuki',\n        'expansion_order': 2,\n        'name': 'EigsQPE',\n        'num_ancillae': 3,\n        'num_time_slices': 50\n    },\n    'reciprocal': {\n        'name': 'Lookup'\n    },\n    'backend': {\n        'provider': 'qiskit.BasicAer',\n        'name': 'statevector_simulator'\n    }\n}\n\n# The 2 x 2 System to solve \n#\n\n\nmatrix = [[1, 0], [0, 2]]\nvector = [1, 4]\nparams['input'] = {\n    'name': 'LinearSystemInput',\n    'matrix': matrix,\n    'vector': vector\n}\n\n\n# Run the HHL Algorithm\nresult = run_algorithm(params)\n\nresult is the following:\n{'probability_result': 0.024629684664855277,\n 'output': array([0.46919178+0.00000000e+00j, 0.8830963 -6.70000184e-15j]),\n 'solution': array([1.05859322-8.03148712e-15j, 1.99244701-3.02331663e-14j]),\n 'matrix': array([[1, 0],\n        [0, 2]]),\n 'vector': array([1, 4]),\n 'circuit_info': {'size': 28870,\n  'depth': 28820,\n  'width': 7,\n  'qubits': 7,\n  'bits': 0,\n  'factors': 1,\n  'operations': {'u3': 6011,\n   'u1': 8021,\n   'cx': 14066,\n   'barrier': 700,\n   'u2': 6,\n   'cu3': 42,\n   'x': 24}\n  }\n}\n\nI tried the following\nHHL.construct_circuit(result.circuit_info).draw()\nbut that resulted in\n---------------------------------------------------------------------------\nNameError                                 Traceback (most recent call last)\n<ipython-input-13-4cf1b322ed4c> in <module>\n----> 1 HHL.construct_circuit(result.circuit_info).draw()\n\nNameError: name 'HHL' is not defined\n\nSo it may very well be that I didn't import something or that I just don't understand the syntax for the HHL.\nSo how should I form the instructions to generate the circuit?   (I'm not very good at python so if this question is trivial, I do apologize.)   I checked the qiskit documentation but I couldn't understand it well.  It didn't give an explicit example so if there's something I need to learn to be able to do this, please let me know.  Thank you for your time.\n", "answers": ["\nYou can draw the circuit using construct_circuit().draw().\nIn the tutorial you are talking about, if you scroll down to the 4x4 randomly generated section that uses params5 you can run print(hhl.construct_circuit()), after the line hhl = HHL.init_params(params5, algo_input).\nThis may take a little while to complete but it should eventually print out ASCII art of the circuit. Other drawing options can be configured using .draw().\nNB this isn't to say that you can't draw any of the other circuits, if you follow the way the HHL object is created in this section you can draw any of the configurations specified by the params. For example, you could draw the circuit you are creating using\nfrom qiskit.aqua.input import LinearSystemInput\nfrom qiskit.aqua.algorithms.single_sample import HHL\nalgo_input = LinearSystemInput(matrix=matrix, vector=vector)\nhhl = HHL.init_params(params, algo_input)\n\n", "\nThe credit for this answer goes to met927 in the previous post.  So please upvote that answer instead of this one.  met927's response answered my question.  Not setting up some of the parameters to make system draw faster was my error.  So thank you met927 for responding quickly and answering my question!\nBelow is a snippet that one can run quite quickly (less than a minute). \n###########################################################\n#\n#\n# met927's response incorporated into the github example\n#\n#\n###########################################################\n\n\nfrom qiskit.aqua import run_algorithm\nfrom qiskit.aqua.input import LinearSystemInput\nfrom qiskit.aqua.algorithms.single_sample import HHL\n\nimport numpy as np\n\n# System to solve\n# A  = [[1.5, 0.5], [0.5, 1.5]]\n# b =  [2, 2]\n\nmatrix = [[1.5, 0.5], [0.5, 1.5]]\nvector = [2, 2]\n\nparams = {\n    'problem': {\n        'name': 'linear_system'\n    },\n    'algorithm': {\n        'name': 'HHL'\n    },\n    'eigs': {\n        'expansion_mode': 'suzuki',\n        'expansion_order': 2,\n        'name': 'EigsQPE',\n        'num_ancillae': 3,\n        'num_time_slices': 50\n    },\n    'reciprocal': {\n        'name': 'Lookup'\n    },\n    'backend': {\n        'provider': 'qiskit.BasicAer',\n        'name': 'statevector_simulator'\n    }\n}\n\nparams['input'] = {\n    'name': 'LinearSystemInput',\n    'matrix': matrix,\n    'vector': vector\n}\n\nparams['algorithm'] = {\n    'truncate_powerdim': False,\n    'truncate_hermitian': False\n}\nparams['reciprocal'] = {\n    'name': 'Lookup',\n    'negative_evals': True\n}\nparams['eigs'] = {\n    'expansion_mode': 'suzuki',\n    'expansion_order': 2,\n    'name': 'EigsQPE',\n    'negative_evals': False,\n    'num_ancillae': 1,\n    'num_time_slices': 70\n}\nparams['initial_state'] = {\n    'name': 'CUSTOM'\n}\nparams['iqft'] = {\n    'name': 'STANDARD'\n}\nparams['qft'] = {\n    'name': 'STANDARD'\n}\n\n\n# Prep the input\nalgo_input = LinearSystemInput(matrix=matrix, vector=vector)\n\n# Run the HHL algorithm\nhhl = HHL.init_params(params, algo_input)\n\n# Draw the circuit\nprint(hhl.construct_circuit())\n\nIt draws an ascii circuit.    I just wanted to know how to get the routine to draw the circuit.  Thanks again met927.\n"], "comments": ["Please post the full code.  I get errors saying register size must be positive when trying to use those methods.", "Thanks for the suggestion. I tried to make use of it previously but to no avail.  I posted my code (it's a chopped up version from  github).  Please comment on what I should do.  Thank you.", "@user727041 I have updated my response, I hope this makes things clearer :)", "@met927 Thanks for updating your response.  Out of curiosity, have you done this successfully?  For a \"fast\" run, I'm trying to generate the circuit for the first 2\u00d722\u00d72 diagonal matrix and vector.  I'm running this on a decent laptop, and it's been running for an hour and half so far (using about 4 GB of RAM and 20% CPU throughout).  This seems a bit extreme for a small system of linear equations like this.", "@Chained Symmetry For the 2x2 case, try one without a negative eigenvalue and state so in the parameters.  It ran generated the ascii circuit."], "link": "https://quantumcomputing.stackexchange.com//questions/8935/how-to-draw-qiskits-hhl-algorithm-as-a-circuit/8944?r=SearchResults#8944"}