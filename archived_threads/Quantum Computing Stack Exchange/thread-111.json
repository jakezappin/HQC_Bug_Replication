{"question": "\nRight now I'm trying to delve into qiskit pulses and its usage with quantum hardware. First of all I decided to run spectroscopy experiment with FakeManila backend:\nimport numpy as np\nfrom qiskit.providers.fake_provider import FakeManila\n\nbackend = FakeManila()\n# 1.1. retrieve the configuration for the backend\nconfig = backend.configuration()\n\n# 1.2. retrieve the default values for the backend\ndefaults = backend.defaults()\n\n### 2. Qubit SPECTROSCOPY ###\nQUBIT = 1\n\n# unit conversion factors (All backend properties are in SI units)\nGHz = 1.0e9  # Gigahertz\nMHz = 1.0e6  # Megahertz\nus = 1.0e-6  # Microseconds\nns = 1.0e-9  # Nanoseconds'\n\n# experiment options\nfrom collections import namedtuple\n\ndrive_sigma_sec = 0.015 * us  # width of the gaussian pulse\ndrive_duration_sec = drive_sigma_sec * 8  # truncating the gaussian to 8 sigma\n\nExperiment_options = namedtuple(\"Experiment_options\", \"amp, sigma, width, duration\")\nexperiment_options = Experiment_options(\n    amp=0.05,  # The amplitude of the spectroscopy pulse\n    duration=drive_duration_sec,  # The duration of the spectroscopy pulse in seconds\n    sigma=drive_sigma_sec,  # The standard deviation of the spectroscopy pulse in seconds\n    width=0,  # The width of the flat-top of the GaussianSquare pulse in samples\n)\n\n# Retrieve the estimated qubit frequency\ncenter_frequency = defaults.qubit_freq_est[QUBIT]  # in Hz\nprint(f\"Qubit {QUBIT} has an estimated frequency of {center_frequency/GHz} GHz\")\n\n# Create a range to sweep\nfrequency_span = 40 * MHz  # in Hz\nfrequency_step = 1 * MHz  # in Hz\nfrequency_min = center_frequency - frequency_span / 2\nfrequency_max = center_frequency + frequency_span / 2\nfrequency_list = np.arange(frequency_min, frequency_max, frequency_step)\n\n# set timing options for experiment\nfrom qiskit_experiments.framework import BackendTiming\n\ntiming = BackendTiming(backend)\n\nduration = timing.round_pulse(\n    time=experiment_options.duration\n)  # the duration regarding to timing constraints\nsigma = experiment_options.sigma / timing.dt\nwidth = experiment_options.width / timing.dt  \n\n### 2. Create a spectroscopy schedule  \nfrom qiskit import pulse\nfrom qiskit.circuit import Parameter  # This is Prameter class for variable parameters\nfrom qiskit.circuit import Gate, QuantumCircuit\n\n# 2.1 create variable parameter\n# https://qiskit.org/documentation/stubs/qiskit.circuit.Parameter.html\nfreq_param = Parameter(\"frequency\")\n\n# 2.2 create a default pulse schedule\n# https://qiskit.org/documentation/tutorials/circuits_advanced/06_building_pulse_schedules.html\nwith pulse.build(backend=backend, name=\"spectroscopy\") as spec_sched:\n    # 2.2.1 choose drive channel\n    drive_chan = pulse.drive_channel(QUBIT)\n\n    # 2.2.2 change frequency on selected channel\n    pulse.shift_frequency(freq_param, drive_chan)\n\n    # 2.2.3 Play pulse\n    pulse.play(\n        pulse=pulse.GaussianSquare(\n            duration=duration,\n            sigma=sigma,\n            width=width,\n            amp=experiment_options.amp,\n        ),\n        channel=drive_chan,\n    )\n\n    # 2.2.4 shift frequency back to original value\n    pulse.shift_frequency(-freq_param, drive_chan)  \n\n# 2.3 Create the Spectroscopy gate\nspec_gate_name = \"Spec_gate\"\nspec_gate = Gate(name=spec_gate_name, num_qubits=1, params=[freq_param])\n\n# 2.4 Create a qusntum circuit for spectroscopy\nqc_spec = QuantumCircuit(1)\nqc_spec.append(spec_gate, (0,))  # apply the spectroscopy gate to qubit register 0\n\n# Adds measurement to all non-idle qubits.\nqc_spec.measure_active()  # Creates a new ClassicalRegister with a size equal to the number of non-idle qubits being measured\n\n# 2.5 add circuit calibration\n# https://docs.quantum-computing.ibm.com/build/pulse\nqc_spec.add_calibration(\n    spec_gate_name,\n    qubits=[\n        QUBIT,\n    ],\n    schedule=spec_sched,\n    params=[freq_param],\n)\n\n# 2.6 apply parameters\nfreq_sweep_circs = [\n    qc_spec.assign_parameters({freq_param: round(f, 3)}, inplace=False)\n    for f in frequency_list\n]  \n\n### Get Results ###  \nnum_shots_per_frequency = 1024\n\njob = backend.run(\n    freq_sweep_circs, meas_level=1, meas_return=\"avg\", shots=num_shots_per_frequency\n)  \n\nfrequency_sweep_results = job.result()\n\nlast line returns AerError: 'unknown instruction: Spec_gate'\nBut I'm pretty sure that I defined this gate previously... So what am I missing out here?\n", "answers": ["\ncan you share a full working example in which you get the error \"Operation 'Spec_gate' on qubit(s) [0] not supported by the backend command definition. Did you remember to transpile your input circuit for the same backend?\"? I was going to reply that you need to make sure the gate has a pulse defined (either in backend.target or attached to the gate itself), but it looks like you've done that.\n", "\nThe fake backends don't support pulse gates.\n"], "comments": ["Hi @DanPuzzuoli! Your answer is not answering the question but rather asks for more information on the problem. This kind of contributions are better in the \"comment\" section below the question. You need a reputation above 50 to comment, so I understand why you did not, but remember this for the next time please.", "@DanPuzzuoli, yes, sure, here is my script: gist.github.com/ikaryss/7d1cf31d6f25a067ca86bf589ab37163", "@DanPuzzuoli, I also wrote more generalized question on this topic with all scripts included. It would be great if you check this out!", "Hi @AdrienSuau - is there any way around the 50 reputation to add comments? (I believe I had an account before but forgot what it was so made this fresh account to reply.)", "@Ikaryssik there appears to be some kind of labelling issue. Even though you add the calibration to the circuit and specify qubits=(0,), if you do qc_spec.calibrations, it appears that the calibration has been added for qubit 1. I'm not an expert in transpilation so I'm not sure what the relation is between the physical indexing and the circuit indexing and how the transpiler is supposed to deal with that.", "@Ikaryssik even though it's not necessarily what you want to do, I was able to get it to run with  # Create quantum circuit for spectroscopy qc_spec = QuantumCircuit(2) qc_spec.append(spec_gate, (1,))  # apply the spectroscopy gate to qubit register 0  so that the physical and circuit indexing both point to qubit 1. You'll probably want to do something else, but at least this verifies the issue.", "@Ikaryssik Once running, this simulation however is very slow - I'd recommend either switching it to be done with JAX and/or limiting the model to the qubit(s) you want to simulate using the subsystem_list optional argument in DynamicsBackend.from_backend. There is guidance on how to use JAX in the tutorials/user guide, and the subsystem_list argument is documented in the API docs.", "@DanPuzzuoli not that I am aware of. If you end up solving the issue and answering the question in this comment thread, I think the best would be to edit your answer in order to include the \"real\" answer.", "@DanPuzzuoli thank you so much for your response! That was really helpful", "May be there are some other methods to run such experiments? Please, can you give me some hints about it? I want to go through all calibrations steps, but it is pretty painful to wait for around 6 hours for each step on real hardware :(", "Try this: qiskit.org/ecosystem/dynamics/tutorials/index.html", "Thank you! I've read Simulating backends at the pulse-level with DynamicsBackend tutorial. As I understand, I can simply apply DynamicsBackend.from_backend(real_manila_backend) and get full representation of this specific real manila backend. But I am still getting the QiskitError: \"Operation 'Spec_gate' on qubit(s) [0] not supported by the backend command definition. Did you remember to transpile your input circuit for the same backend?\"  While using the same code (except for changing the backend to dynamics one)"], "link": "https://quantumcomputing.stackexchange.com//questions/33948/trying-to-run-qubit-spectroscopy-on-fakemanila-backend-got-unknown-instruction?r=SearchResults"}