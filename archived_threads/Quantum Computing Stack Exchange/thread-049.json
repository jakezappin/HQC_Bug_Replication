{"question": "\nI'm trying to run a VQE for a specific custom Anzats. The Anzats is built up of an unitary matrix UHUH, which I'm trying to created in this way:\nfrom qiskit import *\nfrom qiskit.circuit import Parameter\nfrom qiskit.quantum_info import Operator\nimport math as m\n\nu_circuit = QuantumCircuit(2)\n\n# This does not work\ntheta = Parameter('\u03b8')\n\nU_H = Operator([\n[m.cos(2 * theta) - 1j * m.sin(2 * theta), 0, 0, 0],\n[0, m.cos(2 * theta), -1j * m.sin(2 * theta), 0],\n[0, -1j * m.sin(2 * theta), m.cos(2 * theta), 0],\n[0, 0, 0, m.cos(2 * theta) - 1j * m.sin(2 * theta)]\n])\n\nu_circuit.unitary(U_H, [0, 1], label='U_H(\u03b8)')\n\nU_H_gate = u_circuit.to_gate(label='U_H(\u03b8)')\n\nHowever, for the VQE to work, the circuit needs to be parameterized, and because of that, so does the unitary gate U_H. Unfortunately, I'm not able to parameterize my variable \u03b8 in my operator that I later transform into a 2-qubit gate. Also I can't find a way to bind theta so that it only exists between 00 and 2\u03c02\u03c0. Whenever I try to build a circuit using this function to generate the gates in the Ansatz, I get the following error:\nParameterExpression with unbound parameters ({Parameter(\u03b8)}) cannot be cast to a float.\n\nDoes anyone know how I can create a parameterized circuit consisting of parameterized gates of the form described by the matrix the U_H operator, where theta ranges from 00 to 2\u03c02\u03c0?\n", "answers": ["\nIf I follow this correctly, the problem is that operator does not currently support parameters. This is a reported issue https://github.com/Qiskit/qiskit-terra/issues/4751\n", "\nYour unitary matrix is\nUH=\u239b\u239d\u239c\u239c\u239ccos(2\u03b8)\u2212isin(2\u03b8)0000cos(2\u03b8)\u2212isin(2\u03b8)00\u2212isin(2\u03b8)cos(2\u03b8)0000cos(2\u03b8)\u2212isin(2\u03b8)\u239e\u23a0\u239f\u239f\u239fUH=(cos\u2061(2\u03b8)\u2212isin\u2061(2\u03b8)0000cos\u2061(2\u03b8)\u2212isin\u2061(2\u03b8)00\u2212isin\u2061(2\u03b8)cos\u2061(2\u03b8)0000cos(2\u03b8)\u2212isin\u2061(2\u03b8))\nThat is,\nUH=\u239b\u239d\u239c\u239c\u239c\u239ce\u22122i\u03b80000cos(\u22122\u03b8)isin(\u22122\u03b8)00isin(\u22122\u03b8)cos(\u22122\u03b8)0000e\u22122i\u03b8\u239e\u23a0\u239f\u239f\u239f\u239fUH=(e\u22122i\u03b80000cos\u2061(\u22122\u03b8)isin\u2061(\u22122\u03b8)00isin\u2061(\u22122\u03b8)cos\u2061(\u22122\u03b8)0000e\u22122i\u03b8)\nUp to a global phase of e\u2212i\u03b8e\u2212i\u03b8, this unitary is equivalent to\nexp(2i\u03b8(XX+YY+ZZ))exp\u2061(2i\u03b8(XX+YY+ZZ)).\nNow XXXX, YYYY, and ZZZZ are mutually commute. So,\nUH\u2243exp(2i\u03b8XX)exp(2i\u03b8YY)exp(2i\u03b8ZZ)UH\u2243exp\u2061(2i\u03b8XX)exp\u2061(2i\u03b8YY)exp\u2061(2i\u03b8ZZ)\nWhich can be implemented by using the parameterized gates RXXRXX, RYYRYY, and RZZRZZ as follows:\ndef U_H(theta):\n    circuit = QuantumCircuit(2)\n\n    # Global phase:\n    circuit.x(0)\n    circuit.u(np.pi, -theta, np.pi - theta, 0)\n\n    circuit.rxx(2 * theta, 0, 1)\n    circuit.ryy(2 * theta, 0, 1)\n    circuit.rzz(2 * theta, 0, 1)\n    return circuit.to_gate(label = '$U_H$')\n\ntheta = Parameter('\u03b8')\ncirc = QuantumCircuit(2)\ncirc.append(U_H(theta), [0, 1])\nbound_circuit = circ.bind_parameters({ theta: np.pi / 16 })\n\n", "\nCould you try this as an alternative?\nfrom qiskit import QuantumCircuit\nfrom qiskit.circuit import Parameter, Gate\n\n\nclass UHGate(Gate):\n    def __init__(self, theta, label=None):\n        super().__init__('U', 2, [theta], label=label)\n        \n        \n    def _define(self):\n        qc = QuantumCircuit(2)\n        qc.unitary(self.to_matrix(), [0, 1])\n        \n        self.definition = qc\n        \n    def to_matrix(self):\n        t = float(self.params[0])\n        a = np.exp(-2j * t)\n        c = np.cos(2 * t)\n        s = -1j * np.sin(2 * t)\n\n        return np.array([[a, 0, 0, 0], \n                         [0, c, s, 0], \n                         [0, s, c, 0],\n                         [0, 0, 0, a]])\n\n\nt = Parameter('\u03b8')\nqc = QuantumCircuit(2)\nqc.append(UHGate(t), [0, 1])\n\nThe idea is to 'delay' the building of the unitary gate to the point where you have available the values of the unbound parameters.\nAnother option is to manually decompose the unitary operator into 1 and 2-qubit gates that Qiskit natively supports and can be parameterized.\n"], "comments": [], "link": "https://quantumcomputing.stackexchange.com//questions/14867/creating-a-parameterized-operator-in-qiskit/23393?r=SearchResults#23393"}