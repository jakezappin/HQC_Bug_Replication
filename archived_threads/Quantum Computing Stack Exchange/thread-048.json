{"question": "\nQiskit provides the qiskit.quantum_info.Operator class to get the unitary matrix operator from the corresponding quantum circuit, as in the following example:\nfrom qiskit import QuantumCircuit\nfrom qiskit.quantum_info import Operator\nfrom qiskit.visualization import array_to_latex\n\nqc = QuantumCircuit(2)\nqc.h(0)\n\nop = Operator(qc)\narray_to_latex(op)\n\n\u23a1\u23a3\u23a2\u23a2\u23a2\u23a2\u23a2\u23a2\u23a212\u221a12\u221a0012\u221a\u221212\u221a000012\u221a12\u221a0012\u221a\u221212\u221a\u23a4\u23a6\u23a5\u23a5\u23a5\u23a5\u23a5\u23a5\u23a5[12120012\u221212000012120012\u221212]\nHowever, Operator(QuantumCircuit) raises an error in the case of a parametric quantum circuit:\nfrom qiskit.circuit import Parameter\n\nqc = QuantumCircuit(2)\ntheta = Parameter(name='$\\\\theta$')\nqc.ry(theta, 0)\n\nop = Operator(qc)  # ERROR!\n\nThis brings me to the question: is there a way in Qiskit to get the matrix operator symbolic representation from a given arbitrary PQC? For instance, in this case I would like to get a sympy.matrices.dense.Matrix object (with just one parameter \u03b8\u03b8) like this:\n\u23a1\u23a3\u23a2\u23a2\u23a2\u23a2\u23a2\u23a2\u23a2\u23a2\u23a2cos(\u03b82)sin(\u03b82)00\u2212sin(\u03b82)cos(\u03b82)0000cos(\u03b82)sin(\u03b82)00\u2212sin(\u03b82)cos(\u03b82)\u23a4\u23a6\u23a5\u23a5\u23a5\u23a5\u23a5\u23a5\u23a5\u23a5\u23a5[cos\u2061(\u03b82)\u2212sin\u2061(\u03b82)00sin\u2061(\u03b82)cos\u2061(\u03b82)0000cos\u2061(\u03b82)\u2212sin\u2061(\u03b82)00sin\u2061(\u03b82)cos\u2061(\u03b82)]\nEDIT: this is now possible by using the new qiskit-symb package\n", "answers": ["\nI do not believe this is currently possible. Here is a relevant open issue on the Qiskit repository. https://github.com/Qiskit/qiskit-terra/issues/4751\n", "\nAs a workaround you could convert your qiskit QuantumCircuit to a pytket Circuit using qiskit_to_tk and then use circuit_to_symbolic_unitary.\nThis does however involve installing the pytket-qiskit package so I'm not sure this really gives you what you're looking for tbh.\nEDIT: pytket and qiskit use different qubit ordering conventions (see comments). Use QuantumCircuit.reverse_bits() before conversion to swap the ordering of the qubits. This reordering is necessary for the unitary to match the one in the question.\nfrom qiskit import QuantumCircuit\nfrom qiskit.circuit import Parameter\n\n# define qiskit circuit as before\nqc = QuantumCircuit(2)\ntheta = Parameter(name='\\\\theta')\nqc.ry(theta, 0) \n\nNow convert circuit and display unitary\nfrom pytket.extensions.qiskit import qiskit_to_tk\nfrom pytket.utils.symbolic import circuit_to_symbolic_unitary\n\n# optional to change qubit ordering -- qc = qc.reverse_bits() \ntkc = qiskit_to_tk(qc)\ncircuit_to_symbolic_unitary(tkc)\n\n\n", "\nYou can apply an operator to a state, and see the symbolic result.  Unfortunately, I can't find any way of getting this to work for an operator.\nfrom sympy.physics.quantum.gate import CNOT, H\nfrom sympy.physics.quantum.qapply import qapply\nfrom sympy.physics.quantum.qubit import Qubit\n\n\nqapply(CNOT(0, 1) * H(0) * Qubit('000'))\n\nwhich will return\n2\u2013\u221a|000\u27e92+2\u2013\u221a|011\u27e922|000\u27e92+2|011\u27e92\nIt doesn't seem to have rotation operators, though you can write your own.  I'd love to find out how to just get the operator matrix.\n"], "comments": ["I don't think Qiskit uses sympy at all.", "I think it does... At least sympy is included in the requirements.txt file of the qiskit-terra repository", "Yes, I was looking for a way to do it in Qiskit but this is not possible at the moment so thank you anyway for the help. However, taking a look at your example, it seems that Qiskit and pytket are using a different qubits ordering convention and so the symbolic unitary matrix I would expect from Qiskit (I\u2297Ry(\u03b8)I\u2297Ry(\u03b8)) is different from the one returned by pytket (Ry(\u03b8)\u2297IRy(\u03b8)\u2297I).", "Yes, good point. Qiskit and pytket have opposite qubit ordering conventions. I should have mentioned that.  I'm a contributor to tket/pytket and I actually think it'd be nice to add an optional argument to reverse order the qubits when converting from qiskit. Would avoid some confusion I think. It already exists for the tk_to_qiskit function and should be fairly easy to add for the other direction. Thanks", "In fact you can use the QuantumCircuit.reverse_bits() method before conversion to get the ordering correct.", "Of course, thank you again. Just make sure that qc == tk_to_qiskit(qiskit_to_tk(qc))"], "link": "https://quantumcomputing.stackexchange.com//questions/29384/is-it-possible-to-get-the-symbolic-matrix-operator-associated-with-a-parameter?r=SearchResults"}