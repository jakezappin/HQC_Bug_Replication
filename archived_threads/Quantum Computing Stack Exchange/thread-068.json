{"question": "\nI'm new to QISKIT Aqua and I'm trying to follow the Ground State tutorial to solve the Water molecule ground state, but when I execute the calculations the kernel stops.\nI'm using IBM Q Experience jupyter notebooks and the only thing I changed from the original tutorial is the molecule. I Changed it by excluding the previous molecule and adding this to the code:\nimport numpy as np\n\nangle = np.deg2rad(104.45/2)\ndist = 0.9584\nmolecule = Molecule(geometry=[['O', [0., 0., 0.]],\n                              ['H', [dist*np.sin(angle), -dist*np.cos(angle), 0.]],\n                              ['H', [-dist*np.sin(angle), -dist*np.sin(angle), 0.]]],\n                     charge=0, multiplicity=1)\n\n", "answers": ["\nHere is the working code. Because of the symmetry in water molecule, I used the Z Matrix representation instead of the usual XYZ format.  You can and should be able to execute this within the IBM Quantum Experience.\nimport os\nos.environ['QISKIT_SETTINGS']=''\nimport matplotlib.pyplot as plt\n%matplotlib inline\n%config InlineBackend.figure_format = 'svg' # Makes the images look nice\nimport numpy as np\nfrom qiskit.aqua import QuantumInstance\nfrom qiskit.aqua.algorithms import NumPyMinimumEigensolver, VQE, NumPyEigensolver\nfrom qiskit.aqua.components.optimizers import COBYLA\nfrom qiskit.aqua.components.initial_states import Custom\nfrom qiskit import IBMQ, BasicAer, Aer\nfrom qiskit.chemistry.qmolecule import QMolecule\nfrom qiskit.chemistry.drivers import PySCFDriver, UnitsType\nfrom qiskit.chemistry import FermionicOperator\nfrom qiskit.chemistry.core import Hamiltonian, TransformationType, QubitMappingType\nfrom qiskit.circuit.library import TwoLocal\nimport warnings\nwarnings.filterwarnings(\"ignore\",category=DeprecationWarning)\n\nprovider = IBMQ.load_account()\nsimulator_backend = Aer.get_backend(\"qasm_simulator\")\nhardware_backend = provider.get_backend('ibmq_valencia')\nquantum_instance = QuantumInstance(backend = simulator_backend, shots= 1, optimization_level= 3)\n\natom_structure = \"H; O 1 0.958; H 2 0.958 1 104.47\"  \norbital_reduction=[ ] \n[unit, charge, spin, basis]= [UnitsType.ANGSTROM, 0, 0, 'sto6g'] \ndriver = PySCFDriver(atom= atom_structure, unit=unit,charge=charge, spin=spin, basis=basis)\nqmolecule = driver.run()\nferOp = Hamiltonian(transformation = TransformationType.FULL , \n                    qubit_mapping = QubitMappingType.PARITY,\n                    two_qubit_reduction = True,\n                    freeze_core = True, \n                    orbital_reduction = [ ], \n                    z2symmetry_reduction = 'auto')\nqubitOp, aux_ops = ferOp.run(qmolecule)\n\nenergy_shift = ferOp._energy_shift\nnuclear_repulsion_energy = ferOp._nuclear_repulsion_energy \ntotal_shift = energy_shift + nuclear_repulsion_energy \n\nprint('HF Energy is:' , ferOp._hf_energy )\nprint('\\n *********************************Exact Eigensolver*************************************** \\n')\nexact_result = NumPyMinimumEigensolver(qubitOp).run() \nee_result = ferOp.process_algorithm_result(exact_result)\nprint(ee_result)\n\n    \n#----------------------- VQE PROCESSED ---------------------------# \nvar_form= TwoLocal(qubitOp.num_qubits, ['ry'], ['cx'], entanglement= 'linear',\n                    reps= 2,skip_unentangled_qubits=True, skip_final_rotation_layer = False, insert_barriers=True,\n                    initial_state = None) \n\n\noptimizer = COBYLA(maxiter= 50,tol=0.000000001)   \nvqe = VQE(qubitOp, var_form, optimizer, initial_point = None, \n          include_custom = True, aux_operators=aux_ops)\nvqe_result = vqe.run(quantum_instance)\nvqe_processed_result = ferOp.process_algorithm_result(vqe_result)\nvqe_energy = vqe_result['eigenvalue'] + total_shift\ntotal_ang_moment = vqe_processed_result['total_angular_momentum'] \nprint('Optimal VQE energy at this step is:', vqe_energy)\nprint('The corresponding Total Angular Momentum is', total_ang_moment)\nvqe.get_optimal_circuit().draw('mpl', style = {'name': 'bw'}, scale = 0.75, plot_barriers = False) \n\nRan this gave me the output:\nHF Energy is: -75.6787913259016\n\n *********************************Exact Eigensolver*************************************** \n\n=== GROUND STATE ENERGY ===\n \n* Electronic ground state energy (Hartree): -84.916233233599\n  - computed part:      -23.633272241623\n  - frozen energy part: -61.282960991976\n  - particle hole part: 0.0\n~ Nuclear repulsion energy (Hartree): 9.187404411009\n> Total ground state energy (Hartree): -75.72882882259\nOptimal VQE energy at this step is: (-72.69078459811197+0j)\nThe corresponding Total Angular Momentum is 1.2057181036792375\n\nand the optimal circuit:\n\nAs you can see this var_form is too long to be executed with good result for the hardware so maybe you can modify it. Changing the entangle_map might help. So instead of using entanglement= 'linear' you can set it to be something else. Note that you can also specify how the CNOT gates are connected. That is if you specify:\nvar_form= TwoLocal(qubitOp.num_qubits, ['ry'], ['cx'], entanglement= [ [0,1],[2,3],[4,5],[6,7] ],\n                    reps= 1,skip_unentangled_qubits=True, skip_final_rotation_layer = False, insert_barriers=True,\n                    initial_state = None) \n\nThen you would get something like:\n     \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2591       \u2591  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\nq_0: \u2524 RY(\u03b8[0]) \u251c\u2500\u2591\u2500\u2500\u2500\u25a0\u2500\u2500\u2500\u2591\u2500\u2500\u2524 RY(\u03b8[8]) \u251c\n     \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2591 \u250c\u2500\u2534\u2500\u2510 \u2591  \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\nq_1: \u2524 RY(\u03b8[1]) \u251c\u2500\u2591\u2500\u2524 X \u251c\u2500\u2591\u2500\u2500\u2524 RY(\u03b8[9]) \u251c\n     \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2591 \u2514\u2500\u2500\u2500\u2518 \u2591 \u250c\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\nq_2: \u2524 RY(\u03b8[2]) \u251c\u2500\u2591\u2500\u2500\u2500\u25a0\u2500\u2500\u2500\u2591\u2500\u2524 RY(\u03b8[10]) \u251c\n     \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2591 \u250c\u2500\u2534\u2500\u2510 \u2591 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\nq_3: \u2524 RY(\u03b8[3]) \u251c\u2500\u2591\u2500\u2524 X \u251c\u2500\u2591\u2500\u2524 RY(\u03b8[11]) \u251c\n     \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2591 \u2514\u2500\u2500\u2500\u2518 \u2591 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\nq_4: \u2524 RY(\u03b8[4]) \u251c\u2500\u2591\u2500\u2500\u2500\u25a0\u2500\u2500\u2500\u2591\u2500\u2524 RY(\u03b8[12]) \u251c\n     \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2591 \u250c\u2500\u2534\u2500\u2510 \u2591 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\nq_5: \u2524 RY(\u03b8[5]) \u251c\u2500\u2591\u2500\u2524 X \u251c\u2500\u2591\u2500\u2524 RY(\u03b8[13]) \u251c\n     \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2591 \u2514\u2500\u2500\u2500\u2518 \u2591 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\nq_6: \u2524 RY(\u03b8[6]) \u251c\u2500\u2591\u2500\u2500\u2500\u25a0\u2500\u2500\u2500\u2591\u2500\u2524 RY(\u03b8[14]) \u251c\n     \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2591 \u250c\u2500\u2534\u2500\u2510 \u2591 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\nq_7: \u2524 RY(\u03b8[7]) \u251c\u2500\u2591\u2500\u2524 X \u251c\u2500\u2591\u2500\u2524 RY(\u03b8[15]) \u251c\n     \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2591 \u2514\u2500\u2500\u2500\u2518 \u2591 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n"], "comments": ["What is the error you encountered? If you are using Jupyter notebook  in the IBM Quantum Experience then it could means that you are exceeding the allotted memory... but I don't think that is the case for water unless you are using a pretty sophisticated basis set.", "While running I noticed that the memory peaks at 6.9GB just before stopping. I think it might be a memory problem so I'll try to run on my own PC. Other doubt I have is the \"charge\" value for the water molecule, as it's a polar molecule. Is 0 right? What value should I input?", "That should be fine I think. I put a working code in the answer. I used the Z-matrix representation for ease of use but XYZ format should also work. One possible issue you might encounter is the\"failed electronic structure\" error from PySCF. I see that this sometime occur... but it would work if you rerun that same point separately...", "It worked perfectly, thank you!"], "link": "https://quantumcomputing.stackexchange.com//questions/15230/kernel-stopping-when-solving-water-molecule-ground-state?r=SearchResults"}